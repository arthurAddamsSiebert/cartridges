/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:30:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.bc_005fshipping_005fdata.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.core.capi.naming.*;
import com.intershop.beehive.core.capi.currency.CurrencyMgr;
import com.intershop.beehive.core.capi.domain.*;
import com.intershop.component.shipping_data.capi.shippingmethod.*;
import com.intershop.component.shipping_data.capi.shippingmethod.shippingchargeplan.*;
import com.intershop.component.shipping_data.capi.shippingmethod.shippingchargeplan.bracket.*;
import java.util.*;

public final class ShippingMethod_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

 protected Boolean printTemplateMarker() { return Boolean.FALSE; } 
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 


setEncodingType("text/xml"); 
      out.write("\n\n\t\n");
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"impex/Modules", null, "10");} 
      out.write('\n');
 context.setCustomTagTemplateName("customattributes","inc/CustomAttributes",false,new String[]{"attributes"},null); 
      out.write('\n');

	 ShippingMethod shippingMethodObj = (ShippingMethod) getObject("shippingmethod");

      out.write("\t\n\t\n  <shipping-method>\n      <id>");
 {String value = null;try{value=context.getFormattedValue(getObject("shippingmethod:Id"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {19}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</id>\n      <active>");
 {String value = null;try{value=context.getFormattedValue(getObject("shippingmethod:Active"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {20}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</active>\n      <sequence-number>");
 {String value = null;try{value=context.getFormattedValue(getObject("shippingmethod:SequenceNumber"),"#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {21}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</sequence-number>\n\t  ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("shippingmethod:ShippingTimeMin")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("shippingmethod:ShippingTimeMin"),null).equals(context.getFormattedValue(getObject("null"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("shippingmethod:ShippingTimeMin"),null).equals(context.getFormattedValue("-1",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",22,e);}if (_boolean_result) { 
      out.write("\n\t      <ship-time-lower>");
 {String value = null;try{value=context.getFormattedValue(getObject("shippingmethod:ShippingTimeMin"),"#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {23}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</ship-time-lower>\n\t  ");
 } 
      out.write("\n\t  ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("shippingmethod:ShippingTimeMax")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("shippingmethod:ShippingTimeMax"),null).equals(context.getFormattedValue(getObject("null"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("shippingmethod:ShippingTimeMax"),null).equals(context.getFormattedValue("-1",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",25,e);}if (_boolean_result) { 
      out.write("\t  \n\t      <ship-time-upper>");
 {String value = null;try{value=context.getFormattedValue(getObject("shippingmethod:ShippingTimeMax"),"#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {26}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</ship-time-upper>\n      ");
 } 
      out.write("\n      <instruction-support>");
 {String value = null;try{value=context.getFormattedValue(getObject("shippingmethod:InstructionSupported"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {28}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</instruction-support>\n      ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("shippingmethod:StartDate")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("shippingmethod:StartDate"),null).equals(context.getFormattedValue(getObject("null"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",29,e);}if (_boolean_result) { 
      out.write("\n\t\t  <start-date>");
 {String value = null;try{value=context.getFormattedValue(getObject("shippingmethod:StartDate"),"yyyy-MM-dd",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {30}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</start-date>\n\t  ");
 } 
      out.write("\n\t  ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("shippingmethod:EndDate")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("shippingmethod:EndDate"),null).equals(context.getFormattedValue(getObject("null"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",32,e);}if (_boolean_result) { 
      out.write("\n\t  \t  <end-date>");
 {String value = null;try{value=context.getFormattedValue(getObject("shippingmethod:EndDate"),"yyyy-MM-dd",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {33}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</end-date>\n\t  ");
 } 
      out.write("\n\t  ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("shippingmethod:ShippingChargePlan")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("shippingmethod:ShippingChargePlan"),null).equals(context.getFormattedValue(getObject("null"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",35,e);}if (_boolean_result) { 
      out.write("\n\t\t  <shipping-charge-plan-type>");
 {String value = null;try{value=context.getFormattedValue(getObject("shippingmethod:ShippingChargePlan:Type"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {36}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</shipping-charge-plan-type>\n\t  ");
 } 
      out.write("\n\t  ");

            getPipelineDictionary().put("ShippingMethodCustomAttributes", new com.intershop.beehive.core.capi.impex.AttributeValueIterator(shippingMethodObj.createCustomAttributesIterator(), shippingMethodObj));
	   
      out.write("\n        ");
 processOpenTag(response, pageContext, "customattributes", new TagParameter[] {
new TagParameter("attributes",getObject("ShippingMethodCustomAttributes"))}, 41); 
      out.write("\n\t\t\n\t\t");

		if(shippingMethodObj.getShippingChargePlan()!=null)
		{
			ShippingChargePlan chargePlan=shippingMethodObj.getShippingChargePlan();
			if(chargePlan!=null)
			{
					getPipelineDictionary().put("chargePlan",chargePlan);
					getPipelineDictionary().put("chargePlanCustomAttributes", new com.intershop.beehive.core.capi.impex.AttributeValueIterator(chargePlan.createCustomAttributesIterator(), chargePlan));
					
      out.write("\n\t\t\t\t\t\t<shipping-charge-plan>\n\t\t\t\t\t\t\t<id>");
 {String value = null;try{value=context.getFormattedValue(getObject("chargePlan:Id"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {53}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</id>\n\t\t\t\t\t\t\t<tax-class>");
 {String value = null;try{value=context.getFormattedValue(getObject("chargePlan:TaxClassCode"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {54}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</tax-class>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("chargePlan:Brackets") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",56,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t");
 while (loop("chargePlan:Brackets","Bracket",null)) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t<bracket>\n\t\t\t\t\t\t\t\t\t\t<currency>");
 {String value = null;try{value=context.getFormattedValue(getObject("Bracket:CurrencyCode"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {59}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</currency>\n\t\t\t\t\t\t\t\t\t\t");

											ShippingChargePlanBracket bracket = (ShippingChargePlanBracket) getObject("Bracket");
											getPipelineDictionary().put("bracketCustomAttributes", new com.intershop.beehive.core.capi.impex.AttributeValueIterator(bracket.createCustomAttributesIterator(), bracket));
										
      out.write("\n\t\t\t\t\t\t\t\t\t\t");
 processOpenTag(response, pageContext, "customattributes", new TagParameter[] {
new TagParameter("attributes",getObject("bracketCustomAttributes"))}, 64); 
      out.write("\t\n\t\t\t\t\t\t\t\t\t\t</bracket>\n\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t");
 processOpenTag(response, pageContext, "customattributes", new TagParameter[] {
new TagParameter("attributes",getObject("chargePlanCustomAttributes"))}, 68); 
      out.write("\t\n\t\t\t\t\t\t</shipping-charge-plan>\n\t\t\t\t\t");

					if(chargePlan.getType().name() == "FLEXSHIPPING")
					{
				
					
      out.write("\n\t\t\t\t\t\t");
 while (loop("chargePlan:AssignedShippingChargePlans:KeySet","SelectorID",null)) { 
      out.write("\n\t\t\t\t\t\t\t");
 {Object temp_obj = (getObject("chargePlan:AssignedShippingChargePlan(SelectorID)")); getPipelineDictionary().put("flexChargePlan", temp_obj);} 
      out.write("\n\t\t\t\t\t\t");

							ShippingChargePlan flexChargePlan=(ShippingChargePlan)getObject("flexChargePlan");
							getPipelineDictionary().put("chargePlanCustomAttributes", new com.intershop.beehive.core.capi.impex.AttributeValueIterator(flexChargePlan.createCustomAttributesIterator(), flexChargePlan));
						
      out.write("\n\t\t\t\t\t\t\t<shipping-charge-plan>\n\t\t\t\t\t\t\t\t<id>");
 {String value = null;try{value=context.getFormattedValue(getObject("flexChargePlan:Id"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {82}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</id>\n\t\t\t\t\t\t\t\t<tax-class>");
 {String value = null;try{value=context.getFormattedValue(getObject("flexChargePlan:TaxClassCode"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {83}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</tax-class>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("flexChargePlan:Brackets") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",85,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t");
 while (loop("flexChargePlan:Brackets","Bracket",null)) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t<bracket>\n\t\t\t\t\t\t\t\t\t\t\t<currency>");
 {String value = null;try{value=context.getFormattedValue(getObject("Bracket:CurrencyCode"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {88}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</currency>\n\t\t\t\t\t\t\t\t\t\t\t");

												ShippingChargePlanBracket bracket = (ShippingChargePlanBracket) getObject("Bracket");
												getPipelineDictionary().put("bracketCustomAttributes", new com.intershop.beehive.core.capi.impex.AttributeValueIterator(bracket.createCustomAttributesIterator(), bracket));
											
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t");
 processOpenTag(response, pageContext, "customattributes", new TagParameter[] {
new TagParameter("attributes",getObject("bracketCustomAttributes"))}, 93); 
      out.write("\t\n\t\t\t\t\t\t\t\t\t\t\t</bracket>\n\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t");
 processOpenTag(response, pageContext, "customattributes", new TagParameter[] {
new TagParameter("attributes",getObject("chargePlanCustomAttributes"))}, 97); 
      out.write("\t\n\t\t\t\t\t\t\t</shipping-charge-plan>\n\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t");

				}
			} 
		}		
		
      out.write("\n</shipping-method>\n\t\n");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
