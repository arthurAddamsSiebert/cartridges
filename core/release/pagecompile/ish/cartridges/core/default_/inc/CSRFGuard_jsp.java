/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-07 18:11:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.core.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class CSRFGuard_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
      out.write('\n');
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"inc/CSRFGuardJSToken.isml", null, "2");} 
      out.write("\n<script type=\"text/javascript\">\n/**\n * Based on OWASP CSRFGuard 3.0.0.503. See https://www.owasp.org/index.php/Category:OWASP_CSRFGuard_Project.\n */\n\n/**\n * The OWASP CSRFGuard Project, BSD License\n * Eric Sheridan (eric.sheridan@owasp.org), Copyright (c) 2011 \n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *    2. Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *    3. Neither the name of OWASP nor the names of its contributors may be used\n *       to endorse or promote products derived from this software without specific\n *       prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n");
      out.write(" * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nvar CSRFGuard = (function() {\t\n\tvar TOKEN_NAME = \"SynchronizerToken\";\n\t\n\t/** string utility functions * */\n\tString.prototype.startsWith = function(prefix) {\n\t\treturn this.indexOf(prefix) === 0;\n\t}\n\n\tString.prototype.endsWith = function(suffix) {\n\t\treturn this.match(suffix+\"$\") === suffix;\n\t};\n\n\t/** hook using standards based prototype * */\n");
      out.write("\tfunction hijackStandard() {\n\t\tXMLHttpRequest.prototype._open = XMLHttpRequest.prototype.open;\n\t\tXMLHttpRequest.prototype.open = function(method, url, async, user, pass) {\n\t\t\tthis.url = url;\n\t\t\t\n\t\t\tthis._open.apply(this, arguments);\n\t\t}\n\t\t\n\t\tXMLHttpRequest.prototype._send = XMLHttpRequest.prototype.send;\n\t\tXMLHttpRequest.prototype.send = function(data) {\n\t\t\tif(this.onsend != null) {\n\t\t\t\tthis.onsend.apply(this, arguments);\n\t\t\t}\n\t\t\t\n\t\t\tthis._send.apply(this, arguments);\n\t\t}\n\t}\n\n\t/** ie does not properly support prototype - wrap completely * */\n\tfunction hijackExplorer() {\n\t\tvar _XMLHttpRequest = window.XMLHttpRequest;\n\t\t\n\t\tfunction alloc_XMLHttpRequest() {\n\t\t\tthis.base = _XMLHttpRequest ? new _XMLHttpRequest : new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n\t\t}\n\t\t\n\t\tfunction init_XMLHttpRequest() {\n\t\t\treturn new alloc_XMLHttpRequest;\n\t\t}\n\t\t\n\t\tinit_XMLHttpRequest.prototype = alloc_XMLHttpRequest.prototype;\n\t\t\n\t\t/** constants * */\n\t\tinit_XMLHttpRequest.UNSENT = 0;\n\t\tinit_XMLHttpRequest.OPENED = 1;\n\t\tinit_XMLHttpRequest.HEADERS_RECEIVED = 2;\n");
      out.write("\t\tinit_XMLHttpRequest.LOADING = 3;\n\t\tinit_XMLHttpRequest.DONE = 4;\n\t\t\n\t\t/** properties * */\n\t\tinit_XMLHttpRequest.prototype.status = 0;\n\t\tinit_XMLHttpRequest.prototype.statusText = \"\";\n\t\tinit_XMLHttpRequest.prototype.readyState = init_XMLHttpRequest.UNSENT;\n\t\tinit_XMLHttpRequest.prototype.responseText = \"\";\n\t\tinit_XMLHttpRequest.prototype.responseXML = null;\n\t\tinit_XMLHttpRequest.prototype.onsend = null;\n\t\t\n\t\tinit_XMLHttpRequest.url = null;\n\t\tinit_XMLHttpRequest.onreadystatechange = null;\n\n\t\t/** methods * */\n\t\tinit_XMLHttpRequest.prototype.open = function(method, url, async, user, pass) {\n\t\t\tvar self = this;\n\t\t\tthis.url = url;\n\t\t\t\n\t\t\tthis.base.open(method, url, async, user, pass);\n\t\t\t\n\t\t\tthis.base.onreadystatechange = function() {\n\t\t\t\ttry { self.status = self.base.status; } catch (e) { }\n\t\t\t\ttry { self.statusText = self.base.statusText; } catch (e) { }\n\t\t\t\ttry { self.readyState = self.base.readyState; } catch (e) { }\n\t\t\t\ttry { self.responseText = self.base.responseText; } catch(e) { }\n\t\t\t\ttry { self.responseXML = self.base.responseXML; } catch(e) { }\n");
      out.write("\t\t\t\t\n\t\t\t\tif(self.onreadystatechange != null) {\n\t\t\t\t\tself.onreadystatechange.apply(this, arguments);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tinit_XMLHttpRequest.prototype.send = function(data) {\n\t\t\tif(this.onsend != null) {\n\t\t\t\tthis.onsend.apply(this, arguments);\n\t\t\t}\n\t\t\t\n\t\t\tthis.base.send(data);\n\t\t}\n\t\t\n\t\tinit_XMLHttpRequest.prototype.abort = function() {\n\t\t\tthis.base.abort();\n\t\t}\n\t\t\n\t\tinit_XMLHttpRequest.prototype.getAllResponseHeaders = function() {\n\t\t\treturn this.base.getAllResponseHeaders();\n\t\t}\n\t\t\n\t\tinit_XMLHttpRequest.prototype.getResponseHeader = function(name) {\n\t\t\treturn this.base.getResponseHeader(name);\n\t\t}\n\t\t\n\t\tinit_XMLHttpRequest.prototype.setRequestHeader = function(name, value) {\n\t\t\treturn this.base.setRequestHeader(name, value);\n\t\t}\n\t\t\n\t\t/** hook * */\n\t\twindow.XMLHttpRequest = init_XMLHttpRequest;\n\t}\n\n\t/** check if valid domain based on domainStrict * */\n\tfunction isValidDomain(current, target) {\n\t\tvar result = false;\n\t\t\n\t\t/** check exact or subdomain match * */\n\t\tif(current === target) {\n\t\t\tresult = true;\n\t\t} else /* if(%DOMAIN_STRICT% === false) */ {\n");
      out.write("\t\t\tif(target.charAt(0) === '.') {\n\t\t\t\tresult = current.endsWith(target);\n\t\t\t} else {\n\t\t\t\tresult = current.endsWith('.' + target);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\n\t/** determine if uri/url points to valid domain * */\n\tfunction isValidUrl(src) {\n\t\tvar result = false;\n\t\t\n\t\t/** parse out domain to make sure it points to our own * */\n\t\tif(src.substring(0, 7) === \"http://\" || src.substring(0, 8) === \"https://\") {\n\t\t\tvar token = \"://\";\n\t\t\tvar index = src.indexOf(token);\n\t\t\tvar part = src.substring(index + token.length);\n\t\t\tvar domain = \"\";\n\t\t\t\n\t\t\t/** parse up to end, first slash, or anchor * */\n\t\t\tfor(i=0; i<part.length; i++) {\n\t\t\t\tvar character = part.charAt(i);\n\t\t\t\t\n\t\t\t\tif(character === '/' || character === ':' || character === '");
      out.print(context.getFormattedValue("#",null));
      out.write("') {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tdomain += character;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult = isValidDomain(document.domain, domain);\n\t\t\t/** explicitly skip anchors * */\n\t\t} else if(src.charAt(0) === '");
      out.print(context.getFormattedValue("#",null));
      out.write("') {\n\t\t\tresult = false;\n\t\t\t/** ensure it is a local resource without a protocol * */\n\t\t} else if(!src.startsWith(\"//\") && (src.charAt(0) === '/' || src.indexOf(':') === -1)) {\n\t\t\tresult = true;\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\n\t/** parse uri from url * */\n\tfunction parseUri(url) {\n\t\tvar uri = \"\";\n\t\tvar token = \"://\";\n\t\tvar index = url.indexOf(token);\n\t\tvar part = \"\";\n\t\t\n\t\t/**\n\t\t * ensure to skip protocol and prepend context path for non-qualified\n\t\t * resources (ex: \"protect.html\" vs\n\t\t * \"/Owasp.CsrfGuard.Test/protect.html\").\n\t\t */\n\t\tif(index > 0) {\n\t\t\tpart = url.substring(index + token.length);\n/*\t\t} else if(url.charAt(0) != '/') {\n\t\t\tpart = \"%CONTEXT_PATH%/\" + url;*/\n\t\t} else {\n\t\t\tpart = url;\n\t\t}\n\t\t\n\t\t/** parse up to end or query string * */\n\t\tvar uriContext = (index === -1);\n\t\t\n\t\tfor(var i=0; i<part.length; i++) {\n\t\t\tvar character = part.charAt(i);\n\t\t\t\n\t\t\tif(character === '/') {\n\t\t\t\turiContext = true;\n\t\t\t} else if(uriContext === true && (character === '?' || character === '");
      out.print(context.getFormattedValue("#",null));
      out.write("')) {\n\t\t\t\turiContext = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(uriContext === true) {\n\t\t\t\turi += character;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn uri;\n\t}\n\n\t/** inject tokens as hidden fields into forms * */\n\tfunction injectTokenForm(form, tokenName, tokenValue) {\n\t\t\n\t\tif (form.elements[tokenName])\n\t\t{\n\t\t\tconsole.log( \"CSRFGuard: Skipping injection into form \", form, \" (name: \",\n\t\t\t\t\tform.getAttribute(\"name\"), \") because it already exists\");\n\t\t\treturn;\t\t\t\n\t\t}\n\t\tvar action = form.getAttribute(\"action\");\n\t\t\n\t\tif(action != null && isValidUrl(action)) {\n\t\t\tvar uri = parseUri(action);\n\t\t\tvar hidden = document.createElement(\"input\");\n\t\t\t\n\t\t\thidden.setAttribute(\"type\", \"hidden\");\n\t\t\thidden.setAttribute(\"name\", tokenName);\n\t\t\thidden.setAttribute(\"value\", tokenValue);\n\t\t\t//add handler for reset button in IE version 8 (reset also clears hidden input fields)\n\t\t\t\tif (navigator.appName === \"Microsoft Internet Explorer\") {\n\t\t\t\t\t//check IE version\n\t\t\t\t\tvar ua = navigator.userAgent;\n\t\t\t\t    var re  = new RegExp(\"MSIE ([0-9]{1,}[\\.0-9]{0,})\");\n\t\t\t\t    if (re.exec(ua) != null) {\n");
      out.write("\t\t\t\t    \tver = parseFloat( RegExp.$1 );\n\t\t\t\t    }\n\t\t\t\t    //apply fix only for IE 8\n\t\t\t\t    if ( ver == 8.0 ) { \n\t\t\t\t\t\t//added to restore value in case of reset button is triggered in  IE version 8\t\t\t\t\t\n\t\t\t\t\t\thidden.setAttribute(\"data-value\", tokenValue);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//add reset listener\t\n\t\t\t\t\t\tif (typeof console != \"undefined\") {\n\t\t\t\t\t\t\tconsole.log(\"CSRFGuard: Added reset event handler to \", form);\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\tform.attachEvent('onreset', \t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//get value from data-value and store it as value\n\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t// applying timeout, because onreset is fired before resetting is finished\n\t\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\t\thidden.setAttribute(\"value\", hidden.getAttribute(\"data-value\"));\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t\tform.insertBefore(hidden, form.firstChild);\n\t\t\t\n\t\t\tif (typeof console != \"undefined\") {\n\t\t\tconsole.log(\"CSRFGuard: Injected synchronizer token into form \", form, \" (name: \",\n\t\t\t\t\tform.getAttribute(\"name\"), \")\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Inject CSRF synchronizer tokens throughout scope or if no scope is given throughout\n");
      out.write("\t *  the document. **/\n\tfunction injectTokens(tokenName, tokenValue, scope) {\t\t\n\t\t/** iterate over all elements and injection token * */\n\t\t\t\t\t\t\n\t\tvar forms;\t\n\t\tif (scope) {\n\t\t\tif (scope.tagName.toLowerCase() === 'form') {\n\t\t\t\t// scope is a form itself and since forms may not be nested, this is the only form\n\t\t\t\tforms = [scope];\n\t\t\t} else {\n\t\t\t\tforms = scope.getElementsByTagName('form');\n\t\t\t}\n\t\t} else {\n\t\t\tforms = document.getElementsByTagName('form');\t\t\t\n\t\t}\n\t\t\t\t\n\t\tvar len = forms.length;\n\t\t\n\t\tfor(var i=0; i<len; i++) {\t\t\t\t\t\t\t\t\n\t\t\tinjectTokenForm(forms[i], tokenName, tokenValue);\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * Only inject the tokens if the JavaScript was referenced from HTML that\n\t * was served by us. Otherwise, the code was referenced from malicious HTML\n\t * which may be trying to steal tokens using JavaScript hijacking\n\t * techniques.\n\t */\n\t//if(isValidDomain(document.domain, \"%DOMAIN_ORIGIN%\")) {\n\t\t/** optionally include Ajax support * */\n\t\tif(navigator.appName === \"Microsoft Internet Explorer\") {\n\t\t\thijackExplorer();\n");
      out.write("\t\t} else {\n\t\t\thijackStandard();\n\t\t}\n\t\t\n\t\tXMLHttpRequest.prototype.onsend = function(data) {\n\t\t\tif(isValidUrl(this.url)) {\t\t\t\n\t\t\t\tthis.setRequestHeader(TOKEN_NAME, SYNCHRONIZER_TOKEN_VALUE);\n\t\t\t}\n\t\t};\n\t\t\n\t\t/** update nodes in DOM after load **/\n\t\tvar ready = (function() {\n\t\t\tvar called = false;\n\t\t\treturn function() {\n\t\t\t\t// ready() should only be called once\n\t\t\t\tif (called) return;\n\t\t\t\tcalled = true;\n\t\t\t\t\n\t\t\t\tif (typeof console != \"undefined\") {\n\t\t\t\t\tconsole.log(\"CSRFGuard: Injecting synchronizer tokens upon page load.\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tinjectTokens(TOKEN_NAME, SYNCHRONIZER_TOKEN_VALUE);\n\t\t\t\t\n\t\t\t\tif (typeof console != \"undefined\") {\n\t\t\t\t\tconsole.log(\"CSRFGuard: Finished injecting synchronizer tokens upon page load.\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (typeof jQuery != 'undefined') {\n\t\t\t\t\tvar proxied = jQuery.fn.html;\n\t\t\t\t\tjQuery.fn.html = function() {\t\t\t\t\t\n\t\t\t\t\t\tif (arguments.length === 0) {\n\t\t\t\t\t\t\t// do not inject tokens if the function is used for getting the HTML content\n\t\t\t\t\t\t\treturn proxied.apply(this, arguments);\n\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t\n\t\t\t\t\t\tvar result = proxied.apply(this, arguments);\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.each(function(index, value) {\t\t\t\t\t\n\t\t\t\t\t\t\tinjectTokens(TOKEN_NAME, SYNCHRONIZER_TOKEN_VALUE, value);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn result;\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t};\n\t\t\t    }\n\t\t\t};\n\t\t})();\n\n\t\t \n\t\t// detach event listeners, run ready()\n\t\tvar DOMContentLoaded = function() {\n\t\t\tif (document.addEventListener) {\n\t\t\t\tdocument.removeEventListener('DOMContentLoaded', DOMContentLoaded, false);\n\t\t\t\tready();\n\t\t\t} else if (document.readyState === 'complete') {\n\t\t\t\tdocument.detachEvent('onreadystatechange', DOMContentLoaded);\n\t\t\t\tready();\n\t\t\t}\n\t\t};\n\t\t// attach event listeners\n\t\tif (document.readyState === 'complete') {\n\t\t\twindow.setTimeout(ready, 1);\n\t\t} else if (document.addEventListener) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', DOMContentLoaded, false);\n\t\t\twindow.addEventListener('load', ready, false);\n\t\t} else {\n\t\t\tdocument.attachEvent('onreadystatechange', DOMContentLoaded);\n\t\t\twindow.attachEvent('onload', ready);\n\t\t}\n\t//}\n\t\t\n\t/**\n\t * Submits a POST request based on the href-attribute of a link. The POST\n");
      out.write("\t * request includes the synchronizer token.\n\t * This can be used to turn links (GET-requests) that cannot carry the\n\t * synchronizer token to forms (POST-requests) with a valid synchronizer token.\n\t */\n\tfunction triggerLinkAsPostRequestWithToken(tokenName, tokenValue, link) {\n\t    var form = document.createElement(\"form\");\n\t    form.setAttribute(\"method\", \"post\");\n\t    form.setAttribute(\"action\", link.href);\t    \n\t    injectTokenForm(form, tokenName, tokenValue);\t    \n\t    document.body.appendChild(form);\n\t    form.submit();\n\t}\n\t\t\n    // expose public functions\n\treturn {\n\t\t'injectTokens': function(scope) {\n\t\t\tinjectTokens(TOKEN_NAME, SYNCHRONIZER_TOKEN_VALUE, scope);\n\t\t},\n\t\t'triggerLinkAsPostRequestWithToken': function(link) {\n\t\t\ttriggerLinkAsPostRequestWithToken(TOKEN_NAME, SYNCHRONIZER_TOKEN_VALUE, link);\n\t\t}\n\t};\n}) ();\n</script>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
