import "enfinity:/core/edl/com/intershop/beehive/core/capi/staging/StagingEntity.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/staging/StagingTablePreparer.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external SystemException type "com.intershop.beehive.core.capi.common.SystemException";
external ForeignKey type "com.intershop.beehive.core.capi.staging.ForeignKey";
external StagingTableConstants type "com.intershop.beehive.core.capi.staging.StagingTableConstants";

namespace com.intershop.beehive.core.capi.staging
{
    /*
     * This bean represents a staging entity in a database. It is used to
     * configure database tables for staging. <P>
     * Database tables can be staged unit/site specific. The attribute
     * 'domainSpecificFlag' determines if database table contain unit/site
     * specific content.<P>
     * There are database tables, which can be changed through the storefront.
     * This tables should not be staged in SYNONYM_REPLICATION mode. The
     * attribute 'readOnlyFlag' determines if database table can be changed
     * through the storefront.
     * There are database tables having no domain identifer, but  containing
     * unit/site specific content. Content has to be assigned to a unit/site by
     * using a database join. The attribute 'foreignKeyName' determines the of
     * foreign key to be used to  create this join.<P>
     * There are database tables having a domain identifier, which is not named
     * 'DOMAINID' in database. The attribute 'columnNameOfDomainID' is used to
     * determine the column name of domain identifier.
     * @author Thomas Budich
     * @version 1.0 02/07/2002
     */
    cartridge interface StagingTable extends StagingEntity, StagingTableConstants
    {
        /*
         * Contains the original table name. It will be replaced by a synonym in database.
         */
        attribute tableName : string required;

        /*
         * Contains 1 if the table contains domain specific content, otherwise it is set to 0.
         */
        attribute domainSpecificFlag : int required;

        /*
         * Contains 1 if the can not be edit through storefront of live system, otherwise 0.
         */
        attribute readOnlyFlag : int required;

        /*
         * Contains the name of foreign key, configured in properties of each cartridge. The name is unique within this cartridge. If the table contains a column with an according domain identifier this column is null.
         */
        attribute foreignKeyName : string required;

        /*
         * If the staging table contains domain specific content, this attribute contains the name of column with domainid.
         */
        attribute columnNameOfDomainID : string required;

        /*
         * This column contains the name of cartidge the table belongs to.
         */
        attribute cartridgeName : string required;

        /*
         * Contains the current suffix of live table, which is referenced by created synonym in database.
         */
        attribute liveTableNameSuffix : string required;

        /*
         * This method returns the name suffix of destination table.
         * @return the name suffix of destination table
         */
        operation getDestinationTableNameSuffix() : string throws SystemException;

        /*
         * Returns <code>true</code> it staging table contains domain specific content.
         */
        operation isDomainSpecific() : boolean;

        /*
         * Returns <code>true</code> if staging table can be written during staging process, otherwise <code>false</code>.
         */
        operation isReadOnly() : boolean;

        /*
         * Returns the real name of the database table that is currently the live table.
         * 
         * @return Name of the real live database table.
         */
        operation getLiveTableName() : string;

        /*
         * Returns the name of shadow table. If the environment of table in database is not created, this method returns <code>null</code>.
         */
        operation getShadowTableName() : string;

        /*
         * Returns the foreign key referencing the table having a domain identifier column.
         */
        operation getForeignKey() : ForeignKey;

        operation getPreparer() : StagingTablePreparer;
    }
}
