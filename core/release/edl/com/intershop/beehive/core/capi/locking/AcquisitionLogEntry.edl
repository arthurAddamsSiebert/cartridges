import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/locking/Process.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/locking/Resource.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.capi.locking
{
    cartridge interface AcquisitionLogEntry extends ExtensibleObject
    {
        attribute AcquisitionDate : datetime required;

        /*
         * The date of resources are released.
         */
        attribute ReleaseDate : datetime;

        attribute ProcessID : string required readonly ;

        attribute ErrorCode : int;

        attribute ReasonForFailure : string;

        attribute ContentionProcessID : string readonly ;

        attribute ContentionResourceID : string readonly ;

        /*
         * Creates an iterator of all resources acquired by this acquisition.
         */
        operation createResourcesIterator() : Iterator;

        /*
         * Set the process that tried to acquire the resources.
         * 
         * @param process The process that tried to acquire the resources.
         */
        operation setProcess(process : Process) : void;

        /*
         * Get the process that tried to acquire the resources.
         * 
         * @return The process that tried to acquire the resources.
         */
        operation getProcess() : Process;

        /*
         * Set the process that caused the resource acquisition problem.
         * 
         * @param contentionProcess The process that caused the resource acquisition problem.
         */
        operation setContentionProcess(contentionProcess : Process) : void;

        /*
         * Get the process that caused the resource acquisition problem.
         * 
         * @return The process that caused the resource acquisition problem.
         */
        operation getContentionProcess() : Process;

        /*
         * Set the resource that caused the resource acquisition problem.
         * 
         * @param contentionResource The process that caused the resource acquisition problem.
         */
        operation setContentionResource(contentionResource : Resource) : void;

        /*
         * Get the resource that caused the resource acquisition problem.
         * 
         * @return The resource that caused the resource acquisition problem.
         */
        operation getContentionResource() : Resource;
    }
}
