import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

import "enfinity:/core/edl/com/intershop/beehive/core/capi/process/ProcessChainTask.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/process/ProcessChainConcurrent.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/process/ProcessChainSequence.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/locking/Process.edl";

external TimeUnit type "java.util.concurrent.TimeUnit";

namespace com.intershop.beehive.core.capi.process
{
    /*
     * Each ProcessChain describes a collection of tasks.
     * <br>NotificationServiceName - after running the chain a notification is triggered. 
     * this name identifies the notification service
     * <br>ThreadCorePoolSize - defines the minimum count of threads in a process chain thread pool
     * <br>ThreadMaximumPoolSize - defines the maximum count of threads in a process chain thread pool
     * <br>ThreadKeepAliveTime
     * <br>ThreadKeepAliveTimeUnit - time unit for ThreadKeepAliveTime amount
     * <br>
     * <br>Related classes:
     * <br>ProcessChainTask - the base class of ProcessChain and a list of tasks, will be executed
     */
	cartridge interface ProcessChain extends ProcessChainTask
	{
		attribute threadCorePoolSize:int required;
		attribute threadMaximumPoolSize:int required;
		attribute threadKeepAliveTime:long required;
		attribute threadKeepAliveTimeUnit:TimeUnit required;
		
		relation task : ProcessChainTask[0..1];
		
        /*
         * starts the chain<p>
         * 
         * @param parent process of outer execution
         * @return      return status of last task (non isErrorTask)
         */
        operation start(parent:Process) : Integer;
	}
}