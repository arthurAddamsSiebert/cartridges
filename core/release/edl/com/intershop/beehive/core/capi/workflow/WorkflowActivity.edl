import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/workflow/WorkflowProcess.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/workflow/WorkflowThread.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

primitive time;

namespace com.intershop.beehive.core.capi.workflow
{
    /*
     * This class represents a task of a workflow process. Depending on the state of the activity, it is either the task that needs to be fulfilled in order to continue the execution of the workflow thread or a history activity of the workflow process.<p>
     */
    cartridge interface WorkflowActivity extends ExtensibleObject
    {
        /*
         * The id of the user that accepted the activity. Is <code>null</code> if not accepted yet.
         */
        attribute acceptorID : string readonly required;

        /*
         * The id of the user that created(sent) the activity.
         */
        attribute senderID : string required;

        /*
         * The state of the activity. Can be <code>WFA_STATE_NOT_STARTED</code>, <code>WFA_STATE_WAITING</code>, <code>WFA_STATE_RUNNING</code> or
         * <code>WFA_STATE_COMPLETED</code>.
         * 
         * @see com.intershop.beehive.core.capi.workflow.WorkflowConstants
         */
        attribute state : int readonly required;

        /*
         * The pipeline used to view the activity. Contains always pipeline name and start node (separated by the - character).<p>
         * Normally the pipeline name will be included as hyperlink in the tasklist so that clicking an item in the tasklist leads to invocation of the pipeline.
         */
        attribute pipeline : string required;

        /*
         * Indicates if this is an activity that needs to be processed by the system. System activities are processed by a scheduled job process.
         */
        attribute systemActivity : boolean required;

        /*
         * The name of the template that provides the subject of the activity. Normally the template will be directly included in the tasklist, providing the subject of the activity.
         */
        attribute subjectTemplate : string required;

        /*
         * The template used to send notifications for the activity. If <code>null</code>, the global notification template of the workflow process is used for notification.
         */
        attribute notificationTemplate : string required;

        /*
         * The notification state of the activity. Can be <code>WFA_STATE_NOTIFICATION_NOT_READY</code>, <code>WFA_STATE_NOTIFICATION_PENDING</code>, <code>WFA_STATE_NOTIFICATION_SENT</code> or
         * <code>WFA_STATE_NOTIFICATION_NOT_REQUIRED</code>.
         * 
         * @see com.intershop.beehive.core.capi.workflow.WorkflowConstants
         */
        attribute notificationState : int required;

        /*
         * The time at which the activity was created.
         */
        attribute creationDate : time readonly required;

        /*
         * The absolute time at which the timerPipeline should be triggered. This attribute will be evaluated by a job pipeline. In case the time stored in this attribute is less than the current time, the timerPipeline will be executed.
         */
        attribute timerDeadline : time required;

        /*
         * The pipeline used to trigger an escalation action. Will be invoked by a job pipeline.
         */
        attribute timerPipeline : string required;

        relation domain : Domain[0..1] readonly;

        relation thread : WorkflowThread[0..1];

        relation process : WorkflowProcess[0..1] readonly;

        /*
         * Returns the value of attribute 'UUID'.<p>
         * This attribute contains the unique identifier. It is the primary key.
         * 
         * @return      the value of the attribute 'UUID'
         */
        operation getUUID() : string;

        /*
         * Is this activity accepted yet
         * 
         * @return      true if accepted, false if not accepted yet
         */
        operation isAccepted() : boolean;
    }
}
