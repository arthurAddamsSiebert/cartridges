import "enfinity:/core/edl/com/intershop/beehive/core/capi/businessevent/BusinessEventPipelineInfo.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/localization/LocaleInformation.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.capi.businessevent
{
    /*
     * Each BusinessEventDefinition describes an kind of business event that can be
     * triggered. A BusinessEventDefinition has the following attributes, used for
     * identification:
     * <br>EventClass - identifies the subclass to use when triggering the business
     * event, eg OrderEvent, ProductLineItemEvent
     * <br>EventTarget - identifies the kind of object to be the target of the
     * business event, eg SellerOrder, SupplierOrder
     * <br>EventName - the name of the business event, eg OrderStatus-CANCELLED or
     * RouteSellerOrder
     * <br>
     * <br>The following attributes effect the availableility of the business event:
     * <br>PermissionID - if set, only users with this permission can trigger the event
     * <br>Hidden - if true, the business event will not be made available in the user
     * interface, but can be triggered from program code.
     * <br>
     * <br>Related classes:
     * <br>BusinessEventPipelineInfo - the pipeline and start node to be called when
     * the business event is triggered is defined in this class, and can be specified
     * differently  per domain
     * <br>BusinessEventInfo - used to store localized attributes such as display name
     * for the busienss event definitions
     */
    cartridge interface BusinessEventDefinition
    {
        attribute eventClass : string readonly required;

        /*
         * The name identifying the kind of target object for the event, eg SellerOrder, SupplierOrder...
         */
        attribute eventTarget : string readonly required;

        attribute eventName : string readonly required;

        attribute permissionID : string required;

        attribute hidden : boolean required;

        attribute ^oca : int required;

        relation businessEventPipelineInfos : BusinessEventPipelineInfo[0..n] readonly;

        /*
         * Returns the value of the localized extensible object attribute
         * "displayName" for the current locale. The method is forwarded to the
         * related BusinessEventInfo if one exists, otherwise null is returned.<p>
         * 
         * @return the value of the localized extensible object attribute,
         * or null if it wasn't found
         */
        operation getDisplayName() : string;

        /*
         * Returns the value of the localized extensible object attribute
         * "displayName" for the given locale. The method is forwarded to the
         * related BusinessEventInfo if one exists, otherwise null is returned.<p>
         * 
         * @param locale the locale
         * @return the value of the localized extensible object attribute,
         * or null if it wasn't found
         */
        operation getDisplayName(locale : LocaleInformation) : string;

        /*
         * Sets the value of the localized extensible object attribute
         * "displayName" for the given locale. The method is forwarded to the
         * related BusinessEventInfo if one exists<p>
         * 
         * @param the value to set
         * @param the locale
         */
        operation setDisplayName(displayName : string, locale : LocaleInformation) : void;

        /*
         * Sets the value of the attribute 'permissionID' to null.<p>
         * 
         */
        operation setPermissionIDNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'permissionID' is null.<p>
         * 
         * @return      true if the value of attribute 'permissionID' is null, false otherwise
         */
        operation getPermissionIDNull() : boolean;

        /*
         * Returns the Home interface name of this Bean.
         * 
         * @return  the Home interface name
         */
        operation getFactoryName() : string;

        /*
         * Checks whether the value of the attribute 'oca' is null.<p>
         * 
         * @return      true if the value of attribute 'oca' is null, false otherwise
         */
        operation getOcaNull() : boolean;

        /*
         * Sets the value of the attribute 'oca' to null.<p>
         * 
         */
        operation setOcaNull(aFlag : boolean) : void;
    }
}
