import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Relation.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/RelationDefinitionInformation.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external SystemException type "com.intershop.beehive.core.capi.common.SystemException";

namespace com.intershop.beehive.core.capi.domain
{
    /*
     * This class is used for managing persistent domain relation definitions.
     * Before an actual domain relation can be created, a corresponding relation
     * definition must exist. The purpose of a relation definition is a) to
     * provide data common to all relations of this kind such as the source and
     * target role name and b) to define the cardinalities constraint that must
     * be obeyed by all concrete relations.
     */
    cartridge interface RelationDefinition
    {
        /*
         * A unique name which can be used to identify this relation definition.
         */
        attribute name : string readonly required;

        /*
         * The cardinalities of domain relations based on this RelationDefinition.
         * @see DomainConstants#RELATION_CARDINALITIES_ONE_TO_ONE
         * @see DomainConstants#RELATION_CARDINALITIES_ONE_TO_MANY
         * @see DomainConstants#RELATION_CARDINALITIES_MANY_TO_ONE
         * @see DomainConstants#RELATION_CARDINALITIES_MANY_TO_MANY
         */
        attribute cardinalities : int required;

        relation relationDefinitionInformation : RelationDefinitionInformation[0..1];

        relation relations : Relation[0..n] readonly;

        /*
         * Checks whether the value of the attribute 'cardinalities' is null.<p>
         * 
         * The cardinalities of domain relations based on this RelationDefinition.
         * @see DomainConstants#RELATION_CARDINALITIES_ONE_TO_ONE
         * @see DomainConstants#RELATION_CARDINALITIES_ONE_TO_MANY
         * @see DomainConstants#RELATION_CARDINALITIES_MANY_TO_ONE
         * @see DomainConstants#RELATION_CARDINALITIES_MANY_TO_MANY
         * @return      true if the value of attribute 'cardinalities' is null,
         * false otherwise
         * @isattribute CardinalitiesNull
         */
        operation getCardinalitiesNull() : boolean throws SystemException;

        /*
         * Sets the value of the attribute 'cardinalities' to null.<p>
         * 
         * The cardinalities of domain relations based on this RelationDefinition.
         * @see DomainConstants#RELATION_CARDINALITIES_ONE_TO_ONE
         * @see DomainConstants#RELATION_CARDINALITIES_ONE_TO_MANY
         * @see DomainConstants#RELATION_CARDINALITIES_MANY_TO_ONE
         * @see DomainConstants#RELATION_CARDINALITIES_MANY_TO_MANY
         * @param       aFlag       meaningless
         */
        operation setCardinalitiesNull(aFlag : boolean) : void throws SystemException;

        /*
         * Returns the value of attribute 'lastModified'.<p>
         * 
         * This field contains the timestamp the objects was written to the
         * database.
         * 
         * @return      the value of the attribute 'lastModified'
         * @isattribute LastModified
         */
        operation getLastModified() : datetime throws SystemException;

        /*
         * Sets the value of the attribute 'lastModified'.<p>
         * 
         * This field contains the timestamp the objects was written to the
         * database.
         * 
         * @param       aValue        the new value of the attribute
         */
        operation setLastModified(aValue : datetime) : void throws SystemException;

        /*
         * Checks whether the value of the attribute 'lastModified' is null.<p>
         * 
         * This field contains the timestamp the objects was written to the
         * database.
         * 
         * @return      true if the value of attribute 'lastModified' is null,
         * false otherwise
         * @isattribute LastModifiedNull
         */
        operation getLastModifiedNull() : boolean throws SystemException;

        /*
         * Sets the value of the attribute 'lastModified' to null.<p>
         * 
         * This field contains the timestamp the objects was written to the
         * database.
         * 
         * @param       aFlag       meaningless
         */
        operation setLastModifiedNull(aFlag : boolean) : void throws SystemException;

        /*
         * Returns the Home interface name of this Bean.
         * 
         * @return  the Home interface name
         * @hide
         */
        operation getFactoryName() : string throws SystemException;
    }
}
