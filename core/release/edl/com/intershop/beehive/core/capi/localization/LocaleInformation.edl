import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external StaticMoneyFormat type "com.intershop.beehive.core.capi.currency.StaticMoneyFormat";
external StaticDateFormat type "com.intershop.beehive.foundation.quantity.StaticDateFormat";
external StaticDecimalFormat type "com.intershop.beehive.foundation.quantity.StaticDecimalFormat";
external StaticQuantityFormat type "com.intershop.beehive.foundation.quantity.StaticQuantityFormat";

namespace com.intershop.beehive.core.capi.localization
{
    /*
     * LocaleInformation objects represent Locales in Beehive. Since Java locales are only used indirectly, LocaleInformation is responsible to represent locales in Beehive.<P>
     * 
     * An LocaleInformation is created by specifying a localeID. The localeID is used to identify the LocaleInformation object in the business logic and look it up in the database (see LocaleMgr). <P>
     * 
     * Internally, a Java locale object is used to fulfill many tasks. LocaleInformation delegates most of the client requests to this Java locale. <br>
     * For this the Java language key and the Java country key must be set.<P>
     * 
     * An LocaleInformation provides default regional settings (see RegionalSettings). RegionalSettings are responsible to know the configuration of formats used for the input and output of numbers or other objects.
     * 
     * @see        com.intershop.beehive.core.capi.common.localization.LocaleMgr
     */
    cartridge interface LocaleInformation
    {
        /*
         * The identifier of the locale. Contains a combination of the language and the country key, concatenated by "_", e.g. "en_US". This attribute is the primary key of the class.
         */
        attribute localeID : string readonly required;

        /*
         * Flag that indicates that this LocaleInformation is used as lead locale.
         */
        attribute leadLocale : boolean readonly required;

        /*
         * The java language key, e.g. "en" for the locale "en_US".
         */
        attribute javaLanguageKey : string readonly required;

        /*
         * The java country key, e.g. "US" for the locale "en_US".
         */
        attribute javaCountryKey : string readonly required;

        /*
         * This attibute contains the default currency identifier for this locale, e.g. "USD" for the locale "en_US".
         */
        attribute currencyCode : string required;

        /*
         * Sets the flag isLeadLocaleFlag.
         * 
         */
        operation setAsLeadLocale(bool : boolean) : void;

        /*
         * Returns the Java LocaleInformation assigned to this LocaleInformation objects.
         * 
         * @return a Java LocaleInformation object
         */
        operation getJavaLocale() : Locale;

        /*
         * Returns the language key (lowercase two-letter ISO-639 code).
         * 
         * @return language key - lowercase two-letter ISO-639 code
         * @see #getJavaLocale
         */
        operation getLanguage() : string;

        /*
         * Returns the country key (uppercase two-letter ISO-3166 code).
         * 
         * @return language key - uppercase two-letter ISO-3166 code
         * @see #getJavaLocale
         */
        operation getCountry() : string;

        /*
         * Returns the ISO3 language key (three-letter ISO language abbreviation).
         * 
         * @return ISO3 language key - three-letter ISO language abbreviation
         * @see #getJavaLocale
         */
        operation getISO3Language() : string;

        /*
         * Returns the ISO3 language key (three-letter ISO country abbreviation).
         * 
         * @return ISO3 language key - three-letter ISO country abbreviation
         * @see #getJavaLocale
         */
        operation getISO3Country() : string;

        /*
         * Call this function to get the XML representation of the locale.
         * The XML representation uses a dash as separator, e.g. "en-US".
         * 
         * @return The XML representation of the locale.
         */
        operation getXMLLocaleID() : string;

        /*
         * Sets the passed attribute value for the passed attribute name.
         * The ExtensibleObjectEJB functionality is used to store attributes.
         */
        operation setRegionalAttribute(attributeName : string, attributeValue : string) : void;

        /*
         * Returns the StaticMoneyFormat of the default style of the RegionalSettings.
         * 
         * @return a StaticMoneyFormat
         * @see com.intershop.beehive.core.capi.common.money.StaticMoneyFormat
         */
        operation getMoneyFormat() : StaticMoneyFormat;

        /*
         * Returns a StaticMoneyFormat of the passed style. <br>
         * Style can be one of the defined constants for CURRENCY.<br>
         * The default pattern for StaticMoneyFormat defined in this class is used.
         * 
         * @return a StaticMoneyFormat of the passed style
         * @see com.intershop.beehive.core.capi.common.money.StaticMoneyFormat
         */
        operation getMoneyFormatForStyle(style : int) : StaticMoneyFormat;

        /*
         * Returns a StaticMoneyFormat which applied for the passed pattern. <br>
         * The pattern must be a valid StaticMoneyFormat pattern.
         * 
         * @return a StaticMoneyFormat on the passed pattern
         * @see com.intershop.beehive.core.capi.common.money.StaticMoneyFormat
         */
        operation getMoneyFormatForPattern(^pattern : string) : StaticMoneyFormat;

        /*
         * Returns the StaticDateFormat of the default style of the RegionalSettings.
         * 
         * @return a StaticDateFormat
         * @see com.intershop.beehive.core.capi.common.money.StaticDateFormat
         */
        operation getDateFormat() : StaticDateFormat;

        /*
         * Returns a StaticDateFormat of the passed style. <br>
         * Style can be one of the defined constants for DATE.<br>
         * The default pattern for StaticDateFormat defined in this class is used.
         * 
         * @return a StaticDateFormat of the passed style
         * @see com.intershop.beehive.core.capi.common.date.StaticDateFormat
         */
        operation getDateFormatForStyle(style : int) : StaticDateFormat;

        /*
         * Returns a StaticDateFormat which applied for the passed pattern. <br>
         * The pattern must be a valid StaticDateFormat pattern.
         * 
         * @return a StaticDateFormat on the passed pattern
         * @see com.intershop.beehive.core.capi.common.date.StaticDateFormat
         */
        operation getDateFormatForPattern(^pattern : string) : StaticDateFormat;

        /*
         * Returns the StaticDecimalFormat of the RegionalSettings.
         * 
         * @return a StaticDecimalFormat
         * @see com.intershop.beehive.core.capi.common.decimal.StaticDecimalFormat
         */
        operation getDecimalFormat() : StaticDecimalFormat;

        /*
         * Returns a StaticDecimalFormat of the passed style. <br>
         * Only one style is possible (DECIMAL). The style is not tested.
         * 
         * @return a StaticDecimalFormat of the passed style
         * @see com.intershop.beehive.common.StaticDecimalFormat
         */
        operation getDecimalFormatForStyle(style : int) : StaticDecimalFormat;

        /*
         * Returns a StaticDecimalFormat which applied for the passed pattern. <br>
         * The pattern must be a valid StaticDecimalFormat pattern.
         * 
         * @return a StaticDecimalFormat on the passed pattern
         * @see com.intershop.beehive.core.capi.common.decimal.StaticDecimalFormat
         */
        operation getDecimalFormatForPattern(^pattern : string) : StaticDecimalFormat;

        /*
         * Returns the StaticDecimalFormat which represents an format for Integer's.
         * 
         * @return a StaticDecimalFormat which represents an Integer format
         * @see com.intershop.beehive.core.capi.common.decimal.StaticDecimalFormat
         */
        operation getIntegerFormat() : StaticDecimalFormat;

        /*
         * Returns a StaticDecimalFormat which represents an format for Integer's.
         * Note that we use StaticDecimalFormat since no special Format class is needed to format Integer's. <P>
         * Only one style is possible (INTEGER). <br>
         * 
         * @return a StaticDecimalFormat of the passed style which represents a Integer formatter
         * @see com.intershop.beehive.common.StaticDecimalFormat
         */
        operation getIntegerFormatForStyle(style : int) : StaticDecimalFormat;

        /*
         * Returns a StaticDecimalFormat which represents a format for Integer's and applies to the passed pattern. <br>
         * The pattern must be a valid StaticDecimalFormat pattern.<br>
         * Note that we use StaticDecimalFormat since no special Format class is needed to format Integer's.
         * 
         * @return a StaticDecimalFormat on the passed pattern
         * @see com.intershop.beehive.core.capi.common.decimal.StaticDecimalFormat
         */
        operation getIntegerFormatForPattern(^pattern : string) : StaticDecimalFormat;

        /*
         * Returns the StaticQuantityFormat of the default style of the RegionalSettings.
         * 
         * @return a StaticQuantityFormat
         * @see com.intershop.beehive.core.capi.common.quantity.StaticQuantityFormat
         */
        operation getQuantityFormat() : StaticQuantityFormat;

        /*
         * Returns a StaticQuantityFormat of the passed style. <br>
         * Style can be one of the defined constants for QUANTITY.<br>
         * The default pattern for StaticQuantityFormat defined in this class is used.
         * 
         * @return a StaticQuantityFormat of the passed style
         * @see  com.intershop.beehive.core.capi.common.quantity.StaticQuantityFormat
         */
        operation getQuantityFormatForStyle(style : int) : StaticQuantityFormat;

        /*
         * Returns a StaticQuantityFormat which applied for the passed pattern. <br>
         * The pattern must be a valid StaticQuantityFormat pattern.
         * 
         * @return a StaticQuantityFormat on the passed pattern
         * @see com.intershop.beehive.core.capi.common.quantity.StaticQuantityFormat
         */
        operation getQuantityFormatForPattern(^pattern : string) : StaticQuantityFormat;

        /*
         * Returns the value of the requested attribute. <P>
         * RegionalSettings stores different format attributes, which can be accessed by getXXXFormat or directly via getRegionalAttribute. <br>
         * It is always a String returned, which means that attribute which are not of type String must be converted. <P>
         * If the RegionalSetting does not have an entry for the requested attribute, a default value is returned.
         * 
         * @return String value of the requested attribute or null if not found.
         */
        operation getRegionalAttribute(attributeName : string) : string;

        /*
         * Returns the LocaleInformation name in an appropriate language.
         * 
         * @return display name for LocaleInformation for the current locale
         * @see #getJavaLocale
         */
        operation getDisplayName(forLocale : LocaleInformation) : string;
    }
}
