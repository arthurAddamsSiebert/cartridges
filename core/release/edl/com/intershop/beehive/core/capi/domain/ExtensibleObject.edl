import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/AttributeValue.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/PersistentObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/localization/LocaleInformation.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Extensible.edl";

external CreateException type "com.intershop.beehive.core.capi.common.CreateException";
external StringIterator type "java.util.Iterator<String>";
external BooleanIterator type "java.util.Iterator<Boolean>";
external IntegerIterator type "java.util.Iterator<Integer>";
external BigDecimalIterator type "java.util.Iterator<BigDecimal>";
external DateIterator type "java.util.Iterator<Date>";
external DoubleIterator type "java.util.Iterator<Double>";
external LongIterator type "java.util.Iterator<Long>";
external AttributeValueIterator type "java.util.Iterator<AttributeValue>";

namespace com.intershop.beehive.core.capi.domain
{
    cartridge interface ExtensibleObject extends PersistentObject, Extensible
    {        
	/*
	* Adds a copy of the given attribute value (extensible object attribute) to this extensible object under the given attribute name. If the <code>name</code> parameter is <code>null</code>, the attribute name specified by the given attribute value is used instead. If the attribute already exists, its values are overridden. Otherwise a new attribute is created.
	* 
	* @throws com.intershop.beehive.core.capi.common.CreateException if creation of a new attribute fails
	*/
	operation putAttributeValue(name : string, value : AttributeValue) : void throws CreateException;
	
	/*
	* Adds a copy of the given attribute value (extensible object attribute) to this extensible object. If the attribute already exists, its values are overridden. Otherwise a new attribute is created.
	* 
	* @throws com.intershop.beehive.core.capi.common.CreateException if creation of a new attribute fails
	*/
	operation putAttributeValue(value : AttributeValue) : void throws CreateException;
	
	/*
	* Call this function to add an Boolean attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. The localization state depends on the definition.
	* A localized definition will force the creation of a localized
	* attribute. A non localized or non existing definition will force
	* the creation of a non localized attribute. If the definition does
	* not exist it will be created on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/     
	operation putBoolean(aName : string, aValue : Boolean) : void;
	
	/*
	* Call this function to add an BigDecimal attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. The localization state depends on the definition.
	* A localized definition will force the creation of a localized
	* attribute. A non localized or non existing definition will force
	* the creation of a non localized attribute. If the definition does
	* not exist it will be created on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/     
	operation putDecimal(aName : string, aValue : decimal) : void;
	
	/*
	* Call this function to add an Date attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. The localization state depends on the definition.
	* A localized definition will force the creation of a localized
	* attribute. A non localized or non existing definition will force
	* the creation of a non localized attribute. If the definition does
	* not exist it will be created on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/     
	operation putDate(aName : string, aValue : Date) : void;
	
	/*
	* Call this function to add a double attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. The localization state depends on the definition.
	* A localized definition will force the creation of a localized
	* attribute. A non localized or non existing definition will force
	* the creation of a non localized attribute. If the definition does
	* not exist it will be created on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	* 
	*/
	operation putDouble(aName : string, aValue : Double) : void;
	
	/*
	* Call this function to add an integer attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. The localization state depends on the definition.
	* A localized definition will force the creation of a localized
	* attribute. A non localized or non existing definition will force
	* the creation of a non localized attribute. If the definition does
	* not exist it will be created on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	* 
	*/
	operation putInteger(aName : string, aValue : Integer) : void;
	
	/*
	* Call this function to add a localized Boolean attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. If the definition does not exist it will be created
	* on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/     
	operation putLocalizedBoolean(aName : string, aValue : Boolean, aLocale : LocaleInformation) : void;
	
	/*
	* Call this function to add a localized BigDecimal attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. If the definition does not exist it will be created
	* on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/     
	operation putLocalizedDecimal(aName : string, aValue : decimal, aLocale : LocaleInformation) : void;
	
	/*
	* Call this function to add a localized Date attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. If the definition does not exist it will be created
	* on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/     
	operation putLocalizedDate(aName : string, aValue : Date, aLocale : LocaleInformation) : void;
	
	/*
	* Call this function to add a localized double attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. If the definition does not exist it will be created
	* on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	* 
	*/
	operation putLocalizedDouble(aName : string, aValue : Double, aLocale : LocaleInformation) : void;
	
	/*
	* Call this function to add a localized integer attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. If the definition does not exist it will be created
	* on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	* 
	*/
	operation putLocalizedInteger(aName : string, aValue : Integer, aLocale : LocaleInformation) : void;
	
	/*
	* Call this function to add a localized Long attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. If the definition does not exist it will be created
	* on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/     
	operation putLocalizedLong(aName : string, aValue : Long, aLocale : LocaleInformation) : void;
	
	/*
	* Call this function to add a localized Money attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. If the definition does not exist it will be created
	* on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/     
	operation putLocalizedMoney(aName : string, aValue : Money, aLocale : LocaleInformation) : void;
	
	/*
	* Call this function to add a localized object attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. If the definition does not exist it will be created
	* on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	* 
	*/
	operation putLocalizedObject(aName : string, aValue : PersistentObject, aLocale : LocaleInformation) : void;
	
	/*
	* Call this function to add a localized Quantity attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. If the definition does not exist it will be created
	* on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/     
	operation putLocalizedQuantity(aName : string, aValue : Quantity, aLocale : LocaleInformation) : void;
	
	/*
	* Call this function to add a localized string attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. If the definition does not exist it will be created
	* on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	* 
	*/
	operation putLocalizedString(aName : string, aValue : string, aLocale : LocaleInformation) : void;
	
	/*
	* Call this function to add a localized text attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. If the definition does not exist it will be created
	* on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	* 
	*/
	operation putLocalizedText(aName : string, aValue : string, aLocale : LocaleInformation) : void;
	
	/*
	* Call this function to add an Long attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. The localization state depends on the definition.
	* A localized definition will force the creation of a localized
	* attribute. A non localized or non existing definition will force
	* the creation of a non localized attribute. If the definition does
	* not exist it will be created on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/     
	operation putLong(aName : string, aValue : Long) : void;
	
	/*
	* Call this function to add an Money attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. The localization state depends on the definition.
	* A localized definition will force the creation of a localized
	* attribute. A non localized or non existing definition will force
	* the creation of a non localized attribute. If the definition does
	* not exist it will be created on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/     
	operation putMoney(aName : string, aValue : Money) : void;
	
	/*
	* Use this function to add a number of Booleans to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER.
	* @throws java.lang.IllegalArgumentException if there is an
	* element in the collection that has a type different to
	* java.lang.Boolean
	*/     
	operation putMultipleBooleans(aName : string, values : BooleanIterator) : void;
	
	/*
	* Use this function to add a number of Dates to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER.
	* @throws java.lang.IllegalArgumentException if there is an
	* element in the collection that has a type different to
	* java.lang.Date
	*/     
	operation putMultipleDates(aName : string, values : DateIterator) : void;
	
	/*
	* Use this function to add a number of BigDecimals to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER.
	* @throws java.lang.IllegalArgumentException if there is an
	* element in the collection that has a type different to
	* java.lang.BigDecimal
	*/     
	operation putMultipleDecimals(aName : string, values : BigDecimalIterator) : void;
	
	/*
	* Use this function to add a number of doubles to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER.
	* 
	* @throws java.lang.IllegalArgumentException if there is an
	* element in the collection that has a type different to
	* java.lang.Double
	*/
	operation putMultipleDoubles(aName : string, values : DoubleIterator) : void;
	
	/*
	* Use this function to add a number of integers to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER.
	* 
	* @throws java.lang.IllegalArgumentException if there is an
	* element in the collection that has a type different to
	* java.lang.Integer
	*/
	operation putMultipleIntegers(aName : string, values : IntegerIterator) : void;
	
	/*
	* Use this function to add a number of Booleans to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER. The function
	* operates with localized values.
	* @throws java.lang.IllegalArgumentException if there is an
	* element in the collection that has a type different to
	* java.lang.Boolean
	*/     
	operation putMultipleLocalizedBooleans(aName : string, values : BooleanIterator, aLocale : LocaleInformation) : void;
	
	/*
	* Use this function to add a number of Dates to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER. The function
	* operates with localized values.
	* @throws java.lang.IllegalArgumentException if there is an
	* element in the collection that has a type different to
	* java.lang.Date
	*/     
	operation putMultipleLocalizedDates(aName : string, values : DateIterator, aLocale : LocaleInformation) : void;
	
	/*
	* Use this function to add a number of BigDecimals to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER. The function
	* operates with localized values.
	* @throws java.lang.IllegalArgumentException if there is an
	* element in the collection that has a type different to
	* java.lang.BigDecimal
	*/     
	operation putMultipleLocalizedDecimals(aName : string, values : BigDecimalIterator, aLocale : LocaleInformation) : void;
	
	/*
	* Use this function to add a number of doubles to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER. The function
	* operates with localized values.
	* 
	* @throws java.lang.IllegalArgumentException if there is an
	* element in the collection that has a type different to
	* java.lang.Double
	*/
	operation putMultipleLocalizedDoubles(aName : string, values : DoubleIterator, aLocale : LocaleInformation) : void;
	
	/*
	* Use this function to add a number of integers to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER. The function
	* operates with localized values.
	* 
	* @throws java.lang.IllegalArgumentException if there is an
	* element in the collection that has a type different to
	* java.lang.Integer
	*/
	operation putMultipleLocalizedIntegers(aName : string, values : IntegerIterator, aLocale : LocaleInformation) : void;
	
	/*
	* Use this function to add a number of Longs to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER. The function
	* operates with localized values.
	* @throws java.lang.IllegalArgumentException if there is an
	* element in the collection that has a type different to
	* java.lang.Long
	*/     
	operation putMultipleLocalizedLongs(aName : string, values : LongIterator, aLocale : LocaleInformation) : void;
	
	/*
	* Use this function to add a number of strings to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER. The function
	* operates with localized values.
	* 
	* @throws java.lang.IllegalArgumentException If one of the
	* Strings contains the delimiter or if there is an
	* element in the collection that has a type different to
	* java.lang.String
	*/
	operation putMultipleLocalizedStrings(aName : string, values : StringIterator, aLocale : LocaleInformation) : void;
	
	/*
	* Use this function to add a number of Longs to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER.
	* @throws java.lang.IllegalArgumentException if there is an
	* element in the collection that has a type different to
	* java.lang.Long
	*/     
	operation putMultipleLongs(aName : string, values : LongIterator) : void;
	
	/*
	* Use this function to add a number of strings to one attribute field.
	* The values are packed into one string separated by the
	* AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER.
	* 
	* @throws java.lang.IllegalArgumentException If one of the
	* Strings contains the delimiter or if there is an
	* element in the collection that has a type different to
	* java.lang.String
	*/
	operation putMultipleStrings(aName : string, values : StringIterator) : void;
	
	/*
	* Call this function to add an object attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. The localization state depends on the definition.
	* A localized definition will force the creation of a localized
	* attribute. A non localized or non existing definition will force
	* the creation of a non localized attribute. If the definition does
	* not exist it will be created on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/
	operation putObject(aName : string, aValue : PersistentObject) : void;
	
	/*
	* Call this function to add an Quantity attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. The localization state depends on the definition.
	* A localized definition will force the creation of a localized
	* attribute. A non localized or non existing definition will force
	* the creation of a non localized attribute. If the definition does
	* not exist it will be created on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/     
	operation putQuantity(aName : string, aValue : Quantity) : void;
	
	/*
	* Call this function to add a string attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. The localization state depends on the definition.
	* A localized definition will force the creation of a localized
	* attribute. A non localized or non existing definition will force
	* the creation of a non localized attribute. If the definition does
	* not exist it will be created on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/
	operation putString(aName : string, aValue : string) : void;
	
	/*
	* Call this function to add a text attribute to the object.
	* If the value already exists it will be updated. Non existing values
	* will be created. The localization state depends on the definition.
	* A localized definition will force the creation of a localized
	* attribute. A non localized or non existing definition will force
	* the creation of a non localized attribute. If the definition does
	* not exist it will be created on the fly.<p>
	* If the value argument is null, the attribute will be removed.
	*/
	operation putText(aName : string, aValue : string) : void;
	
	/*
	* Call this function to remove all attributes with the given name.
	* The definition of the attribute is removed too.
	*/
	operation removeAttribute(aName : string) : void;
	
	/*
	* Call this function to remove an attribute of the given name
	* localized with the given locale. The definition of the attribute
	* will <b>not</b> be deleted.
	*/
	operation removeLocalizedAttribute(aName : string, aLocale : LocaleInformation) : void;
              
    relation attributeValues : AttributeValue[0..n] readonly;        
    }
}
