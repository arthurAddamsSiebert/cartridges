import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/PersistentObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.capi.domain
{
    /*
     * This class represents an attribute value that belongs to an ExtensibleObjectEJB. Each instance of an attribute value represents an attribute of a specific type with a specific content belonging to a specific instance of an ExtensibleObjectEJB. An AttributeValue can be localized or non-localized. The type includes string, double, integer and multiple value types (these are stored always as strings). According to the type the the appropriate content value contains the AttributeValue's data: stringValue, intValue and doubleValue.
     * 
     * @see com.intershop.beehive.core.capi.common.ExtensibleObjectEJB
     * @see com.intershop.beehive.core.capi.common.AttributeDefinition
     * @hide
     */
    cartridge interface AttributeValue
    {
		/*
		 * Compares this attribute value with another one.
		 *
		 * @param       aValue  the other object
		 * @return      true, if both objects have the same attribute type and value.
		 */
    	operation equals(aValue:AttributeValue) : boolean;
    	
        /*
         * Use this function to recover the content of the attribute value
         * based one the referenced type. 
         *
         * @return  A String, Integer, Double, Long or EnumIterator dependent on the type.
         */
    	operation getObject() : Object;
    	
       /*
        * Call this function to get the language key of the locale ID,
        * e.g. "en" for the locale "en_US".
        *
        * @return  The language key of the locale ID or an empty string
        *          if the locale ID has an improper format.
        */
    	operation getLanguageKey() : String;
    	
    	/*
         * Call this function to get the XML representation of the locale ID.
         * The XML representation uses a dash as separator, e.g. "en-US".
         *
         * @return  The XML representation of the locale ID.
         */
    	operation getXMLLocaleID() : String;
    	
    	/*
         * Call this function to get the country key of the locale ID,
         * e.g. "US" for the locale "en_US".
         *
         * @return  The country key of the locale ID or an empty string
         *          if the locale ID has an improper format.
    	 */
    	operation getCountryKey() : String;
    	
	    /*
	     * Returns the long value.
	     * @return the long value of the attribute
	     */
    	operation getLongValue() : long;
    	
	    /*
	     * Sets the long value.
	     * @param aValue
	     *            the new long value of the attribute
	     */
    	operation setLongValue(aValue: long) : void;
    	
	    /*
	     * Checks whether the long value of the attribute is null.
	     * @return true if the long value of attribute is null, false
	     *         otherwise
	     */
    	operation getLongValueNull() : boolean;
    	
	    /*
	     * Sets the long value of the attribute to null.
	     * @param aFlag
	     *            meaningless
	     */
    	operation setLongValueNull(aFlag: boolean) : void;
    	
	    /*
	     * Returns the boolean value.
	     * @return the boolean value of the attribute
	     */
    	operation getBooleanValue() : boolean;
    	
	    /*
	     * Sets the boolean value.
	     * @param aValue
	     *            the new boolean value of the attribute
	     */
    	operation setBooleanValue(aValue: boolean) : void;
    	
	    /*
	     * Checks whether the boolean value of the attribute is null.
	     *
	     * @return true if the boolean value of attribute is null, false
	     *         otherwise
	     */
    	operation getBooleanValueNull() : boolean;
    	
	    /*
	     * Sets the boolean value of the attribute to null.
	     * @param aFlag
	     *            meaningless
	     */
    	operation setBooleanValueNull(aFlag: boolean) : void;
    	
	    /*
	     * Returns the money value.
	     * @return the money value of the attribute
	     */
    	operation getMoneyValue() : Money;
    	
	    /*
	     * Sets the money value.
	     * @param aValue
	     *            the new money value of the attribute
	     */
    	operation setMoneyValue(aValue: Money) : void;
    	
	    /*
	     * Checks whether the money value of the attribute is null.
	     * @return true if the money value of attribute is null, false
	     *         otherwise
	     */
    	operation getMoneyValueNull() : boolean;
    	
	    /*
	     * Sets the money value of the attribute to null.
	     * @param aFlag
	     *            meaningless
	     */
    	operation setMoneyValueNull(aFlag: boolean) : void;
    	
	    /*
	     * Returns the quantity value.
	     * @return the quantity value of the attribute
	     */
    	operation getQuantityValue() : Quantity;
    	
	    /*
	     * Sets the quantity value.
	     * @param aValue
	     *            the new quantity value of the attribute
	     */
    	operation setQuantityValue(aValue: Quantity) : void;
    	
	    /*
	     * Checks whether the quantity value of the attribute is null.
	     * @return true if the quantity value of attribute is null, false
	     *         otherwise
	     */
    	operation getQuantityValueNull() : boolean;
    	
	    /*
	     * Sets the quantity value of the attribute to null.
	     * @param aFlag
	     *            meaningless
	     */
    	operation setQuantityValueNull(aFlag: boolean) : void;
    	
        /*
         * This attribute specifies the name of the AttributeValue. It is part of the primary key.
         */
        attribute name : String required readonly;

        /*
         * This attribute specifies the locale of the AttributeValue. It is part of the primary key.
         */
        attribute localeID : String required readonly;

        /*
         * This flag specifies whether the AttributeValue is localized or not.
         */
        attribute ^localized : boolean;

        /*
         * The type of the AttributeValue defines if the content is an Integer, a Double, a String or multiple values of these types.
         */
        attribute ^type : int required ;

        /*
         * This field contains the integer value for AttributeValues of type Integer.
         */
        attribute intValue : int;

        /*
         * This field contains the double value for AttributeValues of type Double.
         */
        attribute doubleValue : double;

        /*
         * This field contains the String value for AttributeValues of type String or multiple values in their String representation separated by a separator.
         */
        attribute stringValue : String;

        /*
         * This field contains the Object value for AttributeValues of type Object
         */
        attribute objectValue : String;

        /*
         * This field contains the type (home name) of the objectValue
         */
        attribute objectType : String;
        
        /*
         * This field contains the decimal value for AttributeValues of type BigDecimal.
         */
        attribute decimalValue : decimal;
        
        /*
         * This field contains the date value for AttributeValues of type Date.
         */
        attribute dateValue : datetime;
        
        /*
         * This field contains the text value for AttributeValues of type CLOB.
         */
        attribute textValue : ^text;

        /*
         * This field contains the ID of the extensible object that owns this attribute value.
         */
        attribute ownerID : String required readonly;
        
        /*
         * This relation points to a related persistent object built from the object type and object value.
         */
        relation persistentObjectValue : PersistentObject[0..1];
        
    }
}
