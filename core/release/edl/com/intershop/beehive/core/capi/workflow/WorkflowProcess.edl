import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/workflow/WorkflowThread.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

primitive time;

namespace com.intershop.beehive.core.capi.workflow
{
    /*
     * The class represents a workflow process. A workflow process acts as anchor for 1..N workflow threads that run in context of a business process.
     * <p>The process also holds the workflow data.
     */
    cartridge interface WorkflowProcess extends ExtensibleObject
    {
        /*
         * The state of the process. Can be <code>WFP_STATE_NOT_STARTED</code>, <code>WFP_STATE_RUNNING</code> or
         * <code>WFP_STATE_COMPLETED</code>.
         * 
         * @see com.intershop.beehive.core.capi.workflow.WorkflowConstants
         */
        attribute state : int readonly required;

        /*
         * This field contains a name describing the workflow process, e.g. 'ContentApproval'
         */
        attribute name : string readonly required;

        /*
         * The name of the global notification template for this process. If an activity of this process has no notification template specified, a fallback to this template will be done.
         */
        attribute notificationTemplate : string required;

        /*
         * Contains the date when the process was completed. May be <code>null</code> in case the process isn't completed yet.
         */
        attribute completionDate : time readonly required;

        /*
         * The workflow dictionary that is associated with this process.
         * Attention: All operation on this attribute are quite expensive since the whole dictionary is deserialized from the internal blob-representation.
         * Try to cache the dictionary when multiple accesses are required.
         */
        attribute workflowDictionary : Hashtable required;

        relation threads : WorkflowThread[0..n] readonly;
    }
}
