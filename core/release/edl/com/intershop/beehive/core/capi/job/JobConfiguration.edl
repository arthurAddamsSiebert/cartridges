import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Application.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/job/JobCondition.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/locking/Process.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.capi.job
{
    /*
     * This class represents the configuration of a job. A job is a system process that is running in the background without user interaction. The job execution is triggered by events that must fulfill a certain job condition. The configuration object holds all information that are necessary to
     * execute a job.<p>
     * 
     * Note: The execution time is measured with seconds precision, because the database does not keep milliseconds for "datetime" attributes.
     * 
     * @see         com.intershop.beehive.core.capi.job.JobMgr
     * @see         com.intershop.beehive.core.capi.job.JobCondition
     * @see         com.intershop.beehive.core.capi.job.JobMonitor
     */
    cartridge interface JobConfiguration extends ExtensibleObject
    {
        /*
         * This attribute contains the name of the job.
         */
        attribute name : string required;

        /*
         * This attribute contains a more detailed description of what the job is doing.
         */
        attribute description : string required;

        /*
         * This attribute contains the name of the pipeline that has to be executed.
         */
        attribute pipelineName : string required;

        /*
         * This attribute contains the name of the start node of the pipeline that has to be executed.
         */
        attribute startNodeName : string required;

        /*
         * The name of the server that executes the job.
         */
        attribute serverName : string required;

        /*
         * Attribute holds the user login used to run the job process.
         */
        attribute login : string required;

        /*
         * This flag indicates whether the job is enabled to be executed or not.
         */
        attribute enabled : boolean required;

        /*
         * This attribute contains the timestamp of the last time the job was executed.
         */
        attribute lastExecutionTime : datetime readonly;

        /*
         * This attribute contains the duration of the last job execution.
         */
        attribute lastExecutionDuration : int readonly;

        /*
         * This attribute contains the current execution state of the job.
         */
        attribute status : int readonly required;

        /*
         * The host name of the server that executes the job.
         */
        attribute hostName : string required;

        /*
         * The installation ID of the installation that executes the job.
         */
        attribute installationID : string required;

        /*
         * The data center IS_DATA_CENTER (multi data center configuration only) that executes the job.
         */
        attribute dataCenter : string;

        /*
         * The server group that executes the job.
         */
        attribute serverGroup : string;

        attribute currentProcessID : string;

        relation currentProcess : Process[0..1];

        relation jobCondition : JobCondition[0..1];

        relation application : Application[0..1];
		
        /*
         * Checks whether the value of the attribute is null.<p>
         * The attribute holds the user password used to run the job
         * process.
         * 
         * @return true if the value is null,
         * false otherwise
         * @throws EJBException    if something went wrong
         * @iscomment JGen generated method. Do not edit!
         */
        operation getPasswordNull() : boolean;

        /*
         * Returns the password associated with the job configuration.
         * 
         * @return the password associated with the configuration
         * @throws EJBException    if something went wrong
         * @iscomment JGen generated method. Do not edit!
         */
        operation getPassword() : string;

        /*
         * Sets the value of the attribute to null.<p>
         * Attribute holds the user password used to run the job
         * process.
         * 
         * @throws EJBException    if something went wrong
         * @iscomment JGen generated method. Do not edit!
         */
        operation setPasswordNull(aFlag : boolean) : void;

        /*
         * Sets the password associated with the job configuration.
         * 
         * @throws EJBException    if something went wrong
         * @iscomment JGen generated method. Do not edit!
         */
        operation setPassword(aValue : string) : void;

        /*
         * Sets all resources needed to execute the job.
         * @see com.intershop.beehive.core.capi.locking.Resource
         */
        operation setRequiredResources(resources : List) : void;

        /*
         * @return All resources needed to execute the job.
         * @see com.intershop.beehive.core.capi.locking.Resource
         */
        operation getRequiredResources() : List;

        /*
         * Returns the status of the job:
         * <ul>
         * <li>JobConstants.WAITING - the job is waiting for its start time </li>
         * <li>JobConstants.RUNNING - the job is running right now</li>
         * <li>JobConstants.PENDING - the job is pending in the job execution buffer (the maximum number of parallel jobs has been reached, see property "intershop.job.maxJobNumber")</li>
         * <li>JobConstants.DISABLED - the job will not automatically run in the future, it is either explicitly disabled or the last possible execution time has past</li>
         * </ul>
         * 
         * @return the status of the job
         * 
         * @see com.intershop.beehive.core.capi.job.JobConstants
         */
        operation getExtendedStatus() : int;
    }
}
