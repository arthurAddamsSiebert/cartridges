import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.capi.currency
{
    /*
     * nstances of this class represent and describe Currencies. <br>
     * The class serves as container for all relevant properties of currencies used in the system. The supported properties are based on the OMG proposal for currency handling in distributed environments.
     */
    cartridge interface Currency
    {
        /*
         * The smallest unit of handling this Currency in the system.
         * Note: This must not be the common smallest unit. For subscriptions a
         * smallest unit of 0.005 must also be applicable.
         */
        attribute smallestUnit : double readonly required;

        /*
         * The ISO 4217 numeric code of the currency (e.g. DEM = 280)
         */
        attribute currencyCode : int readonly required;

        /*
         * The ratio of changing fraction to Currency.
         * 
         * Examples:
         * <ul>
         * <li>Pfennig  -> Deutsche Mark:        100</li>
         * <li>Millenas -> Egyptian Pound:       1000</li>
         * </ul>
         */
        attribute ratioOfFractionToWhole : int readonly required;

        /*
         * Describes the precision that must be handled for this Currency.
         * 
         * Examples:
         * <ul>
         * <li>Yen:            4
         * <li>Deutsche Mark:  2</li>
         * </ul>
         */
        attribute precision : int readonly required;

        /*
         * The ISO 4217 mnemonic code of the currency (e.g. DEM). This attribute is the primary key of the class.
         */
        attribute mnemonic : string readonly required;

        /*
         * The symbol of the currency's main unit (e.g. DEM -> DM)
         */
        attribute currencySymbol : string readonly required;

		/*
         * The symbol of the currency's for international money exchange (e.g. CAD -> C$)
         */
		attribute distinguishedCurrencySymbol : string readonly required;

        /*
         * The symbol of the currency's fraction (e.g. DEM -> Pf).
         */
        attribute fractionSymbol : string readonly required;

        /*
         * The mnemonic of reference currency which is used to convert the currency into another currency (e.g. DEM -> reference currency = EUR (Euro) means that all conversions
         * from DEM to currency X are done by converting into Euro first)
         */
        attribute referenceCurrency : string readonly required;

        /*
         * This attribute contains a more detailed name of the currency, e.g. "DEM" -> "Deutsche Mark".
         */
        attribute currencyName : string readonly required;

        /*
         * This attribute contains a more detailed name of the currency fraction, e.g. "DEM" -> "Pfennige".
         */
        attribute fractionName : string readonly required;

        /*
         * Checks whether a reference currency is registered for this currency.
         * A reference currency is
         * used as intermediate currency for currency conversions. This is an
         * important feature for EURO compliance. Here, all European currencies will
         * have the EURO as reference currency to adhere to the triangulation
         * conversion method.
         * 
         * @return True if a reference currency is registered, false otherwise.
         */
        operation hasReferenceCurrency() : boolean;
    }
}
