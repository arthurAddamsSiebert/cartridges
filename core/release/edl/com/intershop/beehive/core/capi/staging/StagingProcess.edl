import "enfinity:/core/edl/com/intershop/beehive/core/capi/locking/Process.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/staging/TargetCluster.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/staging/StagingProcessComponent.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/staging/process/StagingContentProvider.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external CreateException type "com.intershop.beehive.core.capi.common.CreateException";
external StagingProcessConstants type "com.intershop.beehive.core.capi.staging.StagingProcessConstants";
external StagingState type "com.intershop.beehive.core.capi.staging.StagingState";

namespace com.intershop.beehive.core.capi.staging
{
    /*
     * This bean is used to store information about staging processes.
     */
    cartridge interface StagingProcess extends StagingContentProvider, StagingProcessConstants
    {
        /*
         * The staging process identifier.
         */
        attribute UUID : string readonly required;

        /*
         * The date the process was started.
         */
        attribute startDate : datetime required;

        /*
         * The date the process finished.
         */
        attribute endDate : datetime required;

        /*
         * Contains the mode of current staging process (INITIAL, REPLICATION, PUBLICATION, ...)
         */
        attribute stagingMode : string required;

        /*
         * Contains the type of staging system.
         */
        attribute stagingSystemType : string readonly required;

        /*
         * The name of target system (live system).
         */
        relation targetCluster : TargetCluster[0..1] readonly;

        /*
         * The current state of staging process.
         */
        attribute state : string required;

        /*
         * Returns the staging state of staging process.
         */
        attribute stagingState : StagingState required;

        relation components : StagingProcessComponent[0..n] readonly;

        relation process : Process[0..1] readonly;

        /*
         * Returns all staging groups, that are involved in this staging process.
         */
        operation createStagingGroupsIterator() : Iterator;

        /*
         * Returns an iterator of domains, that are involved in this staging process.
         */
        operation createStagingDomainsIterator() : Iterator throws CreateException;

        /*
         * Returns an iterator of resources affected by this staging process.
         */
        operation getRequiredResourcesIterator() : Iterator;

        /*
         * Adds a new component to process referencing staging group with given group identifier and domain with given domain identifier.
         */
        operation addToComponents(domainID : string, groupID : string) : void throws CreateException;
    }
}
