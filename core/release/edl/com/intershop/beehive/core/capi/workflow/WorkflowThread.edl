import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/workflow/WorkflowActivity.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/workflow/WorkflowProcess.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.capi.workflow
{
    /*
     * A workflow thread represents an execution path of an workflow process. A workflow process can execute multiple paths in parallel using multiple workflow threads.<p>
     * 
     * A thread can have multiple child threads that are executed in parallel with the parent thread. The synchronizing of these child threads to the parent thread is done using the number of children and the 'join' state of the thread. Whenever a thread is joining execution with another thread, it is suspended and the activity for this thread is hidden, regardless of whether it is active or not.
     * 
     * When the thread is in state <code>WFT_STATE_ACTIVE</code> it is associated with an activity. The activity needs to be fulfilled in order to continue the execution of the thread.
     */
    cartridge interface WorkflowThread extends ExtensibleObject
    {
        /*
         * The state of the thread. Can be <code>WFT_STATE_NO_ACTIVITY</code>, <code>WFT_STATE_WAITING_FOR_ACTIVATION</code> or
         * <code>WFT_STATE_ACTIVE</code>.
         * 
         * @see com.intershop.beehive.core.capi.workflow.WorkflowConstants
         */
        attribute state : int required;

        /*
         * The join state of the thread. It is used to synchronize the execution of parallel workflow threads. Can be <code>WFT_JOIN_NONE</code>, <code>WFT_JOIN_PARENT</code>,
         * <code>WFT_JOIN_CHILDREN</code> or <code>WFT_JOIN_PARENT_AND_CHILDREN</code>.
         * 
         * @see com.intershop.beehive.core.capi.workflow.WorkflowConstants
         */
        attribute joinState : int required;

        relation currentActivity : WorkflowActivity[0..1];

        relation process : WorkflowProcess[0..1] readonly;

        /*
         * Returns the value of attribute 'UUID'.<p>
         * This attribute contains the unique identifier. It is the primary key.
         * 
         * @return      the value of the attribute 'UUID'
         */
        operation getUUID() : string;
    }
}
