import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/locking/Process.edl";

import "enfinity:/core/edl/com/intershop/beehive/core/capi/process/ProcessChainProcess.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/process/ProcessChain.edl";

namespace com.intershop.beehive.core.capi.process
{
    /*
     * Each ProcessChainTask describes an action item of a process chain.
     * A ProcessChainTask can be chain or another specialized task.
     * <br>Name - identifies the task in a chain
     * <br>Description - allows the an explanation of what that task is doing.
     * <br>
     * <br>Related classes:
     * <br>ProcessChain - the chain is an specialized task, which executes sub tasks
     * <br>ProcessChainProcess - a task has an instance for the current run
     */
	cartridge interface ProcessChainTask
	{
		attribute name: string required;
		attribute description: string localized;
		attribute defaultChainElementTimeout: long required;
		attribute defaultChainElementTimeoutUnit:TimeUnit required;
		       
		relation targetDomain:Domain[0..1];

	    operation addIgnoredStatus(status:String ):void;
	    operation removeIgnoredStatus(status:String):void;
	    operation clearIgnoredStatus():void;

        /**
         * runs the task, do not use this function to run the chain from outside.<p>
         * 
         * @return      status of task (the status is not masked by statusMask)
         * @param process created for this task, may be used as parent for sub tasks
         */
        operation run(process:ProcessChainProcess) : Integer;

        /**
         * apply the status mask to the returned status<p>
         * 
         * @param	status of task (the status is not masked by statusMask)
         * @return      status of task (the status is masked by statusMask)
         */
        operation applyStatusMask(status:Integer) : Integer;

        /**
         * creates a process item for this task<p>
         * 
         * @return      action
         */
        operation createProcess(parent:Process) : ProcessChainProcess;
        
        /**
         * @return a readable process name for the task<p>
         *
         */
        operation getProcessName():String;
        
        /**
         * @return the type for process
         */
        operation getProcessType():String;
	}
}