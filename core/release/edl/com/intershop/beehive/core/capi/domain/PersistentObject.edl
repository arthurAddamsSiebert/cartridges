import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.capi.domain
{
    cartridge interface PersistentObject
    {
        /*
         * This attribute contains the unique identifier. It is the primary key.
         */
        attribute UUID : string readonly required;

        /*
         * For instances of PersistentObject this attribute references the domain the object belongs to.
         */
        attribute domainID : string required;

        /*
         * Returns the Home interface name of this Bean.
         * 
         * @return  the Home interface name
         * @hide
         */
        operation getFactoryName() : string;

        /*
         * Test if a given PersistentObject is identical to the invoked
         * PersistentObject.<p>
         * 
         * @param       object - An PersistentObject to test for identity with
         * the invoked PersistentObject instance.
         * @return      True if the given PersistentObject is identical to the
         * invoked object, false otherwise.
         */
        operation isIdenticalWith(object : PersistentObject) : boolean;

        /*
         * Returns the value of attribute 'lastModified'.<p>
         * 
         * This field contains the timestamp the objects was written to the
         * database.
         * 
         * @return      the value of the attribute 'lastModified'
         */
        operation getLastModified() : datetime;

        /*
         * Sets the value of the attribute 'lastModified'.<p>
         * 
         * This field contains the timestamp the objects was written to the
         * database.
         * 
         * @param       aValue        the new value of the attribute
         */
        operation setLastModified(aDate : datetime) : void;

        /*
         * Returns the Domain associated with this
         * PersistentObject.
         * The associated Domain is accessed through
         * a weak relation.<p>
         * 
         * This relation references the domain of the object.
         * 
         * @return      the associated object, or null if no instance is associated
         */
        operation getDomain() : Domain;

        /*
         * Sets the Domain to be associated with this object.
         * The association with Domain is established
         * through a weak relation.<p>
         * 
         * This relation references the domain of the object.
         * 
         * @param       domain    the Domain to be associated with this object
         */
        operation setDomain(domain : Domain) : void;
    }
}
