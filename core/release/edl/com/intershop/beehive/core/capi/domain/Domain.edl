import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Application.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/DomainInformation.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Relation.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external AuthorizationObject type "com.intershop.beehive.core.capi.security.AuthorizationObject";
external Configuration type "com.intershop.beehive.configuration.capi.common.Configuration";

namespace com.intershop.beehive.core.capi.domain
{
    /*
     * Domain represents a realm in the business logic in that business objects
     * can live.
     * <P>
     * Every business objects has assigned a domain. The domain of a business
     * object is set at creation time of the object.
     * <P>
     * A domain knows its owner, which is a business object itself of type
     * IDomainOwner.
     * <P>
     * BusinessObjects can use the Domain object to lookup something from the
     * registry.
     */
    cartridge interface Domain extends ExtensibleObject, AuthorizationObject
    {
        /*
         * The type code of this domain.  Depending on its value, this domain represents the system domain, a site or a mere unit.  It is composed by the composition of three bits that can be found in DomainConstants.
         * 
         * @see DomainConstants#SYSTEM_DOMAIN_BIT
         * @see DomainConstants#SITE_BIT
         * @see DomainConstants#UNIT_BIT
         */
        attribute typeCode : int required;

        /*
         * Status of the domain.  Can be either <code>STATUS_LIVE</code>, <code>STATUS_MAINTENANCE</code>, <code>STATUS_DISABLED</code> or <code>STATUS_TOBEDELETED</code>.
         * 
         * @see DomainConstants#STATUS_LIVE
         * @see DomainConstants#STATUS_MAINTENANCE
         * @see DomainConstants#STATUS_DISABLED
         * @see DomainConstants#STATUS_TOBEDELETED
         */
        attribute status : int required;

        /*
         * The ID of this domain's parent site.  Is <code>null</code> for the root site and for domains that are mere units.
         */
        attribute parentSiteID : string required readonly ;

        attribute siteID : string required readonly ;

        /*
         * This attribute represents a set of flags, which indicates whether or not there are domain specific settings in the registry for this instance. By default, there are no special entries.
         * The mask is checked and updated everytime a domain-specific entry is added, looked up or removed from the registry.
         */
        attribute entryMask : int required;

        /*
         * <p>Specifies if the webadapter is allowed to cache pages.
         * 
         * <p>Attribute relevant is the context of a site only.
         */
        attribute pageCachingAllowed : boolean required;

        /*
         * <p>Maximum time span static content is cached by the webadapter until it is requested again from the application server.
         * 
         * <p>Attribute relevant is the context of a site only.
         */
        attribute staticContentMaxAge : int required;

        /*
         * <p>Page cache version to be used by the webadapter.  The ID must be unique.
         * 
         * <p>Attribute relevant is the context of a site only.
         */
        attribute pageCacheID : string required;

        /*
         * <p>Static content cache version to be used by the webadapter.  The ID must be unique.
         * 
         * <p>Attribute relevant is the context of a site only.
         */
        attribute staticContentCacheID : string required;

        /*
         * The localized display name of this domain.
         */
        attribute displayName : string required localized;

        /*
         * The localized description of this domain.
         */
        attribute description : string required localized;

        /*
         * The dynamic PGID Pipeline for the PGID provider.
         */
        attribute PGIDPipeline : string required mapped;

        /*
         * This saves the profile id of a site/unit.<p>
         * 
         * This id is used to attach address data or other profile data to a site/unit.
         * 
         * @see IProfileMgr
         */
        attribute profileID : string required;

        /*
         * Defines the application server group this site is bound to.
         */
        attribute serverGroup : string required;

        /*
         * Defines the business model in which this domain is running.
         */
        attribute businessModel : string required;
        
        /*
         * Defines the default application of the site.
         */
        relation defaultApplication : Application [0..1];

        relation site : Domain[0..1];

        relation units : Domain[0..n];

        relation domain2Relations : Relation[0..n] readonly;

        relation domain1Relations : Relation[0..n] readonly;

        relation parentSite : Domain[0..1];

        relation subSites : Domain[0..n];

        relation domainInformation : DomainInformation[0..1];

        relation applications : Application[0..n] readonly;

        /**
         * Returns the application of site with given URL identifier.
         * 
         * @param urlIdentifer The URL identifier of the application
         */
        operation getApplication(urlIdentifier : string) : Application;

        /**
         * Get the application with given id.
         */
        operation getApplicationByID(id : string) : Application;

        /*
         * Returns the name assigned to this domain.
         * <BR>Note internally the domain name is the primary key of the
         * DomainInformation instance related to this Domain instance.
         * <BR>In the exceptional case that the Domain instance has no
         * DomainInformation instance <code>null</code> will be returned.
         * 
         * @return the name assigned to this domain
         * @is-txAttribute Supports
         */
        operation getDomainName() : string;

        /*
         * Evaluates whether this domain is the system domain.
         * 
         * @return true if this domain is the system domain.
         * @is-txAttribute Supports
         */
        operation isSystemDomain() : boolean;

        /*
         * Evaluates whether this domain is a site.
         * 
         * @return true if this domain is a site.
         * @is-txAttribute Supports
         */
        operation isSite() : boolean;

        /*
         * Evaluates whether this domain is a unit (i.e. it is a site or a mere
         * unit).
         * 
         * @return true if this domain is a unit.
         * @is-txAttribute Supports
         */
        operation isUnit() : boolean;

        /*
         * Evaluates whether this domain is a mere unit.
         * 
         * @return true if this domain is a mere unit.
         * @is-txAttribute Supports
         * @rework Bug-3: remove that method;
         * use !isSite() instead of;
         * change the single occurance of isMereUnit() inside DomainMgrImpl.java
         */
        operation isMereUnit() : boolean;

        /*
         * Checks whether the value of the attribute 'status' is null.
         */
        operation getStatusNull() : boolean;

        /*
         * Sets the value of the attribute 'status' to null.
         */
        operation setStatusNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'siteID' is null.
         */
        operation getSiteIDNull() : boolean;

        /*
         * Checks whether the value of the attribute 'entryMask' is null.
         */
        operation getEntryMaskNull() : boolean;

        /*
         * Sets the value of the attribute 'entryMask' to null.
         */
        operation setEntryMaskNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'businessModel' is null.
         */
        operation getBusinessModelNull() : boolean;

        /*
         * Sets the value of the attribute 'businessModel' to null.
         */
        operation setBusinessModelNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'pageCacheID' is null.
         */
        operation getPageCacheIDNull() : boolean;

        /*
         * Sets the value of the attribute 'pageCacheID' to null.
         */
        operation setPageCacheIDNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'parentSiteID' is null.
         */
        operation getParentSiteIDNull() : boolean;

        /*
         * Checks whether the value of the attribute 'profileID' is null.
         */
        operation getProfileIDNull() : boolean;

        /*
         * Sets the value of the attribute 'profileID' to null.
         */
        operation setProfileIDNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'serverGroup' is null.
         */
        operation getServerGroupNull() : boolean;

        /*
         * Sets the value of the attribute 'serverGroup' to null.
         */
        operation setServerGroupNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'staticContentCacheID' is null.
         */
        operation getStaticContentCacheIDNull() : boolean;

        /*
         * Sets the value of the attribute 'staticContentCacheID' to null.
         */
        operation setStaticContentCacheIDNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'staticContentMaxAge' is null.
         */
        operation getStaticContentMaxAgeNull() : boolean;

        /*
         * Sets the value of the attribute 'staticContentMaxAge' to null.
         */
        operation setStaticContentMaxAgeNull(aFlag : boolean) : void;
        
        /**
         * Get the configuration for this domain.
         */
        operation getConfiguration() : Configuration;
    }
}
