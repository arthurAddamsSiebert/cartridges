import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/AttributeValue.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/PersistentObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/localization/LocaleInformation.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external FinderException type "com.intershop.beehive.core.capi.common.FinderException";
external StringIterator type "java.util.Iterator<String>";
external BooleanIterator type "java.util.Iterator<Boolean>";
external IntegerIterator type "java.util.Iterator<Integer>";
external BigDecimalIterator type "java.util.Iterator<BigDecimal>";
external DateIterator type "java.util.Iterator<Date>";
external DoubleIterator type "java.util.Iterator<Double>";
external LongIterator type "java.util.Iterator<Long>";
external AttributeValueIterator type "java.util.Iterator<AttributeValue>";

namespace com.intershop.beehive.core.capi.domain
{
    cartridge interface Extensible
    {        
        /*        
         * Call this function if you want to check for the existence of an attribute.
         * 
         * @return <code>true</true> if the attribute was found, otherwise <code>false</code>.
         */
        operation containsAttribute(aName : string) : boolean;

        /*
         * Call this function to get an iterator of all attribute definition
         * names existing for this object.
         * 
         * @return an iterator of all definition names
         */
        operation createAttributeNamesIterator() : StringIterator;

        /*
         * Call this function to get an iterator of all attribute values existing for this object with the specified name. Both localized and non-localized attribute values will be returned. If none are found, an empty iterator is returned.
         * 
         * @return an iterator of all attribute values with given name.
         */
        operation createAttributeValuesIterator(aName : string) : AttributeValueIterator;

        /*
         * Call this function to get an attribute value. The return
         * value depends on the type of the attribute. It is of type
         * Integer, Double or String. If the
         * attribute cannot be found, <code>null</code> is
         * returned.
         * 
         * @return The value object or <code>null</code> if not found.
         */
        operation getAttribute(aName : string) : Object;

        /*
         * Use this function to get the type of the attribute specified
         * by the name passed as parameter.
         * 
         * @return The type of the attribute (one of the default definition
         * types or a custom type).
         * @throws com.intershop.beehive.core.capi.common.FinderException if the attribute was not found
         */
        operation getAttributeType(anAttributeName : string) : int throws FinderException;

        /*
         * Call this function to get an AttributeValue by name. The method attempts to first find a localized AttributeValue in the current session locale, then a non-localized or localized AttributeValue in the lead locale. If the attribute cannot be found, <code>null</code> is returned.
         * 
         * @return The AttributeValue or <code>null</code> if not found.
         */
        operation getAttributeValue(aName : string) : AttributeValue;

        /*
         * Call this function to get an AttributeValue by name for a specified locale. If the attribute cannot be found, <code>null</code> is returned.
         * 
         * @return The AttributeValue or <code>null</code> if not found.
         */
        operation getAttributeValue(aName : string, aLocale : LocaleInformation) : AttributeValue;

	/*
	* Call this function to get a boolean attribute. If the
	* attribute cannot be found, <code>null</code> is
	* returned.
	* @return The boolean value or <code>null</code> if not found.
	*/     
	operation getBoolean(aName : string) : Boolean;
	
	/*
	* Call this function to get a Date attribute. If the
	* attribute cannot be found, <code>null</code> is
	* returned.
	* @return The Date value or <code>null</code> if not found.
	*/     
	operation getDate(aName : string) : Date;
	
	/*
	* Call this function to get a Decimal attribute. If the
	* attribute cannot be found, <code>null</code> is
	* returned.
	* @return The Decimal value or <code>null</code> if not found.
	*/     
	operation getDecimal(aName : string) : decimal;

        /*
         * Call this function to get a double attribute. If the
         * attribute cannot be found, <code>null</code> is
         * returned.
         * 
         * @return The double value or <code>null</code> if not found.
         */
        operation getDouble(aName : string) : Double;

        /*
         * Call this function to get an integer attribute. If the
         * attribute cannot be found, <code>null</code> is
         * returned.
         * 
         * @return The integer value or <code>null</code> if not found.
         */
        operation getInteger(aName : string) : Integer;

        /*
         * Call this function to get a localized attribute value. The return
         * value depends on the type of the attribute. It is of type
         * Integer, Double or String. If the
         * attribute cannot be found, <code>null</code> is
         * returned.
         * 
         * @return The value object or <code>null</code> if not found.
         */
        operation getLocalizedAttribute(aName : string, aLocale : LocaleInformation) : Object;
		
	/*
	* Call this function to get a localized Boolean attribute. If the
	* attribute cannot be found, <code>null</code> is
	* returned.
	* @return The Boolean value or <code>null</code> if not found.
	*/     
	operation getLocalizedBoolean(aName : string, aLocale : LocaleInformation) : Boolean;
	
	/*
	* Call this function to get a localized BigDecimal attribute. If the
	* attribute cannot be found, <code>null</code> is
	* returned.
	* @return The BigDecimal value or <code>null</code> if not found.
	*/     
	operation getLocalizedDecimal(aName : string, aLocale : LocaleInformation) : decimal;
	
	/*
	* Call this function to get a localized Date attribute. If the
	* attribute cannot be found, <code>null</code> is
	* returned.
	* @return The Date value or <code>null</code> if not found.
	*/     
	operation getLocalizedDate(aName : string, aLocale : LocaleInformation) : Date;

        /*
         * Call this function to get a localized double attribute. If the
         * attribute cannot be found, <code>null</code> is
         * returned.
         * 
         * @return The double value or <code>null</code> if not found.
         */
        operation getLocalizedDouble(aName : string, aLocale : LocaleInformation) : Double;

        /*
         * Call this function to get a localized integer attribute. If the
         * attribute cannot be found, <code>null</code> is
         * returned.
         * 
         * @return The integer value or <code>null</code> if not found.
         */
        operation getLocalizedInteger(aName : string, aLocale : LocaleInformation) : Integer;
		
	/*
	* Call this function to get a localized Long attribute. If the
	* attribute cannot be found, <code>null</code> is
	* returned.
	* @return The Long value or <code>null</code> if not found.
	*/     
	operation getLocalizedLong(aName : string, aLocale : LocaleInformation) : Long;
	
	/*
	* Call this function to get a localized Money attribute. If the
	* attribute cannot be found, <code>null</code> is
	* returned.
	* @return The Money value or <code>null</code> if not found.
	*/     
	operation getLocalizedMoney(aName : string, aLocale : LocaleInformation) : Money;

        /*
         * Call this function to get a localized object attribute. If the
         * attribute cannot be found, <code>null</code> is
         * returned.
         * 
         * @return The object value or <code>null</code> if not found.
         */
        operation getLocalizedObject(aName : string, aLocale : LocaleInformation) : PersistentObject;

	/*
	* Call this function to get a localized Quantity attribute. If the
	* attribute cannot be found, <code>null</code> is
	* returned.
	* @return The Quantity value or <code>null</code> if not found.
	*/     
	operation getLocalizedQuantity(aName : string, aLocale : LocaleInformation) : Quantity;

        /*
         * Call this function to get a localized string attribute. If the
         * attribute cannot be found, <code>null</code> is
         * returned.
         * 
         * @return The string value or <code>null</code> if not found.
         */
        operation getLocalizedString(aName : string, aLocale : LocaleInformation) : string;

        /*
         * Call this function to get a localized text attribute. If the
         * attribute cannot be found, <code>null</code> is
         * returned.
         * 
         * @return The text value or <code>null</code> if not found.
         */
        operation getLocalizedText(aName : string, aLocale : LocaleInformation) : string;

	/*
	 * Call this function to get a long attribute. If the
	 * attribute cannot be found, <code>null</code> is
	 * returned.
	 * @return The long value or <code>null</code> if not found.
	 */     
	 operation getLong(aName : string) : Long;
	
	/*
	 * Call this function to get a Money attribute. If the
	 * attribute cannot be found, <code>null</code> is
	 * returned.
	 * @return The Money value or <code>null</code> if not found.
	 */     
	 operation getMoney(aName : string) : Money;
        
        /*
         * Returns the number of tokens in a multiple attributes field.
         * 
         * @return the number of attributes or 0, if not found
         */
        operation getMultipleAttributesCount(aName : string) : int;
		
	/*
	* Use this function to get a number of Booleans from one attribute field.
	* @return An iterator of Booleans
	* @throws java.lang.NumberFormatException if the attribute field
	* does not contain parsable Booleans
	*/     
	operation getMultipleBooleans(aName : string) : BooleanIterator;
	
	/*
	* Use this function to get a number of Dates from one attribute field.
	* @return An iterator of Dates
	* @throws java.lang.NumberFormatException if the attribute field
	* does not contain parsable Dates
	*/     
	operation getMultipleDates(aName : string) : DateIterator;
	
	/*
	* Use this function to get a number of BigDecimals from one attribute field.
	* @return An iterator of BigDecimals
	* @throws java.lang.NumberFormatException if the attribute field
	* does not contain parsable BigDecimals
	*/     
	operation getMultipleDecimals(aName : string) : BigDecimalIterator;

        /*
         * Use this function to get a number of doubles from one attribute field.
         * 
         * @return An iterator of doubles
         * @throws java.lang.NumberFormatException if the attribute field
         * does not contain parsable doubles
         */
        operation getMultipleDoubles(aName : string) : DoubleIterator;

        /*
         * Use this function to get a number of integers from one attribute field.
         * 
         * @return An iterator of integers
         * @throws java.lang.NumberFormatException if the attribute field
         * does not contain parsable integers
         */
        operation getMultipleIntegers(aName : string) : IntegerIterator;

        /*
         * Use this function to get a number of attributes from one attribute field.
         * This function searches for the localized attributes.
         * 
         * @return An iterator of attributes, the type depends on how the attributes
         * have been set or an empty iterator if no attributes were found
         * @throws java.lang.NumberFormatException if the attribute field
         * does not contain parseable values
         */
        operation getMultipleLocalizedAttributes(aName : string, aLocale : LocaleInformation) : AttributeValueIterator;

        /*
         * Returns the number of tokens in a multiple attributes field.
         * This function searches for the localized attributes.
         * 
         * @return the number of attributes or 0, if not found
         */
        operation getMultipleLocalizedAttributesCount(aName : string, aLocale : LocaleInformation) : int;
		
	/*
	* Use this function to get a number of Booleans from one attribute field.
	* This function searches for the localized attributes.
	* @return An iterator to the Booleans
	* @throws java.lang.NumberFormatException if the attribute field
	* does not contain parsable Booleans
	*
	*/     
	operation getMultipleLocalizedBooleans(aName : string, aLocale : LocaleInformation) : BooleanIterator;
	
	/*
	* Use this function to get a number of Dates from one attribute field.
	* This function searches for the localized attributes.
	* @return An iterator to the Dates
	* @throws java.lang.NumberFormatException if the attribute field
	* does not contain parsable Dates
	*
	*/     
	operation getMultipleLocalizedDates(aName : string, aLocale : LocaleInformation) : DateIterator;
	
	
	/*
	* Use this function to get a number of BigDecimals from one attribute field.
	* This function searches for the localized attributes.
	* @return An iterator to the BigDecimals
	* @throws java.lang.NumberFormatException if the attribute field
	* does not contain parsable BigDecimals
	*
	*/     
	operation getMultipleLocalizedDecimals(aName : string, aLocale : LocaleInformation) : BigDecimalIterator;

        /*
         * Use this function to get a number of doubles from one attribute field.
         * This function searches for the localized attributes.
         * 
         * @return An iterator of doubles
         * @throws java.lang.NumberFormatException if the attribute field
         * does not contain parsable doubles
         */
        operation getMultipleLocalizedDoubles(aName : string, aLocale : LocaleInformation) : DoubleIterator;

        /*
         * Use this function to get a number of integers from one attribute field.
         * This function searches for the localized attributes.
         * 
         * @return An iterator to the integers
         * @throws java.lang.NumberFormatException if the attribute field
         * does not contain parsable integers
         */
        operation getMultipleLocalizedIntegers(aName : string, aLocale : LocaleInformation) : IntegerIterator;
		
	/*
	* Use this function to get a number of Longs from one attribute field.
	* This function searches for the localized attributes.
	* @return An iterator to the Longs
	* @throws java.lang.NumberFormatException if the attribute field
	* does not contain parsable Longs
	*
	*/     
	operation getMultipleLocalizedLongs(aName : string, aLocale : LocaleInformation) : LongIterator;

        /*
         * Use this function to get a number of strings from one attribute field.
         * This function searches for the localized attributes.
         * 
         * @return An iterator of strings
         */
        operation getMultipleLocalizedStrings(aName : string, aLocale : LocaleInformation) : StringIterator;

	/*
	* Use this function to get a number of Longs from one attribute field.
	* @return An iterator of Longs
	* @throws java.lang.NumberFormatException if the attribute field
	* does not contain parsable Longs
	*/     
	operation getMultipleLongs(aName : string) : LongIterator;

        /*
         * Use this function to get a number of strings from one attribute field.
         * 
         * @return An iterator of strings
         */
        operation getMultipleStrings(aName : string) : StringIterator;

        /*
         * Call this function to get an object attibute. If the
         * attribute cannot be found, <code>null</code> is
         * returned.
         * 
         * @return The object value or <code>null</code> if not found.
         */
        operation getObject(aName : string) : PersistentObject;

	/*
	* Call this function to get a Quantity attribute. If the
	* attribute cannot be found, <code>null</code> is
	* returned.
	* @return The Quantity value or <code>null</code> if not found.
	*/     
	operation getQuantity(aName : string) : Quantity;

        /*
         * Call this function to get a string attribute. If the
         * attribute cannot be found, <code>null</code> is
         * returned.
         * 
         * @return The string value or <code>null</code> if not found.
         */
        operation getString(aName : string) : string;

        /*
         * Call this function to get a text attribute. If the
         * attribute cannot be found, <code>null</code> is
         * returned.
         * 
         * @return The text value or <code>null</code> if not found.
         */
        operation getText(aName : string) : string;

        /*
         * Use this function to get the localized state of the attribute specified
         * by the name passed as parameter.
         * 
         * @return The localized state of the attribute. True if localized
         * or false if not localized
         * @throws com.intershop.beehive.core.capi.common.FinderException if the attribute was not found
         */
        operation isAttributeLocalized(anAttributeName : string) : boolean throws FinderException;
              
        operation createCustomAttributesIterator() : AttributeValueIterator;
        
        relation attributeValues : AttributeValue[0..n] readonly;       
    }
}
