import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/locking/Process.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.capi.locking
{
    /*
     * A resource may be either a named or an instance resource. This is expressed by a matching value in the resources type field. An instance resource is directly connected to a persistent instance resource, a named resource is more abstract and can be used to bundle any kind of resources (e.g. files, database tables).
     */
    cartridge interface Resource extends ExtensibleObject
    {
        /*
         * The resource name. For an instance resource the name is not set.
         */
        attribute name : string readonly required;

        /*
         * The resource description.
         */
        attribute description : string required;

        /*
         * The resource type (NAMED | INSTANCE).
         */
        attribute ^type : int readonly required;

        /*
         * The uuid of a persistent instance. Not set for a named resource.
         */
        attribute instanceID : string readonly required;

        /*
         * The instance class. Not set for a named resource.
         */
        attribute instanceClass : string required;

        /*
         * Returns the process owning the resource.
         */
        operation getResourceOwner() : Process;

        /*
         * Sets the process owning the resource.
         */
        operation setResourceOwner(owner : Process) : void;

        /*
         * Returns the parent resource, null if no parent exists.
         */
        operation getParentResource() : Resource;

        /*
         * Sets the parent resource.
         */
        operation setParentResource(parent : Resource) : void;

        /*
         * Creates an iterator of all sub resources.
         */
        operation createSubResourcesIterator() : Iterator;

        /*
         * Returns true, if resource has sub resources.
         */
        operation hasSubResources() : boolean;

        /*
         * Adds a sub resource.
         */
        operation addSubResource(resource : Resource) : void;
    }
}
