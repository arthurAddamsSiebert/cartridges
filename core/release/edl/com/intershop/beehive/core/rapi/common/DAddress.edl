import "enfinity:/core/edl/com/intershop/beehive/core/common/DObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/rapi/common/DContactInfo.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/rapi/common/DCustomAttribute.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/rapi/common/DErrorState.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/rapi/common/DPostalAddress.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external DContactInfo type "com.intershop.beehive.core.rapi.common.DContactInfo";
external DCustomAttribute type "com.intershop.beehive.core.rapi.common.DCustomAttribute";
external DErrorState type "com.intershop.beehive.core.rapi.common.DErrorState";
external DPostalAddress type "com.intershop.beehive.core.rapi.common.DPostalAddress";

namespace com.intershop.beehive.core.rapi.common
{
    /*
     * <P>An instance of DAddress describes the identity, whereabouts and means of contacting a person, firm or location. The information is divided into the following groups:
     * <BR>1. References (an ID and name) used to identify the address - located  in DAddress instance
     * <BR>2. Names identifying the person, organisation or company - located in the DAddress instance
     * <BR>3. A postal address - see <code>getPostalAddress</code>
     * <BR>4. Contact information such as email, phone numbers - see <code>getContactInfo</code>
     * 
     * <P>Any number of custom attributes may also be defined for each instance of DAddress. Each custom attribute has a String <I>name</I> and a String <I>value</I>. Custom attributes may be accessed using the methods <code>get/setCustomAttributeValue</code>.
     * 
     * @see com.intershop.beehive.ri.common.DPostalAddress
     * @see com.intershop.beehive.ri.common.DContactInfo
     * @see com.intershop.beehive.ri.common.DAddress#getCustomAttributeValue(java.lang.String)
     * @see com.intershop.beehive.ri.common.DAddress#setCustomAttributeValue(java.lang.String, java.lang.String)
     */
    xml class DAddress extends DObject
    {
        /*
         * <P>A 28-character reference ID identifying an address in the transaction server (if such an address exists). This attribute will normally only have a non-<code>null</code> value when the instance has been returned in a response from a transaction server. The reference ID may be then used by the client to request an update to the instance held by the transaction server.
         */
        attribute addressRefID : string tag "refid" type attribute;

        /*
         * <P>A name given to the address such as 'work', 'home' or 'grandma'.
         */
        attribute addressRefName : string tag "refname" type element;

        containment errorStates : DErrorState[0..n] type element;

        /*
         * <P>Optional title ('Mr', 'Dr'...) belonging to the person identified in the address.
         */
        attribute title : string type element;

        /*
         * <P>First name of the person identified in the address. For example if the address belongs to 'Joe Bloggs' the value would be 'Joe'.
         */
        attribute firstName : string tag "first-name" type element;

        /*
         * <P>The last name of the person identified in the address. For example if the address belongs to 'Joe Bloggs' the value would be 'Bloggs'.
         */
        attribute lastName : string tag "last-name" type element;

        /*
         * <P>The name of the company identified in the address, if specified.
         */
        attribute companyName : string tag "company-name" type element;

		/*
         * <P>The second name of the company identified in the address, if specified.
         */
        attribute companyName2 : string tag "company-name2" type element;

        containment postalAddress : DPostalAddress[0..1] type element;

        containment contactInfo : DContactInfo[0..1] type element;

        containment customAttributes : DCustomAttribute[0..n] type element;
    }
}
