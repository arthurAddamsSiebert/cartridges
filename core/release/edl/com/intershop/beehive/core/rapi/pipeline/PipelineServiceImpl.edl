import "enfinity:/core/edl/com/intershop/beehive/core/rapi/common/ServiceImpl.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/rapi/pipeline/DPipelet.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/rapi/pipeline/DPipeletSetIdentifier.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/rapi/pipeline/DPipeletSetInfo.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/rapi/pipeline/DPipeline.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/rapi/pipeline/DPipelineIdentifier.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/rapi/pipeline/DPipelineInfo.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/rapi/pipeline/DPipelineSetIdentifier.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/rapi/pipeline/DPipelineSetInfo.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external PipelineModificationException type "com.intershop.beehive.core.rapi.pipeline.PipelineModificationException";

namespace com.intershop.beehive.core.rapi.pipeline
{
    /*
     * The pipeline service provides functionality to access pipelines and pipelets on the server.
     * 
     * To access this service, SOAP clients must provide a Domain as AuthorizationObject. Otherwise the authorization checks will fail.
     */
    soap remote interface PipelineServiceImpl extends ServiceImpl
    {
        /*
         * Returns information about all pipeline sets of the passed domain. A pipeline set will be returned even if it has no pipelines. <b>
         * The pipeline sets are ordered according to the fallback.
         * 
         * @param domain the domain for which the pipeline sets should be determined
         * @return array containing info objects for the pipeline sets
         */
        operation getPipelineSetInfos(domainName : string, localeId : string) : DPipelineSetInfo[];

        /*
         * Returns information about all pipelines of the pipeline set specified by the passed pipelineset identifier.
         * 
         * @param pipelineSetIdentifier the pipelineset identifier
         * @param localeId the desired locale or <code>null</code> if no localized pipeline info is required
         * @return array containing info objects for the pipelines
         */
        operation getPipelineInfos(pipelineSetIdentifier : DPipelineSetIdentifier, localeId : string) : DPipelineInfo[];

        /*
         * Returns the pipeline specified by the passed pipeline identifier.
         * 
         * @param identifier the pipeline identifier
         * @return the pipeline or code>null</code> if no pipeline was found
         */
        operation getPipeline(identifier : DPipelineIdentifier) : DPipeline;

        /*
         * Sets the pipeline specified by the passed pipeline identifier. The pipeline will be saved to filesystem.
         * 
         * @param identifier the pipeline identifier
         * @param pipeline the pipeline to set
         */
        operation setPipeline(identifier : DPipelineIdentifier, pipeline : DPipeline) : void throws PipelineModificationException;

        /*
         * Deletes the pipeline specified by the passed pipeline identifier. The pipeline (and its language support files) will be removed from the PipelineMgr and deleted from the filesystem. <br>
         * Note that cartridge pipelines cannot be deleted, in case of a  cartridge pipeline the method will do nothing.
         * 
         * @param identifier the pipeline identifier
         */
        operation deletePipeline(identifier : DPipelineIdentifier) : void throws PipelineModificationException;

        /*
         * Reloads a single pipeline specified by the passed pipeline identifier. The pipeline will be reloaded at the PipelineMgr and at the PipelineProcessor (in that order).
         * Note: The pipelet descriptors are not affected.
         * 
         * @param identifier the identifier of the pipeline that should be reloaded
         */
        operation reloadPipeline(identifier : DPipelineIdentifier) : void;

        /*
         * Reloads all pipelines of a pipeline set specified by the passed pipelineset identifier. If no pipelineset identifier is provided, all pipelines for all domains are reloaded. The pipelines will be reloaded at the PipelineMgr and at the PipelineProcessor (in that order).<BR>
         * Note: The reloading is not done immediately, instead it will be done as the pipeline is requested. <BR>
         * Note: The pipelet descriptors are not affected.
         * 
         * @param setIdentifier the identifier of the pipelineset to clear or  <CODE>null</CODE> for all pipelinesets
         */
        operation reloadPipelines(setIdentifier : DPipelineSetIdentifier) : void;

        /*
         * Returns information about all pipelet sets.
         * 
         * @param domain currently not used, can be null
         * @return array of info objects
         */
        operation getPipeletSetInfos(domainName : string) : DPipeletSetInfo[];

        /*
         * Returns an array containing all pipelet descriptors of the requested pipelet set
         * 
         * @param pipeletSetIdentifier the identifier of the pipelet set
         * @return an array of pipelet descriptors
         */
        operation getPipelets(pipeletSetIdentifier : DPipeletSetIdentifier) : DPipelet[];

        /*
         * Triggers reload of all pipelet descriptors at the server.
         */
        operation reloadPipelets() : void;
    }
}
