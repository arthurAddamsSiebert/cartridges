import "enfinity:/core/edl/com/intershop/beehive/core/bos/util/CoreServiceImpl.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external UserGroupRefCtnr type "com.intershop.beehive.core.bos.usergroup.UserGroupRefCtnr";
external CreateResultCtnr type "com.intershop.beehive.core.bos.util.CreateResultCtnr";
external UserGroupBaseCtnr type "com.intershop.beehive.core.internal.bos.usergroup.UserGroupBaseCtnr";
external UserGroupCtnr type "com.intershop.beehive.core.internal.bos.usergroup.UserGroupCtnr";

namespace com.intershop.beehive.core.internal.bos.usergroup
{
    /*
     * This service interface allows client access to a well-defined set of
     * user group management functionality.
     * 
     * @author      mdiessner
     */
    soap binary remote interface UserGroupMgmtServiceImpl extends CoreServiceImpl
    {
        /*
         * Adds a set of users to a user group.
         * 
         * @param   aUserGroupRef the user group
         * @param  userIDs the users to be added
         * @return  an error code for each user
         */
        operation addUsersToUserGroup(userIDs : string[], aUserGroupRef : UserGroupRefCtnr) : int[];

        /*
         * Creates a new user group.
         * 
         * @param   aUserGroupCtnr  the data container for the new user group
         * @param   aDomainName     the domain hosting the user group
         * @return  The result container holding an error code
         */
        operation createUserGroup(aUserGroupCtnr : UserGroupCtnr, aDomainID : string) : CreateResultCtnr;

        /*
         * Deletes all user groups with the given IDs.
         * 
         * @param   userGroupIDs    an array of user group IDs
         * @param   aDomainID       the domain hosting the user group
         * @return  the error codes of the delete operation
         */
        operation deleteUserGroups(userGroupIDs : string[], aDomainID : string) : int[];

        /*
         * Gets all user groups.
         * 
         * @param   aDomainID       the domain hosting the user group
         * @return  all user groups
         */
        operation getAllUserGroups(aDomainID : string) : UserGroupBaseCtnr[];

        /*
         * Gets all permitted user groups for a user.
         * 
         * @param aCurrentDomainID the current working domain
         * @param aProvidingDomainID the user group providing domain
         * @param aUserID the user to get the permitted user groups for
         * @return a set of user group base containers
         */
        operation getPermittedUserGroups(aCurrentDomainID : string, aProvidingDomainID : string, aUserID : string) : UserGroupBaseCtnr[];

        /*
         * Gets a user group with the given parameters.
         * 
         * @param   aUserGroupID    the ID of the user group
         * @param   aDomainID       the domain hosting the user group
         * @param   aLocaleID       the locale ID identifying certain localizable
         * attributes
         * @return  the relevant user group
         */
        operation getUserGroup(aUserGroupID : string, aDomainID : string, aLocaleID : string) : UserGroupCtnr;

        /*
         * Gets a set of user groups.
         * 
         * @return a set of user groups
         */
        operation getUserGroupsByRefs(refCtnrs : UserGroupRefCtnr[]) : UserGroupBaseCtnr[];

        /*
         * Determines all domains that provide user groups for a user that works in the context of a domain.
         * 
         * @param aDomainID the ID of the current domain
         * @param aUserID the ID of the current user
         * 
         * @return a set of domain IDs
         */
        operation getUserGroupProvidingDomains(aDomainID : string, aUserID : string) : string[];

        /*
         * Determines all domains that are using the user groups of the passed domain.
         * 
         * @param aDomainID the ID of the current domain
         * @return a set of domain IDs
         */
        operation getUserGroupUsingDomains(aDomainID : string) : string[];

        /*
         * Removes a set of users from a user group.
         * 
         * @param   aUserGroupRef the user group
         * @param  userIDs the users to be removed
         * @return  an error code for each user
         */
        operation removeUsersFromUserGroup(userIDs : string[], aUserGroupRef : UserGroupRefCtnr) : int[];

        /*
         * Updates a user group.
         * 
         * @param   aUserGroupCtnr  the user group to be updated
         * @param   aDomainID       the domain hosting the user group
         * @return  an error code
         */
        operation updateUserGroup(aUserGroupCtnr : UserGroupCtnr, aDomainID : string) : int;
    }
}
