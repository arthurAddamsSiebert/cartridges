import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/locking/AcquisitionLogEntry.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/locking/AcquisitionLogEntryResourceAssignmentPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/locking/ProcessPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/locking/ResourcePO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.internal.locking
{
    /*
     * This class is used to log all resource acquisitions. This information is needed to track lock contentions.
     */
    orm class AcquisitionLogEntryPO extends ExtensibleObjectPO implements AcquisitionLogEntry table "AcqLogEntry"
    {
        /*
         * The date of the resource acquisition.
         */
        attribute acquisitionDate : datetime required;

        /*
         * The date of resources are released.
         */
        attribute releaseDate : datetime;

        /*
         * The ID of the process that acquired the resource.
         */
        attribute processID : uuid required;

        /*
         * The error code of the resource acquisition. 0 means SUCCESS.
         */
        attribute errorCode : int;

        /*
         * The reason for a failed resource acquisition.
         */
        attribute reasonForFailure : string<4000>;

        /*
         * The process that caused the lock contention.
         */
        attribute contentionProcessID : uuid;

        /*
         * The resource that caused the lock contention.
         */
        attribute contentionResourceID : uuid;

        relation contentionProcessPO : ProcessPO[0..1] inverse contentionLogEntryPOs
        {
            foreign key(contentionProcessID) -> (UUID);
        }

        relation acquisitionLogEntryResourceAssignmentPOs : AcquisitionLogEntryResourceAssignmentPO[0..n] inverse acquisitionLogEntryPO;

        relation processPO : ProcessPO[0..1] inverse acquisitionLogEntryPOs
        {
            foreign key(processID) -> (UUID);
        }

        relation contentionResourcePO : ResourcePO[0..1] inverse contentionLogEntryPOs
        {
            foreign key(contentionResourceID) -> (UUID);
        }
    }
}
