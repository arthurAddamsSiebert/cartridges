import "enfinity:/core/edl/com/intershop/beehive/core/bos/util/CoreServiceImpl.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external CreateResultCtnr type "com.intershop.beehive.core.bos.util.CreateResultCtnr";
external QueryResultCtnr type "com.intershop.beehive.core.bos.util.QueryResultCtnr";
external LDAPConnectionCtnr type "com.intershop.beehive.core.internal.bos.user.LDAPConnectionCtnr";
external LDAPUserQueryCtnr type "com.intershop.beehive.core.internal.bos.user.LDAPUserQueryCtnr";
external UserCtnr type "com.intershop.beehive.core.internal.bos.user.UserCtnr";
external UserQueryBaseCtnr type "com.intershop.beehive.core.internal.bos.user.UserQueryBaseCtnr";
external IUserMgmtServiceConstants type "com.intershop.beehive.core.internal.bos.user.IUserMgmtServiceConstants";

namespace com.intershop.beehive.core.internal.bos.user
{
    /*
     * This defines the interface for the UserMgmtService class.
     * 
     * @author Marco Diessner
     */
    soap binary remote interface UserMgmtServiceImpl extends CoreServiceImpl, IUserMgmtServiceConstants
    {
        /*
         * This method checks the LDAP connection described by the given
         * LDAP connection ctrn.
         * 
         * @param aConnCtnr The LDAP connection container.
         * @return An error code.
         */
        operation checkLDAPConnection(aConnCtnr : LDAPConnectionCtnr) : int;

        /*
         * This method deletes the LDAP connections with the given names in the unit given.
         * 
         * @param aUnitID The ID of the unit where the LDAP connection should be deleted.
         * @param fileNames The names of the LDAP connection files that should be deleted.
         */
        operation deleteLDAPConnections(aUnitID : string, fileNames : string[]) : void;

        /*
         * Deletes all users with the given UUIDs.
         * 
         * @param   uuids   an array of UUIDs
         */
        operation deleteUsers(uuids : string[]) : int[];

        /*
         * This method tries to execute the given query.
         * 
         * @param aQueryCtnr The query container describing the query.
         * @return The result of the query.
         */
        operation executeQuery(aQueryCtnr : UserQueryBaseCtnr) : QueryResultCtnr;

        /*
         * This method tries to get the next users for the query with the given
         * query id.
         * 
         * @param aQueryID The query for which the next users should be found.
         * @return The result of the query continuation.
         */
        operation findNextUsers(aQueryID : string) : QueryResultCtnr;

        /*
         * This method returns the LDAP connection containers for a given domain.
         * 
         * @param aDomainID The domain to retrieve the connection containers for.
         * @return The LDAP connection containers.
         */
        operation getLDAPConnections(aDomainID : string) : LDAPConnectionCtnr[];

        /*
         * This method encodes the given LDAP query into a search filter.
         * 
         * @return The LDAP search filter.
         */
        operation getLDAPSearchFilter(aQuery : LDAPUserQueryCtnr) : string;

        /*
         * This method gets a user data for given UUIDs.
         * 
         * @param aDomainID The domain ID to retrieve the user for. This is especially
         * needed to determine the correct LDAP server for the domain.
         * @param aUUID The UUID to retrieve the UserCtnr for.
         * @param aConnCtnr The connection ctnr to be used if the user is an LDAP user
         * @return The UserCtnr
         */
        operation getUser(aDomainID : string, aUUID : string, aConnCtnr : LDAPConnectionCtnr) : UserCtnr;

        /*
         * This returns the UUID of the user with the given login name in the domain given.
         * 
         * @param aLoginName The login name of the user.
         * @param aDomainName The name of the domain.
         */
        operation getUserID(aLoginName : string, aDomainName : string) : string;

        /*
         * This method sets LDAP connection containers for a given domain.
         * 
         * @param aDomainID The domain to set the connection containers for.
         * @param connCtnrs The containers with the connection data.
         * @return A container describing the result of the operation.
         */
        operation saveLDAPConnections(aDomainID : string, connCtnrs : LDAPConnectionCtnr[]) : CreateResultCtnr;

        /*
         * This method sets a UserCtnr. If the container does not
         * contain a UUID, a new User will be created and filled
         * with the settings from the container.
         * 
         * @param aUserCtnr The UserCtnr to be set.
         * @return The UUID of the user written or created.
         */
        operation saveUser(aUserCtnr : UserCtnr) : CreateResultCtnr;

        /*
         * Updates the password of a user.
         * 
         * @param aUserID the id (login name) of a user
         * @param aDomainID the authentication domain of the user (the id of the
         * domain the user belongs to)
         */
        operation updatePassword(aLoginUserName : string, aLoginDomainName : string, anOldPassword : string, aNewPassword : string) : int;
    }
}
