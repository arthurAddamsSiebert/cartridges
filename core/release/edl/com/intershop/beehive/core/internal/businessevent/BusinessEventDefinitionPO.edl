import "enfinity:/core/edl/com/intershop/beehive/core/capi/businessevent/BusinessEventDefinition.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/businessevent/BusinessEventInfoPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/businessevent/BusinessEventPipelineInfoPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.internal.businessevent
{
    /*
     * Each BusinessEventDefinition describes an kind of business event that can be
     * triggered. A BusinessEventDefinition has the following attributes, used for
     * identification:
     * <br>EventClass - identifies the subclass to use when triggering the business
     * event, eg OrderEvent, ProductLineItemEvent
     * <br>EventTarget - identifies the kind of object to be the target of the
     * business event, eg SellerOrder, SupplierOrder
     * <br>EventName - the name of the business event, eg OrderStatus-CANCELLED or
     * RouteSellerOrder
     * <br>
     * <br>The following attributes effect the availableility of the business event:
     * <br>PermissionID - if set, only users with this permission can trigger the event
     * <br>Hidden - if true, the business event will not be made available in the user
     * interface, but can be triggered from program code.
     * <br>
     * <br>Related classes:
     * <br>BusinessEventPipelineInfo - the pipeline and start node to be called when
     * the business event is triggered is defined in this class, and can be specified
     * differently  per domain
     * <br>BusinessEventInfo - used to store localized attributes such as display name
     * for the busienss event definitions
     */
    oca orm class BusinessEventDefinitionPO implements BusinessEventDefinition table "BusinessEventDefinition"
    {
    	
    	/*
    	 * @mssql-hint(NONCLUSTERED)
    	 */
        primary key(eventClass, eventTarget, eventName);

        attribute eventClass : string<256> searchable;

        /*
         * The name identifying the kind of target object for the event, eg SellerOrder, SupplierOrder...
         */
        attribute eventTarget : string<256>;

        attribute eventName : string<256>;

        attribute permissionID : string<128>;

        attribute hidden : boolean;

        relation businessEventPipelineInfoPOs : BusinessEventPipelineInfoPO[0..n] inverse businessEventDefinitionPO;

        relation businessEventInfo : BusinessEventInfoPO[0..1] inverse businessEventDefinitionPO;
    }
}
