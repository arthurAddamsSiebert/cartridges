import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/locking/Process.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/locking/AcquisitionLogEntryPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/locking/ResourcePO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/job/JobConfigurationPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.internal.locking
{
    orm class ProcessPO extends ExtensibleObjectPO implements Process table "Process"
    {
        index (jobUUID, scheduledDate);
        
        attribute name : string<256> required searchable;

        attribute description : string localized;

        attribute startDate : datetime;

        attribute endDate : datetime;

        attribute state : string<256>;

        attribute ^type : string<256>;

        attribute user : User;

        /*
         * Contains the name of host, at which one the process is running.
         */
        attribute hostName : string<200>;

        /*
         * The identifier of installation the application server performing this process belongs to.
         */
        attribute installationID : string<50>;

        /*
         * The name of application server performing this process.
         */
        attribute serverName : string<50>;

        /*
         * The progress size.
         */
        attribute progressSize : int = 0;

        /*
         * The current value in progress.
         */
        attribute progressValue : int = 0;

        /*
         * Contains the UUID of parent process if one exists
         */
        attribute parentUUID : uuid;

        /*
         * Contains the scheduled date the process should be started
         */
        attribute scheduledDate : datetime;
        
        /**
         * The uuid of jobconfiguration triggering this process
         */
        attribute jobUUID : uuid;        

        relation acquisitionLogEntryPOs : AcquisitionLogEntryPO[0..n] inverse processPO delete propagate;

        relation parentPO : ProcessPO[0..1] inverse childPOs
        {
            foreign key(parentUUID) -> (UUID);
        }

        relation jobConfigurationPO : JobConfigurationPO[0..1] inverse processPOs
        {
            foreign key(jobUUID) -> (UUID);
        }

        relation contentionLogEntryPOs : AcquisitionLogEntryPO[0..n] inverse contentionProcessPO;

        relation ownedResourcePOs : ResourcePO[0..n] inverse owningProcessPO;

        relation childPOs : ProcessPO[0..n] inverse parentPO;
    }
}
