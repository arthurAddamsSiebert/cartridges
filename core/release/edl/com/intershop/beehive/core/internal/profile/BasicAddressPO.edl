import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/profile/AddressType.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/profile/BasicProfilePO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external Address type "com.intershop.beehive.core.capi.profile.Address";

namespace com.intershop.beehive.core.internal.profile
{
    /*
     * BasicAddress is the standard implementation of the ProfileService interface Address. <P>
     * 
     * Represents a business address of a BusinessPartner. Provides a long list of address attributes that can be used in the application.<BR>
     * A address is identified (not unique) by a name and can be classified as 'ship-to', 'invoice-to' or 'ship-from' address. An address can be of one or more types.
     * 
     * <p>Following attributes are used to identify or specify the type of the address:
     * <br>profileID - foreign key attribute
     * <br>typeCode - specifies address type(s)
     * <br>addressName - identifies address in storefront list
     * 
     * @see com.intershop.beehive.bts.businesspartner.BusinessPartner
     * @see com.intershop.beehive.bts.businesspartner.BasicProfile
     */
    partitionable orm class BasicAddressPO extends ExtensibleObjectPO implements Address
    {
        index(profileID);

        attribute profileID : uuid searchable;

        attribute addressTypeID : uuid searchable;

        /*
         * Classifies the address as one or more of the following, depending upon the bits set:
         * <br>BIT 1=INVOICE_TO
         * <br>BIT 2=SHIP_TO
         * <br>BIT 3=SHIP_FROM
         * <br>So a BasicAddress with TypeCode=3 is defined as being both an invoice-to and ship-to address.
         * <br>Note constants are defined in BasicAddressConstants defining which bits are set
         * 
         * @see com.intershop.beehive.bts.service.profile.BasicAddressConstants
         */
        attribute typeCode : int = 0;

        /*
         * The (non-unique) name of the address. Used in the application (as a display attribute) to identify an address.
         */
        attribute addressName : string<256>;

        attribute addressNr : string<256>;

        attribute city : string<256>;

        attribute countryCode : string<256>;

        attribute county : string<256>;

        attribute postBox : string<256>;

        attribute postalCode : string<256>;

        attribute prefecture : string<256>;

        attribute province : string<256>;

        attribute region : string<256>;

        attribute state : string<256>;

        attribute street : string<256>;

        attribute street2 : string<256>;
        
        attribute street3 : string<256>;

        attribute streetTranscription : string<256>;

        attribute eMail : string<256>;

        attribute fax : string<256>;

        attribute homepage : string<256>;

        attribute mobile : string<256>;

        attribute phoneHome : string<256>;

        attribute phoneBusiness : string<256>;

        attribute phoneBusinessDirect : string<256>;

        attribute companyName : string<256>;

        attribute companyNameTranscription : string<256>;

		attribute companyName2 : string<256>;

        attribute firstName : string<256>;

        attribute firstNameTranscription : string<256>;

        attribute secondName : string<256>;

        attribute honorific : string<256>;

        attribute jobTitle : string<256>;

        attribute lastName : string<256>;

        attribute lastNameTranscription : string<256>;

        attribute secondLastName : string<256>;

        attribute suffix : string<256>;

        attribute title : string<256>;

        relation addressBook : BasicProfilePO[1..1] inverse basicAddresses
        {
            foreign key(profileID) -> (UUID);
        }
        
	    dependency addressType : AddressType handler "com.intershop.beehive.core.capi.profile.AddressTypeMgr"
	    {
	               foreign key(addressTypeID);
	    }
    }
}
