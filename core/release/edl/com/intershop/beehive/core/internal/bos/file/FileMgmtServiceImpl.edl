import "enfinity:/core/edl/com/intershop/beehive/core/bos/util/CoreServiceImpl.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external EntityResultCtnr type "com.intershop.beehive.core.bos.util.EntityResultCtnr";
external DirectoryCtnr type "com.intershop.beehive.core.internal.bos.file.DirectoryCtnr";
external FileCtnr type "com.intershop.beehive.core.internal.bos.file.FileCtnr";
external NodeCtnr type "com.intershop.beehive.core.internal.bos.file.NodeCtnr";

namespace com.intershop.beehive.core.internal.bos.file
{
    /*
     * This service interface allows client access to a well-defined set of
     * server files.
     * 
     * @author     Marco Diessner
     * @version    1.00, 05/09/01
     */
    soap binary remote interface FileMgmtServiceImpl extends CoreServiceImpl
    {
        /*
         * Creates a copy of a file/directory node.
         * 
         * @param aNode the file to be copied
         * @param aParentNode the parent node to create the copy in
         * @param aNodeName the name of the copy to be created
         * @return a result container
         */
        operation copyNode(aNode : NodeCtnr, aParentNode : DirectoryCtnr, aNodeName : string) : EntityResultCtnr;

        /*
         * Creates a new directory node.
         * 
         * @param aParentNode the parent node to create the directory in
         * @param aDirectorName the name of the directory to be created
         * @return a result container
         */
        operation createDirectoryNode(aParentNode : DirectoryCtnr, aDirectoryName : string) : EntityResultCtnr;

        /*
         * Creates a new file node.
         * 
         * @param aParentNode the parent node to create the file in
         * @param aFileName the name of the file to be created
         * @return a result container
         */
        operation createFileNode(aParentNode : DirectoryCtnr, aFileName : string) : EntityResultCtnr;

        /*
         * Deletes a node.
         * 
         * @param aNode the node to be deleted
         * @return an error code
         */
        operation deleteNode(aNode : NodeCtnr) : int;

        /*
         * Gets the root directory node of a cartridge
         * 
         * @param aCartridgeName the name of the cartridge
         * @param aNodeType the type of root node  (template, impex etc)
         * @return the root node
         */
        operation getCartridgeRootNode(aCartridgeName : string, aNodeType : int) : EntityResultCtnr;

        /*
         * Completely loads a file.
         * 
         * @param aFileNode the file for which content is to be loaded
         * @return the filled file container
         */
        operation getFileNode(aFileNode : FileCtnr) : EntityResultCtnr;

        /*
         * Gets the path separator.
         * 
         * @return the path separator
         */
        operation getPathSeparator() : string;

        /*
         * Gets the root directory node of a site
         * 
         * @param aSiteID the ID of the site
         * @param aNodeType the type of root node  (template, impex etc)
         * @return the root node
         */
        operation getSiteRootNode(aSiteID : string, aNodeType : int) : EntityResultCtnr;

        /*
         * Gets the sub-nodes of a directory node.
         * 
         * @param aParentNode the directory for which the sub-nodes are loaded
         * @return a set of node containers
         */
        operation getSubNodes(aParentNode : DirectoryCtnr) : NodeCtnr[];

        /*
         * Gets the root directory node of a unit
         * 
         * @param aUnitID the ID of the unit
         * @param aNodeType the type of root node  (template, impex etc)
         * @return the root node
         */
        operation getUnitRootNode(aUnitID : string, aNodeType : int) : EntityResultCtnr;

        /*
         * Renames a node.
         * 
         * @param aNode the node to be renamed
         * @param aNodeName the new name of the node
         * @return an error code
         */
        operation renameNode(aNode : NodeCtnr, aNodeName : string) : int;

        /*
         * Updates a file.
         * 
         * @param aFileNode the new content of the file
         * @return an error code
         */
        operation updateFileNode(aFileNode : FileCtnr) : int;
    }
}
