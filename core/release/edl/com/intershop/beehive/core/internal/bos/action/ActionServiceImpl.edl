import "enfinity:/core/edl/com/intershop/beehive/core/bos/util/CoreServiceImpl.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external ActionNotFoundException type "com.intershop.beehive.core.internal.bos.action.ActionNotFoundException";
external ActionResultCtnr type "com.intershop.beehive.core.internal.bos.action.ActionResultCtnr";
external Serializable type "java.io.Serializable";

namespace com.intershop.beehive.core.internal.bos.action
{
    /*
     * The ActionService allows controlling and monitoring an asynchronous action. The back-office client can access this service remotely to request the action to abort itself or to receive progress information. The action is identified by its unique ID.
     * 
     * @author      Jörg Werner
     * @version     1.00, 02/24/2000
     * @see   com.intershop.beehive.core.bos.action.IAction
     */
    soap binary remote interface ActionServiceImpl extends CoreServiceImpl
    {
        /*
         * Returns any progress information provided by the action.
         * 
         * @param actionID the identifier of the action at the server
         * @return any progress information provided by the action, or null if the action is complete
         * @exception ActionNotFoundException If no ActionRunner exists for the specified action ID.
         */
        operation getProgressInformation(actionID : string) : Serializable throws ActionNotFoundException;

        /*
         * Returns the result of the action. The result indicates whether the action
         * completed successfully or was aborted and contains, on success, any
         * result information provided by the action.
         * <p>
         * NOTE: This method should not be called before the action is finished,
         * i.e. getProgressInformation() returns null. If the action was aborted
         * because of an exception, it is re-thrown by this operation.
         * 
         * @param actionID the identifier of the action at the server
         * @return the action result
         * @exception ActionNotFoundException If no ActionRunner exists for the specified action ID.
         * @exception Exception If the action was aborted because of an exception, it is re-thrown.
         */
        operation getResult(actionID : string) : ActionResultCtnr;

        /*
         * Asks the action to abort itself. The action may ignore this request.
         * 
         * @param actionID the identifier of the action at the server
         * @exception ActionNotFoundException If no ActionRunner exists for the specified action ID.
         */
        operation requestActionAbort(actionID : string) : void throws ActionNotFoundException;

        /*
         * Indicates whether a previously started action is completed now.
         * 
         * @param actionID the identifier of the action at the server
         * @return true if an action was started and is now complete, false otherwise
         * @exception ActionNotFoundException If no ActionRunner exists for the specified action ID.
         */
        operation isActionComplete(actionID : string) : boolean throws ActionNotFoundException;
    }
}
