import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/replication/ReplicationTask.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/locking/ProcessPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/replication/ReplicationProcessTaskAssignmentPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/replication/ReplicationTaskAssignmentPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/replication/ReplicationTaskHistoryPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.internal.replication
{
    /*
     * This class represents a replication task.
     */
    orm class ReplicationTaskPO extends ExtensibleObjectPO implements ReplicationTask table "ReplicationTask"
    {
        /*
         * Contains an non-ambiguous identifier of this replication task within a domain.
         */
        attribute taskID : string<1000> required;

        /*
         * This attribute contains the identifier of user requesting this replication task.
         */
        attribute requester : User;

        /*
         * This attribute contains the time, at which the requester created the replication task.
         */
        attribute requestTime : datetime;

        /*
         * Contains the time this replication task should be started.
         */
        attribute startTime : datetime;

        /*
         * The replication task should be started not later than this time.
         */
        attribute dueTime : datetime;

        /*
         * Contains the current state of replication task.
         */
        attribute state : string<50> required observable searchable;

        /*
         * Contains the identifier of replication process, this task is assigned to.
         */
        attribute processID : uuid searchable;

        /*
         * This attribute contains the description of replication task.
         */
        attribute description : string localized;

        relation stateModificationEntryPOs : ReplicationTaskHistoryPO[0..n] inverse replicationTaskPO implements stateModificationEntries;

        relation assignments : ReplicationTaskAssignmentPO[0..n] inverse replicationTaskPO;

        /*
         * The replication process performing the replication task.
         */
        relation replicationProcesses : ReplicationProcessTaskAssignmentPO[0..n] inverse replicationTask;

        /*
         * The process this replication task is assigned to.
         */
        dependency processPO : ProcessPO
        {
            foreign key(processID);
        }
    }
}
