import "enfinity:/core/edl/com/intershop/beehive/core/bos/util/CoreServiceImpl.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external ImpexConfigCtnr type "com.intershop.beehive.core.internal.bos.impex.ImpexConfigCtnr";

namespace com.intershop.beehive.core.internal.bos.impex
{
    /*
     * Defines the central service for impex actions due eMC.
     * 
     * @author  dhaertzer
     * @version 1.00; 03/14/2001
     */
    soap binary remote interface ImpexMgmtServiceImpl extends CoreServiceImpl
    {
        /*
         * This method returns an impex configuration container for the impex property file with the given name in the given unit. A fallback is performed to the property file with the same name in the given cartridge. In addition to this, the properties from the eMC property file are read and are merged into the resulting configuration with the highest precedence.
         * 
         * @param aUnitName The name of the unit.
         * @param aCartridgeName The name of the cartridge.
         * @param aPropertyFileName The name of the config file.
         * @param anEMCPropertyFileName The name of the eMC import config file.
         */
        operation getConfiguration(aUnitName : string, aCartridgeName : string, aPropertyFileName : string, anEMCPropertyFileName : string) : ImpexConfigCtnr;

        /*
         * This method returns the names of all existing configuration files within a given unit.
         * 
         * @param aUnitName The unit to search for configuration files within.
         * @return An array containing all names of configuration files in the given unit.
         */
        operation getConfigurationFileNames(aUnitName : string) : string[];

        /*
         * This method writes the given configuration into the config file with the given name in the given unit. It writes only properties that have different values/are new compares to the file with the given property file name either in the unit or the cartridge.
         * 
         * @param aUnitName The unit name.
         * @param aCartridgeName The name of the cartridge.
         * @param aPropertyFileName The name of the property file.
         * @param anEMCPropertyFileName The name of the eMC property file to be written.
         * @param anImpexConfigCtnr The impex config ctnr.
         */
        operation setConfiguration(aUnitName : string, aCartridgeName : string, aPropertyFileName : string, anEMCPropertyFileName : string, anImpexConfigCtnr : ImpexConfigCtnr) : void;

        /*
         * Starts an export process based on an array of uuids.
         * 
         * @param anUUIDArray The array of uuids of busines objects
         * to be exported.
         * @param aDomainIDArray The array of domain ids, targing the
         * source of the specified business objects.
         * @param theProperties The properties for the import/export to be performed.
         * @param aPipelineName The name of the export pipeline.
         * @param aPipelineDomainID Specify the domain of the pipeline.
         * @param aClassName The name of IEnumeratedObjectRetriever class.
         * @return The action service.
         * .
         */
        operation startExport(anUUIDArray : string[], aDomainIDArray : string[], theProperties : Hashtable, aPipelineName : string, aPipelineDomainID : string, aClassName : string) : string;

        /*
         * Starts an import process.
         * 
         * @param theProperties The properties for the import/export to be performed.
         * @param aPipelineName The name of the import pipeline.
         * @param aPipelineDomainID Specify the domain of the pipeline.
         * @return The action service.
         */
        operation startImport(theProperties : Hashtable, aPipelineName : string, aPipelineDomainID : string) : string;

        /*
         * Starts an export process based on a query.
         * 
         * @param aQueryID The query specifying the busines objects to
         * be exported.
         * @param aDomainIDArray The array of domain ids, targing the
         * source of the specified business objects.
         * @param theProperties The properties for the import/export to be performed.
         * @param aPipelineName The name of the export pipeline.
         * @param aPipelineDomainID Specify the domain of the pipeline.
         * @param aClassName The name of IQueryObjectRetriever class.
         * @return The action service.
         * .
         */
        operation startQueryExport(aQueryID : string, aDomainIDArray : string[], theProperties : Hashtable, aPipelineName : string, aPipelineDomainID : string, aClassName : string) : string;
    }
}
