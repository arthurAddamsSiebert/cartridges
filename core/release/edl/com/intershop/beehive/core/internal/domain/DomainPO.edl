import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/domain/ApplicationPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/domain/ApplicationDomainRelationPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/domain/DomainInformationPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/domain/RelationPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.internal.domain
{
    /*
     * Domain represents a realm in the business logic in that business objects can live.
     * <P>
     * Every business objects has assigned a domain. The domain of a business object is set at creation time of the object.
     * <P>
     * A domain knows its owner, which is a business object itself of type IDomainOwner.
     * <P>
     * BusinessObjects can use the Domain object to lookup something from the registry.
     */
    orm class DomainPO extends ExtensibleObjectPO implements Domain table "Domain"
    {
        index(parentSiteID);

        /*
         * The type code of this domain.  Depending on its value, this domain represents the system domain, a site or a mere unit.  It is composed by the composition of three bits that can be found in DomainConstants.
         * 
         * @see DomainConstants#SYSTEM_DOMAIN_BIT
         * @see DomainConstants#SITE_BIT
         * @see DomainConstants#UNIT_BIT
         */
        attribute typeCode : int required;

        /*
         * Status of the domain.  Can be either <code>STATUS_LIVE</code>, <code>STATUS_MAINTENANCE</code>, <code>STATUS_DISABLED</code> or <code>STATUS_TOBEDELETED</code>.
         * 
         * @see DomainConstants#STATUS_LIVE
         * @see DomainConstants#STATUS_MAINTENANCE
         * @see DomainConstants#STATUS_DISABLED
         * @see DomainConstants#STATUS_TOBEDELETED
         */
        attribute status : int;

        /*
         * The ID of this domain's parent site.  Is <code>null</code> for the root site and for domains that are mere units.
         */
        attribute parentSiteID : uuid;

        /*
         * The ID of according site
         */
        attribute siteID : uuid;

        /*
         * This attribute represents a set of flags, which indicates whether or not there are domain specific settings in the registry for this instance. By default, there are no special entries.
         * The mask is checked and updated everytime a domain-specific entry is added, looked up or removed from the registry.
         */
        attribute entryMask : int = 0;

        /*
         * <p>Specifies if the webadapter is allowed to cache pages.
         * 
         * <p>Attribute relevant is the context of a site only.
         */
        attribute pageCachingAllowed : boolean;

        /*
         * <p>Maximum time span static content is cached by the webadapter until it is requested again from the application server.
         * 
         * <p>Attribute relevant is the context of a site only.
         */
        attribute staticContentMaxAge : int;

        /*
         * <p>Page cache version to be used by the webadapter.  The ID must be unique.
         * 
         * <p>Attribute relevant is the context of a site only.
         */
        attribute pageCacheID : string<20>;

        /*
         * <p>Static content cache version to be used by the webadapter.  The ID must be unique.
         * 
         * <p>Attribute relevant is the context of a site only.
         */
        attribute staticContentCacheID : string<20>;

        /*
         * The localized display name of this domain.
         */
        attribute displayName : string localized;

        /*
         * The localized description of this domain.
         */
        attribute description : string localized;
        
        /*
         * The dynamic PGID Pipeline for the PGID provider.
         */
        attribute PGIDPipeline : string mapped;

        /*
         * This saves the profile id of a site/unit.<p>
         * 
         * This id is used to attach address data or other profile data to a site/unit.
         * 
         * @see IProfileMgr
         */
        attribute profileID : uuid;

        attribute serverGroup : string<256>;

        /*
         * Defines the business model in which this domain is running.
         */
        attribute businessModel : string<256>;

        /*
         * The UUID of the default application
         */
        attribute defaultApplicationID : uuid;

        relation unitsPO : DomainPO[0..n] inverse sitePO;

        relation domain1RelationsPO : RelationPO[0..n] inverse domain2PO;

        relation domain2RelationsPO : RelationPO[0..n] inverse domain1PO;

        relation subSitesPO : DomainPO[0..n] inverse parentSitePO;

        /*
         * This relation references the DomainInformation instance belonging to that domain.
         */
        relation domainInformationPO : DomainInformationPO[0..1] inverse domainPO;

        relation sitePO : DomainPO[0..1] inverse unitsPO
        {
            foreign key(siteID) -> (UUID);
        }

        relation parentSitePO : DomainPO[0..1] inverse subSitesPO
        {
            foreign key(parentSiteID) -> (UUID);
        }
        
        relation applicationsPO : ApplicationPO[0..n] inverse sitePO;
        
        relation applicationDomainRelationsPO : ApplicationDomainRelationPO[0..n] inverse domainPO; 
    }
}
