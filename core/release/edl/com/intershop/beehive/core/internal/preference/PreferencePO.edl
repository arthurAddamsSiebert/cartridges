import "enfinity:/core/edl/com/intershop/beehive/core/capi/preference/DomainPreference.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/preference/PreferenceDefinitionPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.internal.preference
{
    /*
     * Stores a single domain specific preference value.
     * <p>Because of the complex fallback mechanism used for preference lookup, this bean should never be updated directly. Instead, the respective PreferenceMgr methods should be used.
     * 
     * @see com.intershop.beehive.core.capi.common.preference.PreferenceDefinition
     * @see com.intershop.beehive.core.capi.common.preference.PreferenceGroup
     * @see com.intershop.beehive.core.capi.common.preference.DPreference
     * @see com.intershop.beehive.core.capi.common.preference.DPreferenceGroup
     */
    oca timestamp orm class PreferencePO implements DomainPreference
    {
        primary key(domainID, preferenceName);

        /*
         * The domain ID. Specifies for which domain the preference value applies.
         */
        attribute domainID : uuid required searchable;

        /*
         * The lookup name. Specifies the kind of preference for which this bean applies.
         * <p>Note: This attributes correlates with the attribute preferenceDefinitionID, i.e. beans having the same preferenceName always have the same preferenceDefinitionID, too.
         */
        attribute preferenceName : string<256> required;

        /*
         * The integer value of this preference, if it is of type integer.
         */
        attribute intValue : int;

        /*
         * The double value of this preference, if it is of type double.
         */
        attribute doubleValue : double;

        /*
         * The string value of this preference, if it is of type String.
         */
        attribute stringValue : string<4000>;

        /*
         * The text value of this preference, if it is of type CLOB.
         */
        attribute textValue : ^text;

        /*
         * Foreign key for the PreferenceDefinition bean, where general information about this type of preference can be found.
         * <p>Note: This attributes correlates with the attribute preferenceName, i.e. beans having the same preferenceName always have the same preferenceDefinitionID, too.
         */
        attribute preferenceDefinitionID : uuid;

        relation preferenceDefinitionPO : PreferenceDefinitionPO[1..1] inverse preferencePOs implements preferenceDefinition 
        {
            foreign key(preferenceDefinitionID) -> (UUID);
        }
    }
}
