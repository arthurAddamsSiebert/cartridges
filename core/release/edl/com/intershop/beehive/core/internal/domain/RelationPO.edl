import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Relation.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/domain/DomainPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/domain/RelationDefinitionPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.internal.domain
{
    /*
     * Represents a concrete relation between two domains. The semantics of the relation is provided by the underlying relation definition.
     * 
     * @see RelationDefinition
     */
    oca timestamp orm class RelationPO implements Relation table "Relation"
    {
        primary key(domain1_ID, domain2_ID, relationDefinitionName);

        /*
         * The UUID of the first domain participating in this relation.
         */
        attribute domain1_ID : uuid required;

        /*
         * The UUID of the second domain participating in this relation.
         */
        attribute domain2_ID : uuid required;

        /*
         * The name of the relation definition associated with this relation.
         */
        attribute relationDefinitionName : string<256> required;

        relation domain2PO : DomainPO[1..1] inverse domain1RelationsPO
        {
            foreign key(domain2_ID) -> (UUID);
        }

        relation relationDefinitionPO : RelationDefinitionPO[1..1] inverse relationsPO
        {
            foreign key(relationDefinitionName) -> (name);
        }

        relation domain1PO : DomainPO[1..1] inverse domain2RelationsPO
        {
            foreign key(domain1_ID) -> (UUID);
        }
    }
}
