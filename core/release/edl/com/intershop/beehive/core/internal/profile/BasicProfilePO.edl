import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/profile/AddressBook.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/profile/DataSheet.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/profile/Profile.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/profile/BasicAddressPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/internal/profile/BasicCredentialsPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.core.internal.profile
{
    /*
     * BasicProfile is the standard implementation of the Profile interface. The basic implementation
     * 
     * simply stores all profile attributes in a single database table. <P>
     * 
     * BasicProfile provides accessor methods to navigate to:
     * 
     * <ul>
     * 
     * <li>an addressbook
     * 
     * <li>a datasheet
     * 
     * <li>userdefined attributes
     * 
     * </ul>
     */
    partitionable orm class BasicProfilePO extends ExtensibleObjectPO implements Profile, DataSheet, AddressBook
    {
        index(defaultAddressID);

        index(firstName);

        index(lastName);

        index(businessPartnerNo);

        index(creationDate);
        
        attribute department : string<256>;
        
        attribute phoneHome : string<256>;
        
        attribute phoneBusiness : string<256>;
        
        attribute phoneMobile : string<256>;
        
        attribute fax : string<256>;
        
        attribute email : string<256>;
        
        attribute anniversary : string<256>;

        attribute birthday : string<32>;

        attribute birthdayDate : datetime handler "com.intershop.beehive.orm.internal.jdbc.TimeZoneLessDateAttributeHandler";

        attribute companyName : string<256>;

        attribute description : string<256>;

        attribute firstName : string<256>;

        attribute companyNameTranscription : string<256>;

        attribute firstNameTranscription : string<256>;

        attribute gender : string<32>;

        attribute hobbies : string<256>;

        attribute honorific : string<256>;

        attribute jobTitle : string<256>;

        attribute keywords : string<256>;

        attribute lastName : string<256>;

        attribute lastNameTranscription : string<256>;

        attribute nickName : string<256>;

        attribute preferredLocale : string<10>;

        attribute preferredCurrency : string<10>;
        
		attribute preferredLanguage : string<10>;

        attribute preferredTimeZoneID : string<256>;

        attribute profession : string<256>;

        attribute secondLastName : string<256>;

        attribute secondName : string<256>;

        attribute suffix : string<256>;

        attribute title : string<256>;

        attribute preferredInvoiceToAddressURN : string<256>;

        attribute preferredShipToAddressURN : string<256>;

        /*
         * The confirmation options requested by the buyer. The requested options are stored as a bitwise 'OR' combination of individual options.
         * 
         * <br>BIT 1=MAIL_CONFIRMATION
         * <br>BIT 2=FAX_CONFIRMATION
         * 
         * @see com.intershop.beehive.bts.businesspartner.DataSheetConstants
         */
        attribute confirmation : int = 0;

        /*
         * ID of the default address in the context of the addressbook.
         */
        attribute defaultAddressID : uuid;

        /*
         * A number used to identify the BusinessPartner.
         * 
         * <p>An unique compound index (attributes DomainID, BusinesspartnerNo) ensures the uniqueness of the BusinesspartnerNo within a domain. When a Profile is newly created, the BusinesspartnerNo is set to be identical to the UUID of the Profile. The client is responsible for resetting the attribute to an alternative value if this is desired.
         */
        attribute businessPartnerNo : string<256> required;

        /*
         * The typeCode of a profile is nessasary to different between a profile of a 'real' user or a profile of a unit .
         * <p>
         * 0 =USER_PROFILE (default) <br>
         * 1 = UNIT_PROFILE
         */
        attribute typeCode : int = 0;

        attribute creationDate : datetime required;

        relation basicAddresses : BasicAddressPO[0..n] inverse addressBook;

        relation basicCredentials : BasicCredentialsPO[0..1] inverse basicProfile;

		/*
		 * @noconstraint
		 */
        dependency defaultBasicAddress : BasicAddressPO
        {
            foreign key(defaultAddressID);
        }
    }
}
