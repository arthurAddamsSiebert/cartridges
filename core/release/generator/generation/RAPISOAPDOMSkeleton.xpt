/*
 * Generates the source code for RAPI soap skeletons with DOM encoding
 */

«IMPORT edl»
«EXTENSION util::EDLUtil»
«EXTENSION org::eclipse::xtend::util::stdlib::properties»


«DEFINE generateServiceSkeletons FOR EDLModel»
    «FOREACH eAllContents.typeSelect(EDLRAPIType).select(t |
        t.modifiers.contains(EDLRAPITypeModifier::soap) &&
        !t.modifiers.contains(EDLRAPITypeModifier::binary)) AS t»
        «EXPAND generateServiceSkeleton FOR t»
    «ENDFOREACH»
«ENDDEFINE»


«DEFINE generateServiceSkeleton FOR EDLRAPIType-»
    «FILE getClassName().getServiceInterfaceName().replaceAll("\\.", "/") + "_SOAPSkeleton.java"-»
    «EXPAND generateHeader FOR this-»
    «LET {} AS imports-»
package «getPackageName()»;

//PREPAREIMPORTS «getPackageName()»

/**
 * This class represents a skeleton implementation of <code>«getClassName().getServiceInterfaceName().getShortName()»</code>.
 * Skeletons are used at the server-side to map SOAP/HTTP requests to method
 * invocations of the corresponding service. They decode method parameters,
 * invoke the method and encode the return value. 
 *
 * @generated
 */
public «modifiers.contains(EDLRAPITypeModifier::abstract) ? "abstract" : ""» class «getClassName().getServiceInterfaceName().getShortName()»_SOAPSkeleton
«IF superClasses.typeSelect(EDLRAPIType).size == 0-»
    «imports.addImport("com.intershop.beehive.core.internal.soap.SOAPSkeleton")-»
    extends SOAPSkeleton
«ELSE»
    «imports.addImport(superClasses.typeSelect(EDLRAPIType).get(0).getClassName().getServiceInterfaceName() + "_SOAPSkeleton")-»
    extends «superClasses.typeSelect(EDLRAPIType).get(0).getClassName().getServiceInterfaceName().getShortName()»_SOAPSkeleton
«ENDIF-»
{
    «EXPAND generateDispatch(imports) FOR this-»
    «FOREACH getOperations() AS op-»    
        «EXPAND generateOperation(imports) FOR op-»
    «ENDFOREACH-»
}
//ADDIMPORTS «FOREACH imports AS i SEPARATOR ", "»«i»«ENDFOREACH»
«ENDLET-»
    «ENDFILE-»
«ENDDEFINE»


«DEFINE generateHeader FOR EDLRAPIType-»
// =============================================================================
// File: «name.unescape().getServiceInterfaceName()»_SOAPSkeleton.java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: RAPISOAPDOMSkeleton.xpt(checksum: «getProperty("RAPISOAPDOMSkeleton.xpt.checksum")»)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
«ENDDEFINE»


«DEFINE generateDispatch(List[String] imports) FOR EDLRAPIType-»
/**
 * Dispatches incoming SOAP/HTTP requests to the appropriate
 * service method.
 *
 * @param service     the service object implementing the method
 * @param xml         the XML element representing the method call
 * @param methodName  the method name as String
 * @return            the encoded return value
 * @generated
 */
public StringBuffer dispatch(Object service, Element xml, String methodName) throws SOAPException
«imports.addImport("org.w3c.dom.Element")-»
«imports.addImport("com.intershop.beehive.core.rapi.soap.SOAPException")-»
{
    «FOREACH getOperations() AS op-»
        if (methodName.equals("«op.name.unescape()»"))
        {
            return this.«op.name.unescape()»(service, xml, methodName);
        }
    «ENDFOREACH-»
    return super.dispatch(service, xml, methodName);
}
«ENDDEFINE»


«DEFINE generateOperation(List[String] imports) FOR EDLRAPIOperation-»
/**
 * This method represents a wrapper for the according business method
 * <code>«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()».«name.unescape()»</code>.
 *
 * <p>The implementation of this method maps incoming SOAP/HTTP
 * requests to the according business method of the specified
 * service object.<p>
 *
 * @param    service         the service object
 * @param    methodElement   the XML element representing the method call
 * @param    methodName      the method name as String
 * @return   the encoded return value of the method call
 * @throws   SOAPException   if a technical error occurs
 * @generated
 */
private StringBuffer «name.unescape()»(Object service, Element methodElement, String methodName) throws SOAPException
«imports.addImport("org.w3c.dom.Element")-»
«imports.addImport("com.intershop.beehive.core.rapi.soap.SOAPException")-»
{
    «IF parameters.size > 0-»
        //================================================================
        //decode arguments
        //================================================================
        «imports.addImport("com.intershop.beehive.foundation.xmlutil.XMLReader")-»
        XMLReader xmlreader = new XMLReader();
    «ENDIF-»
    
    «FOREACH parameters AS p-»
        «IF parameters.get(0) == p-»
            Element paramElement = this.getFirstArgument(methodElement);
        «ELSE-»
            paramElement = this.getNextArgument(paramElement);
        «ENDIF-»
        «imports.addImport(p.type.getClassName())-»
        «p.type.getClassName().getShortName()»«p.dimension.getArrayDimension()» p_«p.name.unescape()»;
        if (paramElement.getLocalName().equals("«p.name.unescape()»"))
        {
            «IF p.dimension.size > 0-»
                try
                {
                    p_«p.name.unescape()» = («p.type.getClassName().getShortName()»«p.dimension.getArrayDimension()») xmlreader.readObjectAsElement(paramElement);
                }
                catch (DecodeException dec)
                {
                    «imports.addImport("com.intershop.beehive.foundation.xmlutil.DecodeException")-»
                    throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): decoding of method argument '«p.name.unescape()»' failed",
                        SOAPException.FAULTCODE_CLIENT, dec);
                }
            «ELSEIF p.type.getClassName().isPrimitive()-»
                try
                {
                    p_«p.name.unescape()» = xmlreader.readPrimitive«p.type.getClassName().getShortName().toFirstUpper()»AsElement(paramElement);
                }
                catch (DecodeException dec)
                {
                    «imports.addImport("com.intershop.beehive.foundation.xmlutil.DecodeException")-»
                    throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): decoding of method argument '«p.name.unescape()»' failed",
                        SOAPException.FAULTCODE_CLIENT, dec);
                }
            «ELSEIF p.type.getClassName().startsWith("java.lang.") ||
                p.type.getClassName().startsWith("java.util.") ||
                p.type.getClassName().startsWith("java.math.")-»
                try
                {
                    p_«p.name.unescape()» = («p.type.getClassName().getShortName()») xmlreader.read«p.type.getClassName().getShortName()»AsElement(paramElement);
                }
                catch (DecodeException dec)
                {
                    «imports.addImport("com.intershop.beehive.foundation.xmlutil.DecodeException")-»
                    throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): decoding of method argument '«p.name.unescape()»' failed",
                        SOAPException.FAULTCODE_CLIENT, dec);
                }
            «ELSE-»
                try
                {
                    p_«p.name.unescape()» = («p.type.getClassName().getShortName()») xmlreader.readObjectAsElement(paramElement);
                }
                catch (DecodeException dec)
                {
                    «imports.addImport("com.intershop.beehive.foundation.xmlutil.DecodeException")-»
                    throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): decoding of method argument '«p.name.unescape()»' failed",
                        SOAPException.FAULTCODE_CLIENT, dec);
                }
            «ENDIF-»
        }
        else
        {
            throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): not supported parameter element <"+
                paramElement.getTagName() + "> encountered", SOAPException.FAULTCODE_CLIENT);
        }
    «ENDFOREACH-»

    //================================================================
    //cast service object
    //================================================================
    «imports.addImport(((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName())-»
    «((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()» myService = («((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()») service;

    //================================================================
    //invoke method and encode result
    //================================================================
    «imports.addImport("com.intershop.beehive.foundation.xmlutil.XMLWriter")-»
    «imports.addImport("java.io.StringWriter")-»
    «imports.addImport("java.io.PrintWriter")-»        
    StringWriter xmlResult = new StringWriter();
    XMLWriter out = new XMLWriter(new PrintWriter(xmlResult));

    «IF type.getClassName() == "void"-»
        try
        {
            myService.«name.unescape()»(
                «FOREACH parameters AS p SEPARATOR ", "-»
                    p_«p.name.unescape()»
                «ENDFOREACH-»
                );
            out.write("<result/>");
        }
        catch (Exception run)
        {
            // encapsulate thrown exceptions
            throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): exception occured during method invocation",
                SOAPException.FAULTCODE_SERVER, run);
        }
    «ELSE-»
        try
        {
            «imports.addImport(type.getClassName())-»
            «type.getClassName().getShortName()»«dimension.getArrayDimension()» result = myService.«name.unescape()»(
                «FOREACH parameters AS p SEPARATOR ", "-»
                    p_«p.name.unescape()»
                «ENDFOREACH-»
                );
            «IF type.getClassName().isPrimitive()-»
                    out.printAsElement("result", result, true);
                }
                catch (EncodeException ex)
                {
                    «imports.addImport("com.intershop.beehive.foundation.xmlutil.EncodeException")-»
                    throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): encoding of return value failed",
                        SOAPException.FAULTCODE_SERVER, ex);
                }
            «ELSEIF dimension.size > 0 ||
                type.getClassName().startsWith("java.lang.") ||
                type.getClassName().startsWith("java.util.") ||
                type.getClassName().startsWith("java.math.")-»
                    out.printAsElement("result", result, true);
                }
                catch(EncodeException ex)
                {
                    «imports.addImport("com.intershop.beehive.foundation.xmlutil.EncodeException")-»
                    throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): encoding of return value failed",
                        SOAPException.FAULTCODE_SERVER, ex);
                }
            «ELSE-»
                    out.printAsElement("result", result, true);
                }
                catch (EncodeException ex)
                {
                    «imports.addImport("com.intershop.beehive.foundation.xmlutil.EncodeException")-»
                    throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): encoding of return value failed",
                        SOAPException.FAULTCODE_SERVER, ex);
                }
            «ENDIF-»
        catch (Exception run)
        {
            // encapsulate thrown exceptions
            throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): exception occured during method invocation",
                SOAPException.FAULTCODE_SERVER, run);
        }
    «ENDIF-»

    //================================================================
    //check if encoding was successfull
    //================================================================

    if (out.checkError() == true)
    {
        throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): encoding of return value failed",
            SOAPException.FAULTCODE_SERVER);
    }

    //================================================================
    //return result
    //================================================================
        
    return xmlResult.getBuffer();
}
«ENDDEFINE»
