/*
 * Generates the source code for RAPI soap stubs with DOM encoding
 */

«IMPORT edl»
«EXTENSION util::EDLUtil»
«EXTENSION org::eclipse::xtend::util::stdlib::properties»


«DEFINE generateServiceStubs FOR EDLModel»
    «FOREACH eAllContents.typeSelect(EDLRAPIType).select(t | 
        t.modifiers.contains(EDLRAPITypeModifier::soap) &&
        !t.modifiers.contains(EDLRAPITypeModifier::binary)) AS t»
        «EXPAND generateServiceStub FOR t»
    «ENDFOREACH»
«ENDDEFINE»


«DEFINE generateServiceStub FOR EDLRAPIType-»
    «FILE getClassName().getServiceInterfaceName().replaceAll("\\.", "/") + "_SOAPStub.java"-»
    «EXPAND generateHeader FOR this-»
    «LET {} AS imports-»
package «getPackageName()»;

//PREPAREIMPORTS «getPackageName()»

/**
 * This class represents a stub implementation of <code>«getClassName().getServiceInterfaceName().getShortName()»</code>.
 * It enables clients to remotely access the service <code>«getClassName().getServiceInterfaceName().getShortName()»</code>.
 * Internally the stub maps method calls to corresponding SOAP/HTTP messages
 * sent to the implementing server.
 *
 * @generated
 */
public «modifiers.contains(EDLRAPITypeModifier::abstract) ? "abstract" : ""» class «getClassName().getServiceInterfaceName().getShortName()»_SOAPStub
«IF superClasses.typeSelect(EDLRAPIType).size == 0-»
    «imports.addImport("com.intershop.beehive.core.rapi.soap.SOAPStub")-»
    extends SOAPStub
«ELSE-»
    «imports.addImport(superClasses.typeSelect(EDLRAPIType).get(0).getClassName().getServiceInterfaceName() + "_SOAPStub")-»
    extends «superClasses.typeSelect(EDLRAPIType).get(0).getClassName().getServiceInterfaceName().getShortName()»_SOAPStub
«ENDIF-»
    implements «getClassName().getServiceInterfaceName().getShortName()»
{
    /**
     * XML namespace URI used to identify the body block
     * @generated
     */
    private static final String BODYBLOCK_NAMESPACE_URI = XMLConstants.ENFINITY_NAMESPACE + 
        "/«getPackageName().replaceAll("\\.", "/")»";
    «imports.addImport("com.intershop.beehive.foundation.xmlutil.XMLConstants")-»
    
    /**
     * Constructs a «getClassName().getServiceInterfaceName().getShortName()»_SOAPStub with the specified
     * connection properties like host name and user
     * credentials.
     *
     * @param   props   the properties for the URLConnection
     * @generated
     */
    public «getClassName().getServiceInterfaceName().getShortName()»_SOAPStub(ConnectionProperties props)
    {
        «imports.addImport("com.intershop.beehive.core.rapi.soap.ConnectionProperties")-»
        super(props);
    }
    «FOREACH getOperations() AS op-»
        «EXPAND generateOperation(imports) FOR op-»
    «ENDFOREACH-»
}
//ADDIMPORTS «FOREACH imports AS i SEPARATOR ", "»«i»«ENDFOREACH»
    «ENDLET-»
    «ENDFILE-»
«ENDDEFINE»


«DEFINE generateHeader FOR EDLRAPIType-»
// =============================================================================
// File: «name.unescape().getServiceInterfaceName()»_SOAPStub.java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: RAPISOAPDOMStub.xpt(checksum: «getProperty("RAPISOAPDOMStub.xpt.checksum")»)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
«ENDDEFINE»


«DEFINE generateOperation(List[String] imports) FOR EDLRAPIOperation-»
/**
 * This method represents a wrapper for the according business method
 * <code>«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()».«name.unescape()»</code>.
 *
 * The implementation of this method maps calls to corresponding SOAP/HTTP
 * messages causing the execution of the according business method at the
 * server.
 *
 * @generated
 */
public «type.getClassName().getShortName()»«dimension.getArrayDimension()» «name.unescape()»(
    «imports.addImport(type.getClassName())-»
    «FOREACH parameters AS p SEPARATOR ", "-»
        «imports.addImport(p.type.getClassName())-»
        «p.type.getClassName().getShortName()»«p.dimension.getArrayDimension()» «p.name.unescape()»
    «ENDFOREACH-»
    )
    throws
    «FOREACH exceptions.getClassName().union({"java.rmi.RemoteException"}) AS ex SEPARATOR ", "-»
        «imports.addImport(ex)-»
        «ex.getShortName()»
    «ENDFOREACH-»
{
    //=======================================================
    //encode arguments
    //=======================================================
    «imports.addImport("java.io.PrintWriter")-»
    «imports.addImport("java.io.StringWriter")-»
    «imports.addImport("com.intershop.beehive.foundation.xmlutil.XMLWriter")-»
    StringWriter xmlCall = new StringWriter();
    XMLWriter xmlwriter = new XMLWriter(new PrintWriter(xmlCall));
    xmlwriter.write("<");
    xmlwriter.write(XMLConstants.BODYBLOCK_PREFIX);
    xmlwriter.write(":«name.unescape()» xmlns:");
    xmlwriter.write(XMLConstants.BODYBLOCK_PREFIX);
    xmlwriter.write("=\"");
    xmlwriter.write(BODYBLOCK_NAMESPACE_URI);
    xmlwriter.write("\">");

    «IF parameters.size > 0-»
        try
        {
            «FOREACH parameters AS p-»
                «imports.addImport(p.type.getClassName())-»
                xmlwriter.printAsElement("«p.name.unescape()»", «p.name.unescape()», true);
            «ENDFOREACH-»
        }
        catch (EncodeException ex)
        {
            «imports.addImport("com.intershop.beehive.foundation.xmlutil.EncodeException")-»
            «imports.addImport("com.intershop.beehive.core.rapi.soap.SOAPException")-»
            throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»: encoding of arguments failed",
                SOAPException.FAULTCODE_CLIENT, ex);
        }
    «ENDIF-»

    xmlwriter.write("</");
    xmlwriter.write(XMLConstants.BODYBLOCK_PREFIX);
    xmlwriter.write(":«name.unescape()»>");

    //=======================================================
    //dispatch method call
    //=======================================================
    
       «imports.addImport("java.net.URLConnection")-»
    URLConnection soapConnection = this.dispatchMethodCall(
        «((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()».SERVICE_NAME,
        xmlCall.getBuffer());

    //=======================================================
    //get payload from SOAPResponse
    //=======================================================
    
    «imports.addImport("org.w3c.dom.Element")-»
    Element payload = this.getPayload(soapConnection);

    //=======================================================
    //get result element from payload
    //=======================================================

    «IF type.getClassName() == "void"-»
        try
        {
            this.getResultElement(payload);
    «ELSE-»
        Element resultElement = null;
        try
        {
            resultElement = this.getResultElement(payload);
    «ENDIF-»
    }
    catch (Exception ex)
    {
        «FOREACH exceptions AS ex-»
            if (ex instanceof «ex.getClassName().getShortName()»)
            {
                throw («ex.getClassName().getShortName()») ex;
            }
        «ENDFOREACH-»
        if (ex instanceof RemoteException)
        {
            throw (RemoteException) ex;
        }
        else
        {
            «imports.addImport("com.intershop.beehive.core.rapi.soap.SOAPException")-»
            throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»: decoding of SOAP response message failed",
                SOAPException.FAULTCODE_CLIENT, ex);
        }
    }
    
    «IF type.getClassName() != "void"-»
        //=======================================================
        //decode result
        //=======================================================

        try
        {
            «imports.addImport("com.intershop.beehive.foundation.xmlutil.XMLReader")-»
            XMLReader reader = new XMLReader();
            «IF dimension.size > 0-»
                return («type.getClassName().getShortName()»«dimension.getArrayDimension()») reader.readObjectAsElement(resultElement);
            «ELSEIF type.getClassName().isPrimitive()-»
                return reader.readPrimitive«type.getClassName().getShortName().toFirstUpper()»AsElement(resultElement);
            «ELSEIF type.getClassName().startsWith("java.lang.")-»
                return reader.read«type.getClassName().getShortName()»AsElement(resultElement);
            «ELSEIF type.getClassName() == "java.math.BigDecimal"-»
                return reader.readBigDecimalAsElement(resultElement);
            «ELSEIF type.getClassName() == "java.util.Date"-»
                return reader.readDateAsElement(resultElement);
            «ELSE-»
                return («type.getClassName().getShortName()») reader.readObjectAsElement(resultElement);
            «ENDIF-»
        }
        catch (DecodeException ex)
        {
            «imports.addImport("com.intershop.beehive.foundation.xmlutil.DecodeException")-»
            «imports.addImport("com.intershop.beehive.core.rapi.soap.SOAPException")-»
            throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»: decoding of return value failed",
                SOAPException.FAULTCODE_CLIENT, ex);
        }
    «ENDIF-»
}
«ENDDEFINE»
