/*
 * Generates the source code for RAPI soap skeletons with binary encoding
 */

«IMPORT edl»
«EXTENSION util::EDLUtil»
«EXTENSION org::eclipse::xtend::util::stdlib::properties»


«DEFINE generateServiceSkeletons FOR EDLModel»
    «FOREACH eAllContents.typeSelect(EDLRAPIType).select(t | 
        t.modifiers.contains(EDLRAPITypeModifier::soap) && 
        t.modifiers.contains(EDLRAPITypeModifier::binary)) AS t»
        «EXPAND generateServiceSkeleton FOR t»
    «ENDFOREACH»
«ENDDEFINE»


«DEFINE generateServiceSkeleton FOR EDLRAPIType-»
    «FILE getClassName().getServiceInterfaceName().replaceAll("\\.", "/") + "_SOAPSkeleton.java"-»
    «EXPAND generateHeader FOR this-»
    «LET {} AS imports-»
package «getPackageName()»;

//PREPAREIMPORTS «getPackageName()»

/**
 * This class represents a skeleton implementation of <code>«getClassName().getServiceInterfaceName().getShortName()»</code>.
 * Skeletons are used at the server-side to map SOAP/HTTP requests to method
 * invocations of the corresponding service. They decode method parameters,
 * invoke the method and encode the return value. 
 *
 * @generated 
 */
public «modifiers.contains(EDLRAPITypeModifier::abstract) ? "abstract" : ""» class «getClassName().getServiceInterfaceName().getShortName()»_SOAPSkeleton
«IF superClasses.typeSelect(EDLRAPIType).size == 0-»
    «imports.addImport("com.intershop.beehive.core.internal.soap.SOAPSkeleton")-»
    extends SOAPSkeleton
«ELSE-»
    «imports.addImport(superClasses.typeSelect(EDLRAPIType).get(0).getClassName().getServiceInterfaceName() + "_SOAPSkeleton")-»    
    extends «superClasses.typeSelect(EDLRAPIType).get(0).getClassName().getServiceInterfaceName().getShortName()»_SOAPSkeleton
«ENDIF-»
{
    «EXPAND generateDispatch(imports) FOR this-»
    «FOREACH getOperations() AS op-»
        «EXPAND generateOperation(imports) FOR op-»
    «ENDFOREACH-»
}
//ADDIMPORTS «FOREACH imports AS i SEPARATOR ", "»«i»«ENDFOREACH»
    «ENDLET-»
    «ENDFILE-»
«ENDDEFINE»


«DEFINE generateHeader FOR EDLRAPIType-»
// =============================================================================
// File: «name.unescape().getServiceInterfaceName()»_SOAPSkeleton.java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: RAPISOAPBinarySkeleton.xpt(checksum: «getProperty("RAPISOAPBinarySkeleton.xpt.checksum")»)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
«ENDDEFINE»


«DEFINE generateDispatch(List[String] imports) FOR EDLRAPIType-»
/**
 * Dispatches incoming SOAP/HTTP requests to the appropriate
 * service method.
 *
 * @param service     the service object implementing the method
 * @param xml         the XML element representing the method call
 * @param methodName  the method name as String
 * @return            the encoded return value
 *
 * @generated
 */
public StringBuffer dispatch(Object service, Element xml, String methodName) throws SOAPException
«imports.addImport("org.w3c.dom.Element")-»
«imports.addImport("com.intershop.beehive.core.rapi.soap.SOAPException")-»
{
    «FOREACH getOperations() AS op-»
        if (methodName.equals("«op.name.unescape()»"))
        {
            return this.«op.name.unescape()»(service, xml, methodName);
        }
    «ENDFOREACH-»

    return super.dispatch(service, xml, methodName);
}
«ENDDEFINE»


«DEFINE generateOperation(List[String] imports) FOR EDLRAPIOperation-»
/**
 * This method represents a wrapper for the according business method
 * <code>«((EDLRAPIType) this.eContainer).getClassName().getServiceInterfaceName().getShortName()».«name.unescape()»</code>.
 *
 * <p>The implementation of this method maps incoming SOAP/HTTP
 * requests to the according business method of the specified
 * service object.<p>
 *
 * @param    service         the service object
 * @param    methodElement   the XML element representing the method call
 * @param    methodName      the method name as String
 * @return   the encoded return value of the method call
 * @throws   SOAPException   if a technical error occurs
 * @generated
 */
private StringBuffer «name.unescape()»(Object service, Element methodElement, String methodName) throws SOAPException
«imports.addImport("org.w3c.dom.Element")-»
«imports.addImport("com.intershop.beehive.core.rapi.soap.SOAPException")-»
{
    «IF parameters.size > 0-»
        //================================================================
        //decode arguments
        //================================================================
        
    «ENDIF-»
    «FOREACH parameters AS p-»
        «IF parameters.get(0) == p-»
            Element paramElement = this.getFirstArgument(methodElement);
        «ELSE-»
            paramElement = this.getNextArgument(paramElement);
        «ENDIF-»

        «imports.addImport(p.type.getClassName())-»
        «p.type.getClassName().getShortName()»«p.dimension.getArrayDimension()» p_«p.name.unescape()»;
        if (paramElement.getLocalName().equals("«p.name.unescape()»"))
        {
            try
            {
                byte[] param;
                paramElement.normalize();
                «imports.addImport("org.w3c.dom.Node")-»
                Node child = paramElement.getFirstChild();
                if ((child != null) && (child.getNodeType() == Node.TEXT_NODE))
                {
                    param = Base64.decode(child.getNodeValue());
                    «imports.addImport("com.intershop.beehive.foundation.util.Base64")-»
                }
                else
                {
                    throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): decoding of parameter '«p.name.unescape()»' failed - malformed XML representation",
                                            SOAPException.FAULTCODE_CLIENT);
                }
                «imports.addImport("java.io.ByteArrayInputStream")-»
                «imports.addImport("java.io.ObjectInputStream")-»
                ByteArrayInputStream byteStream = new ByteArrayInputStream(param);
                ObjectInputStream objectStream = new ObjectInputStream(byteStream);
                
                «IF p.type.getClassName().isPrimitive() && p.dimension.size == 0-»
                    p_«p.name.unescape()» = («p.type.getClassName().getShortName()») objectStream.read«p.type.getClassName().getShortName().toFirstUpper()»();
                «ELSE-»
                    p_«p.name.unescape()» = («p.type.getClassName().getShortName()»«p.dimension.getArrayDimension()») objectStream.readObject();
                «ENDIF-»
            }
            catch (IOException ex)
            {
                «imports.addImport("java.io.IOException")-»
                throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): decoding of parameter '«p.name.unescape()»' failed",
                    SOAPException.FAULTCODE_CLIENT, ex);
            }
            «IF !p.type.getClassName().isPrimitive()-»
                catch (ClassNotFoundException ex)
                {
                    throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): decoding of parameter '«p.name.unescape()»' failed",
                        SOAPException.FAULTCODE_CLIENT, ex);
                }
            «ENDIF-»
        }
        else
        {
            throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): not supported parameter element <"+
                                    paramElement.getTagName()+
                                    "> encountered", SOAPException.FAULTCODE_CLIENT);
        }
    «ENDFOREACH-»

    //================================================================
    //cast service object
    //================================================================

    «((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()» myService = («((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()») service;

    //================================================================
    //invoke method and encode result
    //================================================================

    StringBuffer encodedResult = new StringBuffer();
    «IF type.getClassName() == "void"-»
        try
        {
            myService.«name.unescape()»(
            «FOREACH parameters AS p SEPARATOR ", "-»
                p_«p.name.unescape()»
            «ENDFOREACH-»
            );
            encodedResult.append("<result/>");
        }
        catch (Exception run)
        {
            //encapsulate thrown exceptions
            throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): exception occured during method invocation",
                                    SOAPException.FAULTCODE_SERVER, run);
        }
    «ELSE-»
        «imports.addImport(type.getClassName())-»
        «type.getClassName().getShortName()»«dimension.getArrayDimension()» returnValue;
        try
        {
            returnValue = myService.«name.unescape()»(
            «FOREACH parameters AS p SEPARATOR ", "-»
                p_«p.name.unescape()»
            «ENDFOREACH-»
            );
        }
        catch (Exception run)
        {
            //encapsulate thrown exceptions
            throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): exception occured during method invocation",
                                    SOAPException.FAULTCODE_SERVER, run);
        }
            
        try
        {
            «imports.addImport("java.io.ByteArrayOutputStream")-»
            «imports.addImport("java.io.ObjectOutputStream")-»
            «imports.addImport("com.intershop.beehive.foundation.xmlutil.XMLConstants")-»
            ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
            ObjectOutputStream objectStream = new ObjectOutputStream(byteStream);
            «IF type.getClassName().isPrimitive() && dimension.size == 0-»
            objectStream.write«type.getClassName().getShortName().toFirstUpper()»(returnValue);
            «ELSE-»
            objectStream.writeObject(returnValue);
            «ENDIF-»
            objectStream.flush();
            byte[] byteArray = byteStream.toByteArray();
            encodedResult.append("<result xsi:type=\"");
            encodedResult.append(XMLConstants.SOAP_ENCODING_PREFIX);
            encodedResult.append(":base64\">");
            if (byteArray.length > 0)
            {
                encodedResult.append(Base64.encode(byteArray));
                «imports.addImport("com.intershop.beehive.foundation.util.Base64")-»
            }
            encodedResult.append("</result>");
        }
        catch (IOException ex)
        {
            «imports.addImport("java.io.IOException")-»
            throw new SOAPException("«((EDLRAPIType) eContainer).getClassName().getServiceInterfaceName().getShortName()»::«name.unescape()»(): encoding response message failed",
                                    SOAPException.FAULTCODE_SERVER, ex);
        }
    «ENDIF-»

    //================================================================
    //return response message
    //================================================================
    return encodedResult;
}
«ENDDEFINE»
