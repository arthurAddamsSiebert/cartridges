/*
 * Generates the source code for ORM Alternate Key classes
 */

«IMPORT edl»
«EXTENSION util::EDLUtil»
«EXTENSION org::eclipse::xtend::util::stdlib::properties»


«DEFINE generateAlternateKeys FOR EDLModel»
    «FOREACH this.eAllContents.typeSelect(EDLORMType).select(t | 
        (t.alternateKey != null) || (t.getAllSuperClasses().exists(s | s.alternateKey != null))) AS t»
        «EXPAND generateAlternateKey FOR t»
    «ENDFOREACH»
«ENDDEFINE»


«DEFINE generateAlternateKey FOR EDLORMType-»
    «FILE getClassName().replaceAll("\\.", "/") + "AlternateKey.java"-»
    «EXPAND generateHeader FOR this-»
    «LET {} AS imports-»
package «getPackageName()»;

//PREPAREIMPORTS «getPackageName()»

/**
 * This class represents the alternate key for objects of type «name.unescape()».
 * The key objects can be used for lookup operations in the database.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @generated
 */
public class «name.unescape()»AlternateKey extends
«IF getAllSuperClasses().exists(s | s.alternateKey != null)»«imports.addImport(superClass.getClassName() + "AlternateKey")»«superClass.name.unescape()»AlternateKey
«ELSE»«imports.addImport("com.intershop.beehive.orm.capi.common.ORMObjectAlternateKey")»ORMObjectAlternateKey«ENDIF-»
{
    /**
     * Serialization version to make compiler happy.
     *
     * @generated
     */
    private static final long serialVersionUID = 1L;

    «IF alternateKey != null-»
        «FOREACH getAllAlternateKeyAttributes() AS key-»
            «EXPAND generateAlternateKeyAttribute(imports) FOR key-»
        «ENDFOREACH-»
    «ENDIF-»

    /**
     * Creates an empty alternate key. After creation of a new key object
     * you must call the corresponding set<i>Attribute</i> method(s) to 
     * set the value(s) of the alternate key.
     *
     * @generated
     */
    public «name.unescape()»AlternateKey()
    {
    }
    
    /**
     * Creates an alternate key with the specified value(s).
     *
     * @generated
     */
    public «name.unescape()»AlternateKey(
        «FOREACH getAllAlternateKeyAttributes() AS key SEPARATOR ", "-»
            «imports.addImport(key.type.getClassName())-»
            «key.type.getClassName().getShortName()» «key.name.unescape()»
        «ENDFOREACH-»
        )
    {
    «IF alternateKey == null-»
        super(
        «FOREACH superClass.getAllAlternateKeyAttributes() AS key SEPARATOR ", "-»
            «key.name.unescape()»
        «ENDFOREACH-»
        );
    «ELSE-»
        «FOREACH getAllAlternateKeyAttributes() AS key-»
            this.«key.name.unescape()» = «key.name.unescape()»;
        «ENDFOREACH-»
    «ENDIF-»
    }
    
    «IF alternateKey != null-»
        «FOREACH getAllAlternateKeyAttributes() AS key-»
            «EXPAND generateGetter(imports) FOR key-»
            «EXPAND generateSetter(imports) FOR key-»
        «ENDFOREACH-»
        
        «EXPAND generateIsNullKey(imports) FOR this-»
        «EXPAND generateHashCode(imports) FOR this-»
        «EXPAND generateEquals(imports) FOR this-»
        «EXPAND generateToString(imports) FOR this-»
    «ENDIF-»
}
//ADDIMPORTS «FOREACH imports AS i SEPARATOR ", "»«i»«ENDFOREACH»
    «ENDLET-»
    «ENDFILE-»
«ENDDEFINE»


«DEFINE generateHeader FOR EDLORMType-»
// =============================================================================
// File: «name.unescape()»AlternateKey.java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: ORMAlternateKey.xpt(checksum: «getProperty("ORMAlternateKey.xpt.checksum")»)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
«ENDDEFINE»


«DEFINE generateAlternateKeyAttribute(List[String] imports) FOR EDLORMAttribute-»
/**
 * An alternate key attribute.
 *
 * @generated
 */
private «type.getClassName().getShortName()» «name.unescape()»;
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateGetter(List[String] imports) FOR EDLORMAttribute-»
/**
 * Returns the alternate key attribute.
 *
 * @return      the value of the alternate key attribute
 * @generated
 */
public «type.getClassName().getShortName()» get«name.unescape().toFirstUpper()»()
{
    return «name.unescape()»;
}
«ENDDEFINE»


«DEFINE generateSetter(List[String] imports) FOR EDLORMAttribute-»
/**
 * Sets the alternate key attribute.
 *
 * @param       value   the attribute value
 * @generated
 */
public void set«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» value)
{
    this.«name.unescape()» = value;
}
«ENDDEFINE»


«DEFINE generateIsNullKey(List[String] imports) FOR EDLORMType-»
/**
 * Checks if the key is a null key, e.g. all alternate key attributes are still set
 * to null. Such keys are ambiguous and can therefore not be used for lookup
 * operations.
 *
 * @generated
 */
@Override
public boolean isNullKey()
{
    «IF getAllAlternateKeyNonPrimitiveAttributes().isEmpty-»
        return false;
    «ELSE-»
        return
        «FOREACH getAllAlternateKeyNonPrimitiveAttributes() AS key SEPARATOR " && "-»
            («key.name.unescape()» == null)
        «ENDFOREACH-»;
    «ENDIF-»
}
«ENDDEFINE»


«DEFINE generateHashCode(List[String] imports) FOR EDLORMType-»
/**
 * Returns the hashcode of the alternate key object.
 *
 * @return      the hashcode
 * @generated
 */
public int hashCode()
{
    int hash = 0;

    «FOREACH getAllAlternateKeyAttributes() AS key-»
        «IF key.type.getClassName() == "boolean"-»
    hash ^= «key.name.unescape()» ? 0 : 1; 
        «ELSEIF key.type.getClassName().contains(".")-»
    if («key.name.unescape()» != null)
    {
        hash ^= «key.name.unescape()».hashCode();
    }
        «ELSE-»
    hash ^= (int) «key.name.unescape()»;
        «ENDIF-»
    «ENDFOREACH-»
        
    return hash;
}
«ENDDEFINE»


«DEFINE generateEquals(List[String] imports) FOR EDLORMType-»
/**
 * Compares an object with this alternate key object.
 *
 * @return      true, if the other object is an alternate key object of the same type and
                all key attributes are equal
 * @generated
 */
public boolean equals(Object anObject)
{
    if (this == anObject) 
    { 
        return true; 
    }
     
    if (isNullKey())
    {
        return false;
    }
     
    if (anObject != null) 
    { 
        if (anObject instanceof «name.unescape()»AlternateKey)
        {
            «name.unescape()»AlternateKey that = («name.unescape()»AlternateKey) anObject;
            
            «FOREACH getAllAlternateKeyAttributes() AS key-»
                «IF key.type.getClassName().contains(".")-»
                if ((«key.name.unescape()» != null) && !«key.name.unescape()».equals(that.«key.name.unescape()»))
                {
                    return false;
                }
                if ((«key.name.unescape()» == null) && (that.«key.name.unescape()» != null))
                {
                    return false;
                }
                «ELSE-»
                if («key.name.unescape()» != that.«key.name.unescape()»)
                {
                    return false;
                }
                «ENDIF-»
            «ENDFOREACH-»

            return true;
        }
    } 
 
    return false;
}
«ENDDEFINE»


«DEFINE generateToString(List[String] imports) FOR EDLORMType-»
/**
 * Returns a string representation of this key object.
 *
 * @return      a string containing the key attributes
 * @generated
 */
public String toString()
{
    StringBuilder buf = new StringBuilder("«getClassName()»AlternateKey[");
    
    «FOREACH getAllAlternateKeyAttributes() AS key SEPARATOR "buf.append(\", \");"-»
    buf.append(«key.name.unescape()»);
    «ENDFOREACH-»
    buf.append("]");
    
    return buf.toString();
}
«ENDDEFINE»
