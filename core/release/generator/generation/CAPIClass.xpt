/*
 * Generates the source code for CAPI classes
 */

«IMPORT edl»
«EXTENSION util::EDLUtil»
«EXTENSION org::eclipse::xtend::util::stdlib::properties»


«DEFINE generateClasses FOR EDLModel-»
    «FOREACH eAllContents.typeSelect(EDLCAPIClass).select(c |
        c.getClassName() != "com.intershop.beehive.core.capi.common.ManagerImpl" &&
        !c.isSubClass("com.intershop.beehive.core.capi.common.ManagerImpl")) AS c»
        «EXPAND generateClass FOR c»
    «ENDFOREACH»
«ENDDEFINE»


«DEFINE generateClass FOR EDLCAPIClass-»
«FILE getClassName().replaceAll("\\.", "/") + ".java"-»
«LET {} AS imports-»
«EXPAND generateHeader FOR this-»
package «getPackageName()»;

//PREPAREIMPORTS «getPackageName()»
//{{ imports
// insert your imports here
//}} imports

/**
 * This class implements the methods for «name.unescape()»
 * as defined in the object model.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @generated 
 */
public «modifiers.contains(EDLCAPIClassModifier::abstract) ? "abstract" : ""» class «name.unescape()»
«IF superClass != null-»
    extends «superClass.getClassName().getShortName()»
    «imports.addImport(superClass.getClassName())-»
«ENDIF-»
    implements
«FOREACH interfaces.getClassName().union({"java.io.Serializable"}) AS i SEPARATOR ", "-»
    «i.getShortName()-»
    «imports.addImport(i)-»
«ENDFOREACH-»
{
    //{{ attributes
    // insert your attributes here
    //}} attributes
    «FOREACH getConstants() AS c-»
        «EXPAND generateConstant(imports) FOR c-»
    «ENDFOREACH-»

    «FOREACH getAttributes() AS att-»
        «EXPAND generateAttributeDeclaration(imports) FOR att-»
    «ENDFOREACH-»

    «FOREACH getRelations() AS rel-»
        «IF rel.cardinality == EDLCAPIRelationCardinality::oneToOne || rel.cardinality == EDLCAPIRelationCardinality::zeroToOne-»
            «EXPAND generateRelationDeclarationOne(imports) FOR rel-»
        «ELSEIF rel.cardinality == EDLCAPIRelationCardinality::zeroToMany-»
            «EXPAND generateRelationDeclarationMany(imports) FOR rel-»
        «ENDIF-»
    «ENDFOREACH-»

    «EXPAND generateConstructor(imports) FOR this-»

    «FOREACH getAttributes() AS att-»
        «EXPAND generateSetAttribute(imports) FOR att-»
        «IF att.type.getClassName() == "boolean"-»
            «EXPAND generateIsAttributeBoolean(imports) FOR att-»
        «ELSE-»
            «EXPAND generateGetAttribute(imports) FOR att-»        
        «ENDIF-»
    «ENDFOREACH-»

    «FOREACH getRelations() AS rel-»
        «IF rel.cardinality == EDLCAPIRelationCardinality::oneToOne || rel.cardinality == EDLCAPIRelationCardinality::zeroToOne-»
            «EXPAND generateSetRelation(imports) FOR rel-»
            «EXPAND generateGetRelation(imports) FOR rel-»
        «ELSEIF rel.cardinality == EDLCAPIRelationCardinality::zeroToMany-»
            «EXPAND generateAddToRelation(imports) FOR rel-»
            «EXPAND generateRemoveFromRelation(imports) FOR rel-»
            «EXPAND generateGetRelationEnumeration(imports) FOR rel-»
            «EXPAND generateGetRelationCount(imports) FOR rel-»
        «ENDIF-»
    «ENDFOREACH-»
    //{{ methods
    // insert your methods here
    //}} methods
}
//ADDIMPORTS «FOREACH imports AS i SEPARATOR ", "»«i»«ENDFOREACH» 
«ENDLET-»
«ENDFILE-»
«ENDDEFINE»


«DEFINE generateHeader FOR EDLCAPIClass-»
// =============================================================================
// File: «name.unescape()».java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: CAPIClass.xpt(checksum: «getProperty("CAPIClass.xpt.checksum")»)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
«ENDDEFINE»


«DEFINE generateConstant(List[String] imports) FOR EDLCAPIConstant-»
/**
 * A constant.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @generated
 */  
 public static final «type.getClassName().getShortName()» «name.unescape()» = «IF "char" != type.getClassName()»«defaultValue.getValue()»;«ELSE»'«((EDLStringLiteral)defaultValue).value»';«ENDIF-» 
 «imports.addImport(type.getClassName())-» 
«ENDDEFINE»


«DEFINE generateAttributeDeclaration(List[String] imports) FOR EDLCAPIClassAttribute-»
/**
 * The attribute «name.unescape()».
 * @generated
 */
private «type.getClassName().getShortName()» «name.unescape()»«IF defaultValue != null-» = «defaultValue.getValue()»«ENDIF-»;
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateRelationDeclarationOne(List[String] imports) FOR EDLCAPIRelation-»
/**
 * The relation «name.unescape()».
 * @generated
 */
private «type.getClassName().getShortName()» «name.unescape()»;
«imports.addImport(type.getClassName())-»
«ENDDEFINE»

    
«DEFINE generateRelationDeclarationMany(List[String] imports) FOR EDLCAPIRelation-»
/**
 * The collection for the relation «name.unescape()».
 * @generated
 */
private Vector «name.unescape()»;
«imports.addImport("java.util.Vector")-»
«ENDDEFINE»


«DEFINE generateConstructor(List[String] imports) FOR EDLCAPIClass-»
/**
 * The constructor.
 * @generated
 */
public «name.unescape()»()
{
    «FOREACH getRelations() AS rel-»
        «IF rel.cardinality == EDLCAPIRelationCardinality::zeroToMany-»
            «rel.name.unescape()» = new Vector();
        «ENDIF-»
    «ENDFOREACH-»
}
«ENDDEFINE»


«DEFINE generateSetAttribute(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Sets the value of the attribute '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       «name.unescape()»    the value of the attribute
 * @generated
 */
public void set«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» «name.unescape()»)
«imports.addImport(type.getClassName())-»
{
    this.«name.unescape()» = «name.unescape()»;
}
«ENDDEFINE»


«DEFINE generateIsAttributeBoolean(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Returns the value of the flag '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the value of the flag
 * @generated
 */
public «type.getClassName().getShortName()» is«name.unescape().toFirstUpper()»()
«imports.addImport(type.getClassName())-»
{
    return «name.unescape()»;
}
«ENDDEFINE»


«DEFINE generateGetAttribute(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Returns the value of the attribute '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the value of the attribute
 * @generated
 */
public «type.getClassName().getShortName()» get«name.unescape().toFirstUpper()»()
«imports.addImport(type.getClassName())-»
{
    return «name.unescape()»;
}
«ENDDEFINE»


«DEFINE generateSetRelation(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Sets the value of the relation '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       «name.unescape()»      the value of the relation
 * @generated
 */
public void set«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» «name.unescape()»)
«imports.addImport(type.getClassName())-»
{
    this.«name.unescape()» = «name.unescape()»;
}
«ENDDEFINE»

«DEFINE generateGetRelation(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Returns the value of the relation '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the value of the relation
 * @generated
 */
public «type.getClassName().getShortName()» get«name.unescape().toFirstUpper()»()
«imports.addImport(type.getClassName())-»
{
    return «name.unescape()»;
}
«ENDDEFINE»


«DEFINE generateAddToRelation(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Adds a value to the relation '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       value   the value to be added
 * @generated
 */
public void addTo«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» value)
«imports.addImport(type.getClassName())-»
{
    «name.unescape()».addElement(value);
}
«ENDDEFINE»

«DEFINE generateRemoveFromRelation(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Removes a value from the relation '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       value   the value to be removed
 * @generated
 */
public void removeFrom«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» value)
«imports.addImport(type.getClassName())-»
{
    «name.unescape()».removeElement(value);
}
«ENDDEFINE»


«DEFINE generateGetRelationEnumeration(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Returns all elements of the relation '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the enumeration of values of type "«type.getClassName().getShortName()»"
 * @generated
 */
public Enumeration get«name.unescape().toFirstUpper()»()
«imports.addImport("java.util.Enumeration")-»
{
    return «name.unescape()».elements();
}
«ENDDEFINE»


«DEFINE generateGetRelationCount(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Returns the number of elements for the relation '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the number of elements
 * @generated
 */
public int get«name.unescape().toFirstUpper()»Count()
{
    return «name.unescape()».size();
}
«ENDDEFINE»
