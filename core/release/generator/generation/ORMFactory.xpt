/*
 * Generates the source code for ORM Factory classes
 */
«IMPORT edl»
«EXTENSION util::EDLUtil»
«EXTENSION org::eclipse::xtend::util::stdlib::properties»


«DEFINE generateFactories FOR EDLModel»
    «FOREACH eAllContents.typeSelect(EDLORMType) AS t»
        «EXPAND generateFactory FOR t»
    «ENDFOREACH»
«ENDDEFINE»


«DEFINE generateFactory FOR EDLORMType-»
    «FILE getClassName().replaceAll("\\.", "/") + "Factory.java"-»
    «EXPAND generateHeader FOR this-»
    «LET {} AS imports-»
package «getPackageName()»;

//PREPAREIMPORTS «getPackageName()»
«imports.addImport("com.intershop.beehive.core.capi.common.FinderException")-»
//{{ imports
// insert your imports here
//}} imports

/**
 * This class provides life cycle management methods for the class 
 * «name.unescape()».
 *
 * @see «getClassName()»
 * @generated
 */
public class «name.unescape()»Factory extends Factory
«imports.addImport("com.intershop.beehive.core.capi.common.Factory")-»
    //{{ parents
    // insert your implemented interfaces here
    //}} parents
{
    /**
     * The name which can be used to lookup a factory from the naming manager.
     * @deprecated  use "NamingMgr.getInstance().lookupFactory(«name.unescape()».class)" instead
     * @generated
     */
    public static final String FACTORY_NAME = "«getClassName()»";

    «EXPAND generateConstructor(imports) FOR this-»
    
    «IF !isAbstract()-»
        «EXPAND generateCreate(imports) FOR this-»
        
        «IF (isSubClass("com.intershop.beehive.core.capi.domain.PersistentObjectPO") &&
            (getClassName() != "com.intershop.beehive.core.internal.domain.DomainPO"))-»
            «EXPAND generateCreateDomain(imports) FOR this-»
        «ENDIF-»
        
        «EXPAND generateRemove(imports) FOR this-»
    «ENDIF-»
    
    «EXPAND generateFindByPrimaryKey(imports) FOR this-»
    «EXPAND generateGetObjectByPrimaryKey(imports) FOR this-»   
    «EXPAND generateFindByPrimaryKeyFindMode(imports) FOR this-»
    «EXPAND generateGetObjectByPrimaryKeyFindMode(imports) FOR this-»
    
    «IF (alternateKey != null) || getAllSuperClasses().exists(s | s.alternateKey != null)-»
        «EXPAND generateGetObjectByAlternateKey(imports) FOR this-»
        «EXPAND generateGetObjectByAlternateKeyFindMode(imports) FOR this-»
    «ENDIF-»
    
    «FOREACH getAllAttributes().select(a | a.modifiers.contains(EDLORMAttributeModifier::searchable)) AS att-»
        «EXPAND generateFindByAttribute(this, imports) FOR att-»
        «EXPAND generateGetObjectsByAttribute(this, imports) FOR att-»
        «EXPAND generateGetObjectsByAttributeCacheMode(this, imports) FOR att-»
    «ENDFOREACH-»
    
    //{{ methods
    // insert your methods here
    //}} methods
}
//ADDIMPORTS «FOREACH imports AS i SEPARATOR ", "»«i»«ENDFOREACH»
«ENDLET-»
    «ENDFILE-»
«ENDDEFINE»


«DEFINE generateHeader FOR EDLORMType-»
// =============================================================================
// File: «name.unescape()»Factory.java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: ORMFactory.xpt(checksum: «getProperty("ORMFactory.xpt.checksum")»)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
«ENDDEFINE»



«DEFINE generateConstructor(List[String] imports) FOR EDLORMType-»
/**
 * The constructor.
 *
 * @generated
 */
public «name.unescape()»Factory(ORMEngine engine, ClassDescription classDescription)
{
«imports.addImport("com.intershop.beehive.orm.capi.engine.ORMEngine")-»
«imports.addImport("com.intershop.beehive.orm.capi.description.ClassDescription")-»
        super(engine, classDescription);

«FOREACH getAttributes().reject(a | a.isLocalized() || a.isMapped()) AS att-»
    «IF att.type.getClassName() == "boolean"-»
        «name.unescape()».«att.name.unescape()»FlagAttribute = classDescription.getAttributeDescription("«att.name.unescape()»Flag");
    «ELSEIF att.type.getClassName() == "com.intershop.beehive.foundation.quantity.ExchangeRate"-»
        «name.unescape()».«att.name.unescape()»Attribute = classDescription.getAttributeDescription("«att.name.unescape()»");
    «ELSEIF att.type.getClassName() == "com.intershop.beehive.foundation.quantity.Money"-»
        «name.unescape()».«att.name.unescape()»CodeAttribute = classDescription.getAttributeDescription("«att.name.unescape()»Code");
        «name.unescape()».«att.name.unescape()»ValueAttribute = classDescription.getAttributeDescription("«att.name.unescape()»Value");
    «ELSEIF att.type.getClassName() == "com.intershop.beehive.foundation.quantity.Quantity"-»
        «name.unescape()».«att.name.unescape()»UnitAttribute = classDescription.getAttributeDescription("«att.name.unescape()»Unit");
        «name.unescape()».«att.name.unescape()»ValueAttribute = classDescription.getAttributeDescription("«att.name.unescape()»Value");
    «ELSEIF att.type.getClassName() == "com.intershop.beehive.core.capi.user.User"-»
        «name.unescape()».«att.name.unescape()»IDAttribute = classDescription.getAttributeDescription("«att.name.unescape()»ID");
    «ELSEIF att.type.getClassName() == "com.intershop.beehive.xcs.common.ProductRef"-»
        «name.unescape()».«att.name.unescape()»ProductSKUAttribute = classDescription.getAttributeDescription("«att.name.unescape()»ProductSKU");
        «name.unescape()».«att.name.unescape()»DomainNameAttribute = classDescription.getAttributeDescription("«att.name.unescape()»DomainName");
    «ELSE-»
        «name.unescape()».«att.name.unescape()»Attribute = classDescription.getAttributeDescription("«att.name.unescape()»");
    «ENDIF-»
«ENDFOREACH-»
«IF modifiers.contains(EDLORMTypeModifier::oca)-»
        «name.unescape()».ocaAttribute = classDescription.getAttributeDescription("oca");
«ENDIF-»
«IF modifiers.contains(EDLORMTypeModifier::timestamp)-»
        «name.unescape()».lastModifiedAttribute = classDescription.getAttributeDescription("lastModified");
«ENDIF-»

«FOREACH getRelations() AS rel-»
    «name.unescape()».«rel.name.unescape()»Relation = classDescription.getRelationDescription("«rel.name.unescape()»");
«ENDFOREACH-»

«IF !isAbstract() && isImplementor("com.intershop.beehive.core.capi.security.AuthorizationObject")-»
    «name.unescape()».roleAssignmentsRelation = classDescription.getRelationDescription("roleAssignments");
«ENDIF-»
}
«ENDDEFINE»
 
 
«DEFINE generateCreate(List[String] imports) FOR EDLORMType-»
/**
 * Creates a new instance of class «name.unescape()».
 *
 * @return      the new instance of class «name.unescape()»
 * @generated modifiable
 */
public «name.unescape()» create(
    «FOREACH getAllMandatoryAttributes() AS att SEPARATOR ", "-»
        «att.type.getClassName().getShortName()» «att.name.unescape()»
        «imports.addImport(att.type.getClassName())-»
    «ENDFOREACH-»
    «IF getAllMandatoryAttributes().size > 0 && getAllMandatoryRelations().size > 0-»
        ,
    «ENDIF-»
    «FOREACH getAllMandatoryRelations().sortBy(r | r.name) AS rel SEPARATOR ", "-»
        «rel.type.getClassName().getShortName()» «rel.name.unescape()»
        «imports.addImport(rel.type.getClassName())-»
    «ENDFOREACH-»
    )
{
    «FOREACH getAllMandatoryRelations() AS rel-»
        «IF null != rel.foreignKey»
            «FOREACH rel.foreignKey.sourceAttributes.select(a | a.isPrimaryKey()) AS fk-»
                «fk.type.getClassName().getShortName()» «fk.name.unescape()» = «rel.name.unescape()».get«rel.foreignKey.targetAttributes.get(rel.foreignKey.sourceAttributes.indexOf(fk)).name.unescape().toFirstUpper()»();
            «ENDFOREACH-»
        «ENDIF»
    «ENDFOREACH-»

    «name.unescape()»Key key = new «name.unescape()»Key(
        «FOREACH getAllPrimaryKeyAttributes() AS key SEPARATOR ", "-»
            «key.name.unescape()»
        «ENDFOREACH-»
        );
    «name.unescape()» instance = («name.unescape()») getEngine().getPersistenceManager().createObject(key, getClassDescription());

    «FOREACH getAllMandatoryAttributes().select(a | !a.isPrimaryKey()) AS att-»
        «IF att.type.getClassName() == "boolean"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»FlagAttribute, «att.name.unescape()»);
        «ELSEIF att.type.getClassName() == "byte"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»Attribute, new Byte(«att.name.unescape()»));
        «ELSEIF att.type.getClassName() == "char"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»Attribute, new Character(«att.name.unescape()»));
        «ELSEIF att.type.getClassName() == "short"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»Attribute, new Short(«att.name.unescape()»));
        «ELSEIF att.type.getClassName() == "int"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»Attribute, new Integer(«att.name.unescape()»));
        «ELSEIF att.type.getClassName() == "long"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»Attribute, new Long(«att.name.unescape()»));
        «ELSEIF att.type.getClassName() == "float"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»Attribute, new Float(«att.name.unescape()»));
        «ELSEIF att.type.getClassName() == "double"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»Attribute, new Double(«att.name.unescape()»));
        «ELSEIF att.type.metaType == EDLPrimitiveType && ((EDLPrimitiveType) att.type).name.unescape() == "text"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»Attribute, «att.name.unescape()» != null ? «att.name.unescape()».toCharArray() : null);
        «ELSEIF att.type.getClassName() == "com.intershop.beehive.foundation.quantity.ExchangeRate"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»Attribute, «att.name.unescape()».writeToString());
        «ELSEIF att.type.getClassName() == "com.intershop.beehive.foundation.quantity.Money"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»CodeAttribute, «att.name.unescape()».getCurrencyMnemonic());
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»ValueAttribute, «att.name.unescape()».getValue());
        «ELSEIF att.type.getClassName() == "com.intershop.beehive.foundation.quantity.Quantity"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»UnitAttribute, «att.name.unescape()».getUnit());
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»ValueAttribute, «att.name.unescape()».getValue());
        «ELSEIF att.type.getClassName() == "com.intershop.beehive.core.capi.user.User"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»IDAttribute, «att.name.unescape()».getID());
        «ELSEIF att.type.getClassName() == "com.intershop.beehive.xcs.common.ProductRef"-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»ProductSKUAttribute, «att.name.unescape()».getProductSKU());
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»DomainNameAttribute, «att.name.unescape()».getDomainName());
        «ELSE-»
            instance.setAttributeValue(«name.unescape()».«att.name.unescape()»Attribute, «att.name.unescape()»);
        «ENDIF-»        
    «ENDFOREACH-»

    «FOREACH getAllMandatoryRelations() AS rel-»
    instance.setRelatedObject(«name.unescape()».«rel.name.unescape()»Relation, «rel.name.unescape()»);
    «ENDFOREACH-»

    «REM»
        special handling for AttributeValue beans:
        set the domain ID if partitioning is enabled, otherwise leave domainID null
    «ENDREM»
    «IF isImplementor("com.intershop.beehive.core.capi.domain.AttributeValue") &&
        getOrigin().modifiers.contains(EDLORMTypeModifier::partitionable)-»
        «imports.addImport("com.intershop.beehive.core.capi.partition.PartitionMgr")-»
        «imports.addImport("com.intershop.beehive.core.capi.naming.NamingMgr")-»
        PartitionMgr partitionMgr = NamingMgr.getManager(PartitionMgr.class);
                                        
        if (partitionMgr.isPartitioningEnabled())
        {
            instance.setDomainID(owner.getDomainID());
        }    
    «ENDIF-»

    //{{ create
    // put your custom create code here        
    //}} create

    return instance;
}
«ENDDEFINE»       


«DEFINE generateCreateDomain(List[String] imports) FOR EDLORMType-»
«imports.addImport("com.intershop.beehive.core.capi.util.UUIDMgr")-»
«imports.addImport("com.intershop.beehive.core.capi.domain.Domain")-»
/**
 * Creates a new instance of class «name.unescape()».
 *
 * @return      the new instance of class «name.unescape()»
 * @generated
 */
public «name.unescape()» create(
    «LET {} AS params-»
        «FOREACH getAllMandatoryAttributes() AS att -»
            «IF att.name.unescape() != "UUID" && att.name.unescape() != "ownedDomainID"-»
                «IF att.name.unescape() == "domainID"-»
                    «params.addString("Domain domain")-»
                    «imports.addImport("com.intershop.beehive.core.capi.domain.Domain")-»
                «ELSE-»
                    «params.addString(att.type.getClassName().getShortName() + " " + att.name.unescape())-»
                    «imports.addImport(att.type.getClassName())-»
                «ENDIF-»
            «ENDIF-»
        «ENDFOREACH-»
        «FOREACH getAllMandatoryRelations().sortBy(r | r.name) AS rel-»
            «params.addString(rel.type.getClassName().getShortName() + " " + rel.name.unescape())-»
            «imports.addImport(rel.type.getClassName())-»
        «ENDFOREACH-»
        «FOREACH params AS p SEPARATOR ", "-»
        «p»
        «ENDFOREACH-»
    «ENDLET-»
    )
{
    return create(
    «LET {} AS args-»
        «FOREACH getAllMandatoryAttributes() AS att -»
            «IF att.name.unescape() == "UUID"-»
                «args.addString("UUIDMgr.getInstance().createUUIDString()")-»                
            «ELSEIF att.name.unescape() == "domainID" || att.name.unescape() == "ownedDomainID" -»
                «args.addString("domain.getUUID()")-»
            «ELSE-»
                «args.addString(att.name.unescape())-»
            «ENDIF-»
        «ENDFOREACH-»
        «FOREACH getAllMandatoryRelations().sortBy(r | r.name) AS rel-»
            «args.addString(rel.name.unescape())-»
        «ENDFOREACH-»
        «FOREACH args AS a SEPARATOR ", "-»
        «a»
        «ENDFOREACH-»
    «ENDLET-»
    );
}
«ENDDEFINE»


«DEFINE generateRemove(List[String] imports) FOR EDLORMType-»
/**
 * Removes an object by its primary key.
 *
 * @generated 
 */
public void remove(«name.unescape()»Key key)
{
    «name.unescape()» object = getObjectByPrimaryKey(key);
    if (object != null)
    {
        object.remove();
    }
}
«ENDDEFINE»


«DEFINE generateFindByPrimaryKey(List[String] imports) FOR EDLORMType-»
/**
 * Locates an instance of class «name.unescape()» based on its
 * primary key.
 *
 * @param       key     the primary key to use for lookup
 * @return      the object for the specified primary key
 * @exception   com.intershop.beehive.core.capi.common.FinderException if the object wasn't found
 * @deprecated  use getObjectByPrimaryKey now
 * @generated
 */
public «name.unescape()» findByPrimaryKey(«name.unescape()»Key key)
    throws FinderException
{
    return («name.unescape()») super.findByPrimaryKeyObject(key);
}    
«ENDDEFINE»   


«DEFINE generateGetObjectByPrimaryKey(List[String] imports) FOR EDLORMType-»
/**
 * Locates an instance of class «name.unescape()» based on its
 * primary key.
 *
 * @param       key     the primary key to use for lookup
 * @return      the object for the specified primary key or null, if it wasn't found
 * @generated
 */
public «name.unescape()» getObjectByPrimaryKey(«name.unescape()»Key key)
{
    return («name.unescape()») super.getObjectByPrimaryKeyObject(key);
}    
«ENDDEFINE»


«DEFINE generateFindByPrimaryKeyFindMode(List[String] imports) FOR EDLORMType-»
/**
 * Locates an instance of class «name.unescape()» based on its
 * primary key.
 *
 * @param       key         the primary key to use for lookup
 * @param       findMode    the strategy to use for the lookup
 * @return      the object for the specified primary key
 * @exception   com.intershop.beehive.core.capi.common.FinderException if the object wasn't found
 * @deprecated  use getObjectByPrimaryKey now
 * @generated
 */
public «name.unescape()» findByPrimaryKey(«name.unescape()»Key key, FindMode mode)
    throws FinderException
«imports.addImport("com.intershop.beehive.orm.capi.common.FindMode")-»
{
    return («name.unescape()») super.findByPrimaryKeyObject(key, mode);
}
«ENDDEFINE»


«DEFINE generateGetObjectByPrimaryKeyFindMode(List[String] imports) FOR EDLORMType-»
/**
 * Locates an instance of class «name.unescape()» based on its
 * primary key.
 *
 * @param       key         the primary key to use for lookup
 * @param       findMode    the strategy to use for the lookup
 * @return      the object for the specified primary key or null, if it wasn't found
 * @generated
 */
public «name.unescape()» getObjectByPrimaryKey(«name.unescape()»Key key, FindMode mode)
«imports.addImport("com.intershop.beehive.orm.capi.common.FindMode")-»
{
    return («name.unescape()») super.getObjectByPrimaryKeyObject(key, mode);
}
«ENDDEFINE»


«DEFINE generateGetObjectByAlternateKey(List[String] imports) FOR EDLORMType-»
/**
 * Locates an instance of class «name.unescape()» based on its
 * alternate key.
 *
 * @param       key     the alternate key to use for lookup
 * @return      the object for the specified alternate key or null, if it wasn't found
 * @generated
 */
public «name.unescape()» getObjectByAlternateKey(«name.unescape()»AlternateKey key)
{
    return («name.unescape()») super.getObjectByAlternateKeyObject(key);
}    
«ENDDEFINE»


«DEFINE generateGetObjectByAlternateKeyFindMode(List[String] imports) FOR EDLORMType-»
/**
 * Locates an instance of class «name.unescape()» based on its
 * alternate key.
 *
 * @param       key         the alternate key to use for lookup
 * @param       findMode    the strategy to use for the lookup
 * @return      the object for the specified alternate key or null, if it wasn't found
 * @generated
 */
public «name.unescape()» getObjectByAlternateKey(«name.unescape()»AlternateKey key, FindMode mode)
«imports.addImport("com.intershop.beehive.orm.capi.common.FindMode")-»
{
    return («name.unescape()») super.getObjectByAlternateKeyObject(key, mode);
}
«ENDDEFINE»


«DEFINE generateFindByAttribute(EDLORMType parent, List[String] imports) FOR EDLORMAttribute-»
/**
 * Locates instances of class «parent.name.unescape()» based on the
 * value of the attribute '«name.unescape()»'.
 *
 * @param   value   the value of the attribute '«name.unescape()»' 
 *          to use for lookup
 * @return  a list of instances of class «parent.name.unescape()» 
 *          that match the specified value of the attribute «name.unescape()»
 * @deprecated  use getObjectsBy«name.unescape().toFirstUpper()»() instead
 * @generated
 */
public Enumeration findBy«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» value)
«imports.addImport(type.getClassName())-»
«imports.addImport("java.util.Enumeration")-»
«imports.addImport("java.util.Collections")-»
{
    return Collections.enumeration(getObjectsBy«name.unescape().toFirstUpper()»(value));
}
«ENDDEFINE»


«DEFINE generateGetObjectsByAttribute(EDLORMType parent, List[String] imports) FOR EDLORMAttribute-»
/**
 * Locates instances of class «parent.name.unescape()» based on the
 * value of the attribute '«name.unescape()»'.
 *
 * @param   value   the value of the attribute '«name.unescape()»' 
 *          to use for lookup
 * @return  a list of instances of class «parent.name.unescape()» 
 *          that match the specified value of attribute «name.unescape()»
 * @generated
 */
public ORMObjectCollection getObjectsBy«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» value)
«imports.addImport("com.intershop.beehive.orm.capi.common.ORMObjectCollection")-»
«imports.addImport(type.getClassName())-»
{
    «IF type.getClassName() == "boolean"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Boolean(value), «parent.name.unescape()».«name.unescape()»FlagAttribute, getClassDescription());
    «ELSEIF type.getClassName() == "com.intershop.beehive.core.capi.user.User"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            value.getID(), «parent.name.unescape()».«name.unescape()»IDAttribute), getClassDescription());
    «ELSEIF type.getClassName() == "byte"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Byte(value), «parent.name.unescape()».«name.unescape()»Attribute), getClassDescription());
    «ELSEIF type.getClassName() == "short"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Short(value), «parent.name.unescape()».«name.unescape()»Attribute, getClassDescription());
    «ELSEIF type.getClassName() == "int"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Integer(value), «parent.name.unescape()».«name.unescape()»Attribute, getClassDescription());
    «ELSEIF type.getClassName() == "long"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Long(value), «parent.name.unescape()».«name.unescape()»Attribute, getClassDescription());
    «ELSEIF type.getClassName() == "float"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Float(value), «parent.name.unescape()».«name.unescape()»Attribute, , getClassDescription());
    «ELSEIF type.getClassName() == "double"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Double(value), «parent.name.unescape()».«name.unescape()»Attribute, getClassDescription());
    «ELSE-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            value, «parent.name.unescape()».«name.unescape()»Attribute, getClassDescription());
    «ENDIF-»
}
«ENDDEFINE»

     
«DEFINE generateGetObjectsByAttributeCacheMode(EDLORMType parent, List[String] imports) FOR EDLORMAttribute-»
/**
 * Locates instances of class «parent.name.unescape()» based on the
 * value of the attribute '«name.unescape()»'.
 *
 * Depending on the passed cache mode, the collection internally caches the 
 * result objects or not.
 * If caching is used, all results are cached in the collection and it can 
 * be iterated multiple times without repeated queries to the database.
 * If no caching is used, the results will not be cached by the collection.
 * Each call to iterator will execute the query again.
 * This mode should be used when large result sets are expected and caching all
 * results is not possible.
 * 
 * @param   value   the value of the attribute '«name.unescape()»' 
 *          to use for lookup
 * @param   cacheMode   the cache mode that specifies how to handle resolved objects
 * @return  a list of instances of class «parent.name.unescape()» 
 *          that match the specified value of attribute «name.unescape()»
 * @generated
 */
public ORMObjectCollection getObjectsBy«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» value, CacheMode cacheMode)
«imports.addImport("com.intershop.beehive.orm.capi.common.ORMObjectCollection")-»
«imports.addImport("com.intershop.beehive.orm.capi.common.CacheMode")-»
«imports.addImport(type.getClassName())-»
{
    «IF type.getClassName() == "boolean"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Boolean(value), «parent.name.unescape()».«name.unescape()»FlagAttribute, getClassDescription(), cacheMode);
    «ELSEIF type.getClassName() == "com.intershop.beehive.core.capi.user.User"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            value.getID(), «parent.name.unescape()».«name.unescape()»IDAttribute), getClassDescription(), cacheMode);
    «ELSEIF type.getClassName() == "byte"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Byte(value), «parent.name.unescape()».«name.unescape()»Attribute), getClassDescription(), cacheMode);
    «ELSEIF type.getClassName() == "short"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Short(value), «parent.name.unescape()».«name.unescape()»Attribute, getClassDescription(), cacheMode);
    «ELSEIF type.getClassName() == "int"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Integer(value), «parent.name.unescape()».«name.unescape()»Attribute, getClassDescription(), cacheMode);
    «ELSEIF type.getClassName() == "long"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Long(value), «parent.name.unescape()».«name.unescape()»Attribute, getClassDescription(), cacheMode);
    «ELSEIF type.getClassName() == "float"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Float(value), «parent.name.unescape()».«name.unescape()»Attribute, , getClassDescription(), cacheMode);
    «ELSEIF type.getClassName() == "double"-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            new Double(value), «parent.name.unescape()».«name.unescape()»Attribute, getClassDescription(), cacheMode);
    «ELSE-»
        return getEngine().getPersistenceManager().getObjectsByAttribute(
            value, «parent.name.unescape()».«name.unescape()»Attribute, getClassDescription(), cacheMode);
    «ENDIF-»
}
«ENDDEFINE»
