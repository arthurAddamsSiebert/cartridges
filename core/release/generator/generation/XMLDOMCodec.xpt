/*
 * Generates the source code for XML DOM Codecs
 */

«IMPORT edl»
«EXTENSION util::EDLUtil»
«EXTENSION org::eclipse::xtend::util::stdlib::properties»


«DEFINE generateDOMCodecs FOR EDLModel»
    «FOREACH eAllContents.typeSelect(EDLXMLType).select(x |        
        !x.modifiers.contains(EDLXMLTypeModifier::abstract)) AS x»
        «EXPAND generateDOMCodec FOR x»
    «ENDFOREACH»
«ENDDEFINE»


«DEFINE generateDOMCodec FOR EDLXMLType-»
«FILE getClassName().replaceAll("\\.", "/") + "XMLCodec.java"-»
«LET {} AS imports-»
«EXPAND generateHeader FOR this-»
package «getPackageName()»;

//PREPAREIMPORTS «getPackageName()»

/**
 * This class is an XML encoder/decoder for objects of type «name.unescape()».
 * The attributes and relations of the object are converted into an XML
 * representation according to the object model.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @generated 
 */
public class «name.unescape()»XMLCodec implements XMLCodec
«imports.addImport("com.intershop.beehive.foundation.xmlutil.XMLCodec")-»
{
    «EXPAND generateEncodeAsElement(imports) FOR this-»
    «EXPAND generateEncodeAsElementTag(imports) FOR this-»
    
    «IF isSubClass("com.intershop.beehive.core.common.DObject")-»
        «EXPAND generateDecodeAsElementDObject(imports) FOR this-»
    «ELSEIF isSubClass("com.intershop.beehive.core.common.DValue")-»        
        «EXPAND generateDecodeAsElementDValue(imports) FOR this-»
    «ENDIF-»
}
//ADDIMPORTS «FOREACH imports AS i SEPARATOR ", "»«i»«ENDFOREACH» 
«ENDLET-»
«ENDFILE-»
«ENDDEFINE»


«DEFINE generateHeader FOR EDLXMLType-»
// =============================================================================
// File: «name.unescape()»XMLCodec.java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: XMLDOMCodec.xpt(checksum: «getProperty("XMLDOMCodec.xpt.checksum")»)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
«ENDDEFINE»


«DEFINE generateEncodeAsElementTag(List[String] imports) FOR EDLXMLType-»
/**
 * Encodes the current state of an object into an XML form. The XML is
 * written to an output stream. This method is used to write all child
 * nodes of an XML tree.
 *
 * @param       tag         the element name to be used
 * @param       obj         the object to be encoded
 * @param       out         the output stream for the XML
 * @param       flag        indicates if element is toplevel or not
 * @throws      EncodeException if the encoding of the specified object failed
 * @generated modifiable
 */
public void encodeAsElement(String tag, Object obj, XMLWriter out, boolean flag) throws EncodeException
«imports.addImport("com.intershop.beehive.foundation.xmlutil.EncodeException")-»
«imports.addImport("com.intershop.beehive.foundation.xmlutil.XMLWriter")-»
{
    if(obj != null)
    {
        «name.unescape()» object = («name.unescape()») obj;

        // write the root tag for the class and the element attributes
        out.print('<');
        out.print(tag);
        out.print(" dbo.type=\"«getClassName()»\"");

        «FOREACH getAllAttributes().select(a | a.xmlFormat == EDLXMLFormat::attribute) AS att-»
            «IF att.type.getClassName() == "boolean"-»
                out.printAsAttribute("«getXMLName()»", object.is«att.name.unescape().toFirstUpper()»());
            «ELSEIF att.type.getClassName() == "double"-»
                «IF att.xmlPattern == null-»
                    out.printAsAttribute("«getXMLName()»", object.get«att.name.unescape().toFirstUpper()»());
                «ELSE-»
                    «imports.addImport("java.text.DecimalFormat")-»
                    out.printAsAttribute("«getXMLName()»", new DecimalFormat("«att.xmlPattern»").format(new Double(object.get«att.name.unescape().toFirstUpper()»())));
                «ENDIF-»
            «ELSEIF att.type.getClassName() == "java.util.Date"-»
                «imports.addImport("java.util.Date")-»
                «imports.addImport("java.text.SimpleDateFormat")-»
                Date «att.name.unescape()» = object.get«att.name.unescape().toFirstUpper()»();
                if(«att.name.unescape()» != null)
                {
                    out.printAsAttribute("«att.getXMLName()»",
                        new SimpleDateFormat("«att.xmlPattern == null ? "MM/dd/yyyy hh:mm" : att.xmlPattern»").format(«att.name.unescape()»));
                }
                else
                {
                    out.printAsAttribute("«att.getXMLName()»", «att.name.unescape()»);
                }
            «ELSEIF att.type.getClassName() == "java.lang.String"-»
                String «att.name.unescape()» = object.get«att.name.unescape().toFirstUpper()»();
                out.printAsAttribute("«att.getXMLName()»", «att.name.unescape()»);
            «ELSE-»
                out.printAsAttribute("«att.getXMLName()»", object.get«att.name.unescape().toFirstUpper()»());
            «ENDIF-»
        «ENDFOREACH-»

        «IF getAllAttributes().exists(a | a.xmlFormat != EDLXMLFormat::attribute)
            || getAllContainments().size > 0-»
            out.println('>');

            «FOREACH getAllAttributes().select(a | a.xmlFormat == EDLXMLFormat::text) AS att-»
                «IF att.type.getClassName() == "boolean"-»
                    out.printAsText(object.is«att.name.unescape().toFirstUpper()»());
                «ELSEIF att.type.getClassName() == "double"-»
                    «IF att.xmlPattern == null-»
                        out.printAsText(object.get«att.name.unescape().toFirstUpper()»());
                    «ELSE-»
                        «imports.addImport("java.text.DecimalFormat")-»
                        out.printAsText(new DecimalFormat("«att.xmlPattern»").format(new Double(object.get«att.name.unescape().toFirstUpper()»())));
                    «ENDIF-»
                «ELSEIF att.type.getClassName() == "java.util.Date"-»
                    «imports.addImport("java.util.Date")-»
                    «imports.addImport("java.text.SimpleDateFormat")-»
                    Date «att.name.unescape()» = object.get«att.name.unescape().toFirstUpper()»();
                    if(«att.name.unescape()» != null)
                    {
                        out.printAsText(new SimpleDateFormat("«att.xmlPattern == null ? "MM/dd/yyyy hh:mm" : att.xmlPattern»").format(«att.name.unescape()»));
                    }
                    else
                    {
                        out.printAsText(«att.name.unescape()»);
                    }
                «ELSEIF att.type.getClassName() == "java.lang.String"-»
                    // write the text attribute
                    String «att.name.unescape()» = object.get«att.name.unescape().toFirstUpper()»();
                    out.printAsText(«att.name.unescape()»);
                «ELSE-»
                    out.printAsText(object.get«att.name.unescape().toFirstUpper()»());
                «ENDIF-»
            «ENDFOREACH-»

            «FOREACH getAllMembers() AS m-»
                «IF m.metaType == EDLXMLContainment-»
                    «LET ((EDLXMLContainment) m) AS rel-»
                        «imports.addImport(rel.type.getClassName())-»
                        «IF rel.xmlFormat == EDLXMLFormat::element-»
                            «IF rel.cardinality == EDLXMLCardinality::zeroToOne-»
                                «rel.type.getClassName().getShortName()» «rel.name.unescape()» = object.get«rel.name.unescape().toFirstUpper()»();
                                if («rel.name.unescape()» != null)
                                {
                                    out.println("<«rel.getXMLName()»>");
                                    out.printAsElement("«rel.type.getXMLName()»", «rel.name.unescape()», false); 
                                    out.println("</«rel.getXMLName()»>");
                                }
                            «ELSEIF rel.cardinality == EDLXMLCardinality::zeroToMany-»
                                «imports.addImport("java.util.Enumeration")-»
                                Enumeration «rel.name.unescape()» = object.get«rel.name.unescape().toFirstUpper()»();
                                if («rel.name.unescape()».hasMoreElements())
                                {
                                    out.println("<«rel.getXMLName()»>");
                                    while («rel.name.unescape()».hasMoreElements())
                                    {  
                                        out.printAsElement("«rel.type.getXMLName()»", «rel.name.unescape()».nextElement(), false); 
                                    } 
                                    out.println("</«rel.getXMLName()»>");
                                }
                            «ENDIF-»
                        «ELSEIF rel.xmlFormat == EDLXMLFormat::text-»
                            «IF rel.cardinality == EDLXMLCardinality::zeroToOne-»
                                «rel.type.getClassName().getShortName()» «rel.name.unescape()» = object.get«rel.name.unescape().toFirstUpper()»(); 
                                out.printAsElement("«rel.getXMLNameFallback()»", «rel.name.unescape()», false);
                            «ELSEIF rel.cardinality == EDLXMLCardinality::zeroToMany-»
                                «imports.addImport("java.util.Enumeration")-»
                                Enumeration «rel.name.unescape()» = object.get«rel.name.unescape().toFirstUpper()»();
                                while («rel.name.unescape()».hasMoreElements())
                                {  
                                    out.printAsElement("«rel.getXMLNameFallback()»", «rel.name.unescape()».nextElement(), false); 
                                } 
                            «ENDIF-»
                        «ENDIF-»
                    «ENDLET-»
                «ELSEIF m.metaType == EDLXMLAttribute-»
                    «LET ((EDLXMLAttribute) m) AS att-»
                        «IF att.xmlFormat == EDLXMLFormat::element-»
                            «IF att.type.getClassName() == "boolean"-»
                                out.printAsElement("«att.getXMLName()»", object.is«att.name.unescape().toFirstUpper()»(), false);
                            «ELSEIF att.type.getClassName() == "double"-»
                                «IF att.xmlPattern == null-»
                                    out.printAsElement("«att.getXMLName()»", object.get«att.name.unescape().toFirstUpper()»(), false);
                                «ELSE-»
                                    «imports.addImport("java.text.DecimalFormat")-»
                                    out.printAsElement("«att.getXMLName()»",
                                        new DecimalFormat("«att.xmlPattern»").format(new Double(object.get«att.name.unescape().toFirstUpper()»())), false);
                                «ENDIF-»
                            «ELSEIF att.type.getClassName() == "java.util.Date"-»
                                «imports.addImport("java.util.Date")-»
                                «imports.addImport("java.text.SimpleDateFormat")-»
                                Date«att.dimension.getArrayDimension()» «att.name.unescape()» = object.get«att.name.unescape().toFirstUpper()»();
                                if («att.name.unescape()» != null)
                                {
                                    out.printAsElement("«att.name.unescape()»", new SimpleDateFormat("«att.xmlPattern == null ? "MM/dd/yyyy hh:mm" : att.xmlPattern»").format(«att.name.unescape()»), false);
                                }
                                else
                                {
                                    out.printAsElement("«att.getXMLName()»", «att.name.unescape()», false);
                                }
                            «ELSEIF att.type.getClassName() == "java.lang.String"-»
                                String«att.dimension.getArrayDimension()» «att.name.unescape()» = object.get«att.name.unescape().toFirstUpper()»();
                                out.printAsElement("«att.getXMLName()»", «att.name.unescape()», false);
                            «ELSEIF att.type.getClassName() == "java.lang.Double"-»
                                «IF att.xmlPattern == null-»
                                    out.printAsElement("«att.getXMLName()»", object.get«att.name.unescape().toFirstUpper()»(), false);
                                «ELSE-»
                                    «imports.addImport("java.text.DecimalFormat")-»
                                    if (object.get«att.name.unescape().toFirstUpper()»() != null)
                                    {
                                        out.printAsElement("«att.getXMLName()»", new DecimalFormat("«att.xmlPattern»").format(object.get«att.name.unescape().toFirstUpper()»()), false);
                                    }
                                    else
                                    {
                                        out.printAsElement("«att.getXMLName()»", object.get«att.name.unescape().toFirstUpper()»(), false);
                                    }
                                «ENDIF-»
                            «ELSE-»
                                out.printAsElement("«att.getXMLName()»", object.get«att.name.unescape().toFirstUpper()»(), false);
                            «ENDIF-»
                        «ENDIF-»
                    «ENDLET-»
                «ENDIF-»
            «ENDFOREACH-»
            out.print('<');
            out.print('/');
            out.print(tag);
            out.println('>');
        «ELSE-»
            out.print('/');
            out.println('>');
        «ENDIF-»
    }
    else   //obj is null
    {
        if (flag == true)
        {
            out.print("<" + tag + " dbo.null=\"1\"/>");
        }
        else //((obj == null)&&(flag == false))
        {
            //nothing to do
        }
    }

    //{{ encode
    // insert your custom code here
    //}} encode
}
«ENDDEFINE»
       

«DEFINE generateEncodeAsElement(List[String] imports) FOR EDLXMLType-»
/**
 * Encodes the current state of an object into an XML form. The XML is
 * written to an output stream. This method should be used to write the
 * root object of an XML tree.
 *
 * @param       obj         the object to be encoded
 * @param       out         the output stream for the XML
 * @param       flag        indicates if element is toplevel or not
 * @throws      EncodeException if the encoding of the specified object failed
 * @generated 
 */
public void encodeAsElement(Object obj, XMLWriter out, boolean flag) throws EncodeException
«imports.addImport("com.intershop.beehive.foundation.xmlutil.EncodeException")-»
«imports.addImport("com.intershop.beehive.foundation.xmlutil.XMLWriter")-»
{
    this.encodeAsElement("«getXMLName()»", obj, out, flag);
}
«ENDDEFINE»


«DEFINE generateDecodeAsElementDObject(List[String] imports) FOR EDLXMLType-»
/**
 * Reads an object from its XML representation. The XML must be parsed
 * before into its document object model representation.
 *
 * @param       root        the DOM node for reading the object from XML
 * @param       reader      the XMLReader
 * @return      the fully initialized object
 * @throws      DecodeException if the decoding of the specified XML element failed
 * @generated modifiable
 */
public Object decodeAsElement(Element root, XMLReader reader) throws DecodeException
«imports.addImport("org.w3c.dom.Element")-»
«imports.addImport("com.intershop.beehive.foundation.xmlutil.DecodeException")-»
«imports.addImport("com.intershop.beehive.foundation.xmlutil.XMLReader")-»
{
    «getClassName().getShortName()» instance = null;
    String rootAttribute = null;
        
    if (root != null)
    {  
        //if root value is null, return null
        rootAttribute = root.getAttribute("dbo.null");
        if (rootAttribute.equals("1"))
        {
            return null;
        }
        
        // create a new instance of the class
        instance = new «getClassName().getShortName()»();

        «FOREACH getAllAttributes().select(a | a.xmlFormat == EDLXMLFormat::attribute) AS att-»
            «imports.addImport(att.type.getClassName())-»
            «IF att.type.getClassName() == "boolean"-»
                boolean «att.name.unescape()» =  reader.readPrimitiveBooleanAsAttribute(root, "«att.getXMLName()»"); 
                instance.set«att.name.unescape().toFirstUpper()»(«att.name.unescape()»);
            «ELSEIF att.type.getClassName() == "double"-»
                «IF att.xmlPattern == null-»
                    double «att.name.unescape()» = reader.readPrimitiveDoubleAsAttribute(root, "«att.getXMLName()»"); 
                    instance.set«att.name.unescape().toFirstUpper()»(«att.name.unescape()»);
                «ELSE-»
                    double «att.name.unescape()» = reader.readPrimitiveDoubleAsAttribute(root, "«att.getXMLName()»", "«att.xmlPattern»"); 
                    instance.set«att.name.unescape().toFirstUpper()»(«att.name.unescape()»);
                «ENDIF-»
            «ELSEIF att.type.getClassName() == "java.util.Date"-»
                Date «att.name.unescape()» = reader.readDateAsAttribute(root, "«att.getXMLName()»", "«att.xmlPattern == null ? "MM/dd/yyyy hh:mm" : att.xmlPattern»"); 
                instance.set«att.name.unescape().toFirstUpper()»(«att.name.unescape()»);
            «ELSEIF att.type.getClassName() == "java.lang.String"-»
                String «att.name.unescape()» = reader.readStringAsAttribute(root, "«att.getXMLName()»"); 
                instance.set«att.name.unescape().toFirstUpper()»(«att.name.unescape()»);
            «ELSEIF att.type.getClassName().isPrimitive()-»
                «att.type.getClassName().getShortName()» «att.name.unescape()» = reader.readPrimitive«att.type.getClassName().getShortName().toFirstUpper()»AsAttribute(root, "«att.getXMLName()»");
                instance.set«att.name.unescape().toFirstUpper()»(«att.name.unescape()»);
            «ENDIF-»
        «ENDFOREACH-»        

        «FOREACH getAllAttributes().select(a | a.xmlFormat == EDLXMLFormat::element) AS att-»
            «imports.addImport(att.type.getClassName())-»
            «IF att.type.getClassName() == "boolean"-»
                «imports.addImport("org.w3c.dom.NodeList")-»
                «imports.addImport("org.w3c.dom.Element")-»
                NodeList «att.name.unescape()»List = root.getElementsByTagName("«att.getXMLName()»");
                if («att.name.unescape()»List != null)
                {
                    Element «att.name.unescape()»Element = (Element) «att.name.unescape()»List.item(0); 
                    if («att.name.unescape()»Element != null)
                    {
                        boolean result = reader.readPrimitiveBooleanAsElement(«att.name.unescape()»Element); 
                        instance.set«att.name.unescape().toFirstUpper()»(result);
                    }
                }
            «ELSEIF att.type.getClassName() == "java.util.Date"-»
                «imports.addImport("org.w3c.dom.NodeList")-»
                «imports.addImport("org.w3c.dom.Element")-»
                NodeList «att.name.unescape()»List = root.getElementsByTagName("«att.getXMLName()»"); 
                if («att.name.unescape()»List != null) 
                {
                    Element «att.name.unescape()»Element = (Element) «att.name.unescape()»List.item(0); 
                    if («att.name.unescape()»Element != null)
                    {
                        Date result = reader.readDateAsElement(«att.name.unescape()»Element, "«att.xmlPattern == null ? "MM/dd/yyyy hh:mm" : att.xmlPattern»"); 
                        instance.set«att.name.unescape().toFirstUpper()»(result);
                    }
                }
            «ELSEIF att.type.getClassName() == "java.lang.Double"-»
                «imports.addImport("org.w3c.dom.NodeList")-»
                «imports.addImport("org.w3c.dom.Element")-»
                NodeList «att.name.unescape()»List = root.getElementsByTagName("«att.getXMLName()»"); 
                if («att.name.unescape()»List != null) 
                {
                    Element «att.name.unescape()»Element = (Element) «att.name.unescape()»List.item(0); 
                    if («att.name.unescape()»Element != null)
                    {
                        «IF att.xmlPattern == null-»
                            Double result = reader.readDoubleAsElement(«att.name.unescape()»Element); 
                        «ELSE-»
                            Double result = reader.readDoubleAsElement(«att.name.unescape()»Element, "«att.xmlPattern»"); 
                        «ENDIF-»
                        instance.set«att.name.unescape().toFirstUpper()»(result);
                    }
                }
            «ELSEIF att.type.getClassName().isPrimitive()-»
                «imports.addImport("org.w3c.dom.NodeList")-»
                «imports.addImport("org.w3c.dom.Element")-»
                NodeList «att.name.unescape()»List = root.getElementsByTagName("«att.getXMLName()»"); 
                if («att.name.unescape()»List != null)
                {
                    Element «att.name.unescape()»Element = (Element) «att.name.unescape()»List.item(0); 
                    if («att.name.unescape()»Element != null)
                    {
                        «IF att.type.getClassName() == "double" && att.xmlPattern != null-»
                            «att.type.getClassName().getShortName()» result = reader.readPrimitiveDoubleAsElement(«att.name.unescape()»Element, "«att.xmlPattern»");
                            instance.set«att.name.unescape().toFirstUpper()»(result);
                        «ELSE-» 
                            «att.type.getClassName().getShortName()» result = reader.readPrimitive«att.type.getClassName().getShortName().toFirstUpper()»AsElement(«att.name.unescape()»Element);
                            instance.set«att.name.unescape().toFirstUpper()»(result);  
                        «ENDIF-»
                    }
                }
            «ELSEIF !att.type.getClassName().isPrimitive() &&
                    (att.type.getClassName() == "java.util.Vector" ||
                    att.type.getClassName() == "java.util.Hashtable" ||
                    att.dimension.size > 0)-»
                «imports.addImport("org.w3c.dom.NodeList")-»
                «imports.addImport("org.w3c.dom.Element")-»
                NodeList «att.name.unescape()»List = root.getElementsByTagName("«att.getXMLName()»"); 
                if («att.name.unescape()»List != null)
                {
                    Element «att.name.unescape()»Element = (Element) «att.name.unescape()»List.item(0); 
                    if(«att.name.unescape()»Element != null)
                    {
                        «att.type.getClassName().getShortName()»«att.dimension.getArrayDimension()» result = («att.type.getClassName().getShortName()»«att.dimension.getArrayDimension()») reader.readObjectAsElement(«att.name.unescape()»Element); 
                        instance.set«att.name.unescape().toFirstUpper()»(result);
                    }
                }
            «ELSE-»
                «imports.addImport("org.w3c.dom.NodeList")-»
                «imports.addImport("org.w3c.dom.Element")-»
                NodeList «att.name.unescape()»List = root.getElementsByTagName("«att.getXMLName()»"); 
                if («att.name.unescape()»List != null)
                {
                    Element «att.name.unescape()»Element = (Element) «att.name.unescape()»List.item(0); 
                    if(«att.name.unescape()»Element != null)
                    {
                        «att.type.getClassName().getShortName()» result = («att.type.getClassName().getShortName()») reader.read«att.type.getClassName().getShortName()»AsElement(«att.name.unescape()»Element); 
                        instance.set«att.name.unescape().toFirstUpper()»(result);
                    }
                }
            «ENDIF-»
        «ENDFOREACH-»
        
        «FOREACH getAllContainments() AS rel-»
            «IF rel.xmlFormat == EDLXMLFormat::element-»
                «IF rel.cardinality == EDLXMLCardinality::zeroToOne-»
                    «imports.addImport("org.w3c.dom.Node")-»
                    «imports.addImport("org.w3c.dom.Element")-»
                    Node «rel.name.unescape()» = root.getFirstChild();
                    if («rel.name.unescape()» != null)
                    {
                        while (!("«rel.getXMLName()»".equals(«rel.name.unescape()».getNodeName())))
                        {
                            «rel.name.unescape()» = «rel.name.unescape()».getNextSibling();
                            if («rel.name.unescape()» == null)
                            {
                                break;
                            }
                        } 
                        
                        if («rel.name.unescape()» != null)
                        {
                            Node «rel.name.unescape()»Element = «rel.name.unescape()».getFirstChild();  
                            while (!("«rel.type.getXMLName()»".equals(«rel.name.unescape()»Element.getNodeName())))
                            {
                                «rel.name.unescape()»Element = «rel.name.unescape()»Element.getNextSibling();  
                            }
                            
                            if («rel.name.unescape()»Element != null)
                            {
                                instance.set«rel.name.unescape().toFirstUpper()»((«rel.type.getClassName().getShortName()») reader.readObjectAsElement((Element) «rel.name.unescape()»Element));
                            }
                        }
                    } 
                «ELSEIF rel.cardinality == EDLXMLCardinality::zeroToMany-»
                    «imports.addImport("org.w3c.dom.Node")-»
                    «imports.addImport("org.w3c.dom.Element")-»
                    Node «rel.name.unescape()» = root.getFirstChild();
                    if («rel.name.unescape()» != null)
                    {
                        while (!("«rel.getXMLName()»".equals(«rel.name.unescape()».getNodeName())))
                        {
                            «rel.name.unescape()» = «rel.name.unescape()».getNextSibling();
                            if («rel.name.unescape()» == null)
                            {
                                break;
                            }
                        } 
                        
                        if («rel.name.unescape()» != null)
                        {
                            Node «rel.name.unescape()»Element = «rel.name.unescape()».getFirstChild();
                            while («rel.name.unescape()»Element != null)
                            {
                                if («rel.name.unescape()»Element.getNodeName().equals("«rel.type.getXMLName()»"))
                                {
                                    instance.addTo«rel.name.unescape().toFirstUpper()»((«rel.type.getClassName().getShortName()») reader.readObjectAsElement((Element) «rel.name.unescape()»Element));      
                                }
                                
                                «rel.name.unescape()»Element = «rel.name.unescape()»Element.getNextSibling();  
                            } 
                        }
                    } 
                «ENDIF-»
            «ELSEIF rel.xmlFormat == EDLXMLFormat::text-»
                «IF rel.cardinality == EDLXMLCardinality::zeroToOne-»
                    «imports.addImport("org.w3c.dom.Node")-»
                    «imports.addImport("org.w3c.dom.Element")-»
                    Node «rel.name.unescape()» = root.getFirstChild();
                    if («rel.name.unescape()» != null)
                    {
                        while (!("«rel.getXMLNameFallback()»".equals(«rel.name.unescape()».getNodeName())))
                        {
                            «rel.name.unescape()» = «rel.name.unescape()».getNextSibling();
                            if («rel.name.unescape()» == null)
                            {
                                break;
                            }
                        } 
                        
                        if («rel.name.unescape()» != null)
                        {
                            instance.set«rel.name.unescape().toFirstUpper()»((«rel.type.getClassName().getShortName()») reader.readObjectAsElement((Element) «rel.name.unescape()»));
                        }
                    }
                «ELSEIF rel.cardinality == EDLXMLCardinality::zeroToMany-» 
                    «imports.addImport("org.w3c.dom.Node")-»
                    «imports.addImport("org.w3c.dom.Element")-»
                    Node «rel.name.unescape()» = root.getFirstChild();
                    while («rel.name.unescape()» != null)
                    {
                        if («rel.name.unescape()».getNodeName().equals("«rel.getXMLNameFallback()»"))
                        {
                            instance.addTo«rel.name.unescape().toFirstUpper()»((«rel.type.getClassName().getShortName()») reader.readObjectAsElement((Element) «rel.name.unescape()»));      
                        }
                        
                        «rel.name.unescape()» = «rel.name.unescape()».getNextSibling();  
                    }
                «ENDIF-»
            «ENDIF-»
        «ENDFOREACH-»

        «FOREACH getAllAttributes().select(a | a.xmlFormat == EDLXMLFormat::text) AS att-»
            «imports.addImport(att.type.getClassName())-»
            «IF att.type.getClassName() == "boolean"-»
                instance.set«att.name.unescape().toFirstUpper()»(reader.readPrimitiveBooleanAsText(root));
            «ELSEIF att.type.getClassName() == "java.util.Date"-»
                instance.set«att.name.unescape().toFirstUpper()»(reader.readDateAsText(root, "«att.xmlPattern == null ? "MM/dd/yyyy hh:mm" : att.xmlPattern»"));
            «ELSEIF att.type.getClassName() == "java.lang.String"-»
                instance.set«att.name.unescape().toFirstUpper()»(reader.readStringAsText(root));
            «ELSEIF att.type.getClassName().isPrimitive()-»
                «IF att.type.getClassName() == "double" && att.xmlPattern != null-»
                    instance.set«att.name.unescape().toFirstUpper()»(reader.readPrimitiveDoubleAsText(root, "«att.xmlPattern»"));
                «ELSE-»
                    instance.set«att.name.unescape().toFirstUpper()»(reader.readPrimitive«att.type.getClassName().getShortName().toFirstUpper()»AsText(root));
                «ENDIF-»                
            «ENDIF-»
        «ENDFOREACH-»
    }
    else
    {
        throw new DecodeException("«getClassName()»XMLCodec");    
    }

    //{{ decode
    // insert your custom code here
    //}} decode
    
    return instance;
}
«ENDDEFINE»


«DEFINE generateDecodeAsElementDValue(List[String] imports) FOR EDLXMLType-»
/**
 * Reads an object from its XML representation. The XML must be parsed
 * before into its document object model representation.
 *
 * @param       root        the DOM node for reading the object from XML
 * @param       reader      the XMLReader
 * @return      the fully initialized object
 * @throws      DecodeException
 * @generated modifiable
 */
public Object decodeAsElement(Element root, XMLReader reader) throws DecodeException
«imports.addImport("org.w3c.dom.Element")-»
«imports.addImport("com.intershop.beehive.foundation.xmlutil.DecodeException")-»
«imports.addImport("com.intershop.beehive.foundation.xmlutil.XMLReader")-»
{
    «name.unescape()» instance = null;
    String rootAttribute = null;
    
    if (root != null)
    {
        //if root value is null, return null
        rootAttribute = root.getAttribute("dbo.null");
        if (rootAttribute.equals("1"))
        {
            return null;
        }

        «FOREACH getAllAttributes().select(a | a.xmlFormat == EDLXMLFormat::attribute) AS att-»
            «imports.addImport(att.type.getClassName())-»
            «IF att.type.getClassName() == "boolean"-»
                boolean «att.name.unescape()» =  reader.readPrimitiveBooleanAsAttribute(root, "«att.getXMLName()»"); 
            «ELSEIF att.type.getClassName() == "double"-»
                «IF att.xmlPattern == null-»
                    double «att.name.unescape()» = reader.readPrimitiveDoubleAsAttribute(root, "«att.getXMLName()»"); 
                «ELSE-»
                    double «att.name.unescape()» = reader.readPrimitiveDoubleAsAttribute(root, "«att.getXMLName()»", "«att.xmlPattern»"); 
                «ENDIF-»
            «ELSEIF att.type.getClassName() == "java.util.Date"-»
                Date «att.name.unescape()» = reader.readDateAsAttribute(root, "«att.getXMLName()»", "«att.xmlPattern == null ? "MM/dd/yyyy hh:mm" : att.xmlPattern»"); 
            «ELSEIF att.type.getClassName() == "java.lang.String"-»
                String «att.name.unescape()» = reader.readStringAsAttribute(root, "«att.getXMLName()»");
            «ELSEIF att.type.getClassName().isPrimitive()-» 
                «att.type.getClassName().getShortName()» «att.name.unescape()» = reader.readPrimitive«att.type.getClassName().getShortName().toFirstUpper()»AsAttribute(root, "«att.getXMLName()»");
            «ENDIF-»
        «ENDFOREACH-»
                
        «FOREACH getAllAttributes().select(a | a.xmlFormat == EDLXMLFormat::element) AS att-»
            «imports.addImport(att.type.getClassName())-»
            «IF att.type.getClassName() == "boolean"-»
                «imports.addImport("org.w3c.dom.Element")-»
                «imports.addImport("org.w3c.dom.NodeList")-»
                boolean «att.name.unescape()» = false;
                NodeList «att.name.unescape()»List = root.getElementsByTagName("«att.getXMLName()»");
                if («att.name.unescape()»List != null)
                {
                    Element «att.name.unescape()»Element = (Element) «att.name.unescape()»List.item(0); 
                    if («att.name.unescape()»Element != null)
                    {
                        «att.name.unescape()» = reader.readPrimitiveBooleanAsElement(«att.name.unescape()»Element);
                    }
                } 
            «ELSEIF att.type.getClassName() == "java.util.Date"-»
                «imports.addImport("org.w3c.dom.Element")-»
                «imports.addImport("org.w3c.dom.NodeList")-»
                Date «att.name.unescape()» = null;
                NodeList «att.name.unescape()»List = root.getElementsByTagName("«att.getXMLName()»"); 
                if («att.name.unescape()»List != null) 
                {
                    Element «att.name.unescape()»Element = (Element) «att.name.unescape()»List.item(0); 
                    if («att.name.unescape()»Element != null)
                    {
                        «att.name.unescape()» = reader.readDateAsElement(«att.name.unescape()»Element, "«att.xmlPattern == null ? "MM/dd/yyyy hh:mm" : att.xmlPattern»");
                    }
                }
            «ELSEIF att.type.getClassName() == "java.lang.String"-»
                «imports.addImport("org.w3c.dom.Element")-»
                «imports.addImport("org.w3c.dom.NodeList")-»
                String «att.name.unescape()» = null;
                NodeList «att.name.unescape()»List = root.getElementsByTagName("«att.getXMLName()»"); 
                if («att.name.unescape()»List != null)
                {
                    Element «att.name.unescape()»Element = (Element) «att.name.unescape()»List.item(0); 
                    if («att.name.unescape()»Element != null)
                    {
                        «att.name.unescape()» = reader.readStringAsElement(«att.name.unescape()»Element);
                    }
                }
            «ELSEIF att.type.getClassName().isPrimitive()-»
                «imports.addImport("org.w3c.dom.Element")-»
                «imports.addImport("org.w3c.dom.NodeList")-»
                «att.type.getClassName().getShortName()» «att.name.unescape()» = 0; 
                NodeList «att.name.unescape()»List = root.getElementsByTagName("«att.getXMLName()»"); 
                if («att.name.unescape()»List != null)
                {
                    Element «att.name.unescape()»Element = (Element) «att.name.unescape()»List.item(0); 
                    if («att.name.unescape()»Element != null)
                    {
                        «IF att.type.getClassName() == "double" && att.xmlPattern != null-»
                            «att.name.unescape()» = reader.readPrimitiveDoubleAsElement(«att.name.unescape()»Element, "«att.xmlPattern»");
                        «ELSE-»
                            «att.name.unescape()» = reader.readPrimitive«att.type.getClassName().getShortName().toFirstUpper()»AsElement(«att.name.unescape()»Element);
                        «ENDIF-»
                    }
                }
            «ENDIF-»
        «ENDFOREACH-»
        
        «FOREACH getAllAttributes().select(a | a.xmlFormat == EDLXMLFormat::text) AS att-»
            «imports.addImport(att.type.getClassName())-»
            «IF att.type.getClassName() == "boolean"-»
                boolean «att.name.unescape()» = reader.readPrimitiveBooleanAsText(root); 
            «ELSEIF att.type.getClassName() == "java.util.Date"-»
                Date «att.name.unescape()» = reader.readDateAsText(root, "«att.xmlPattern == null ? "MM/dd/yyyy hh:mm" : att.xmlPattern»");
            «ELSEIF att.type.getClassName() == "java.lang.String"-»
                String «att.name.unescape()» = reader.readStringAsText(root);
            «ELSEIF att.type.getClassName().isPrimitive()-»
                «IF att.type.getClassName() == "double" && att.xmlPattern != null-»
                    «att.type.getClassName().getShortName()» «att.name.unescape()» = reader.readPrimitiveDoubleAsText(root, "«att.xmlPattern»");
                «ELSE-»
                    «att.type.getClassName().getShortName()» «att.name.unescape()» = reader.readPrimitive«att.type.getClassName().getShortName().toFirstUpper()»AsText(root);
                «ENDIF-»
            «ENDIF-»
        «ENDFOREACH-»
                    
        // create a new instance of the class
        instance = new «name.unescape()»(
            «FOREACH getAllAttributes() AS att SEPARATOR ", "-»
                «att.name.unescape()»
            «ENDFOREACH-»
            );
        return instance;
    }
    else
    {
        throw new DecodeException("«getClassName()»XMLCodec");    
    }

    //{{ decode
    // insert your custom code here
    //}} decode
}
«ENDDEFINE»
        