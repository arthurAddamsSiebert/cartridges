/*
 * Generates the source code for CAPI interfaces
 */

«IMPORT edl»
«EXTENSION util::EDLUtil»
«EXTENSION org::eclipse::xtend::util::stdlib::properties»


«DEFINE generateInterfaces FOR EDLModel-»
    «FOREACH eAllContents.typeSelect(EDLCAPIInterface).select(i |
        i.getClassName() != "com.intershop.beehive.core.capi.common.Manager" &&
        !i.isSubInterface("com.intershop.beehive.core.capi.common.Manager")) AS i»
        «EXPAND generateInterface FOR i»
    «ENDFOREACH»
«ENDDEFINE»


«DEFINE generateInterface FOR EDLCAPIInterface-»
«FILE getClassName().replaceAll("\\.", "/") + ".java"-»
«LET {} AS imports-»
«EXPAND generateHeader FOR this-»
package «getPackageName()»;

//PREPAREIMPORTS «getPackageName()»

/**
 * This defines the business interface methods for «name.unescape()» as defined in the 
 * object model.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 
 RESOURCE: «qualifiedName»
 
 * @generated 
 */
public interface «name.unescape()»
«IF superClasses.size > 0-»
    extends
    «FOREACH superClasses AS s SEPARATOR ", "-»
        «imports.addImport(s.getClassName())-»
        «s.getClassName().getShortName()-»
    «ENDFOREACH-»
«ENDIF-»
{
    «FOREACH getConstants() AS c-»
        «EXPAND generateConstant(imports) FOR c-»
    «ENDFOREACH-»
    «FOREACH getOperations() AS op-»
        «EXPAND generateOperation(imports) FOR op-»
    «ENDFOREACH-»
    «FOREACH getAttributes() AS att-»
        «IF att.modifiers.contains(EDLCAPIAttributeModifier::localized)-»
            «EXPAND generateGetLEOA(imports) FOR att-»
            «EXPAND generateGetLEOALocale(imports) FOR att-»
            «IF !att.modifiers.contains(EDLCAPIAttributeModifier::readonly)-»
                «EXPAND generateSetLEOA(imports) FOR att-»
            «ENDIF-»
        «ELSEIF att.modifiers.contains(EDLCAPIAttributeModifier::mapped)-»
            «EXPAND generateGetEOA(imports) FOR att-»
            «IF !att.modifiers.contains(EDLCAPIAttributeModifier::readonly)-»
                «EXPAND generateSetEOA(imports) FOR att-»
            «ENDIF-»
        «ELSEIF att.type.getClassName() == "boolean"-»
            «EXPAND generateIsAttributeBoolean(imports) FOR att-»
            «IF !att.modifiers.contains(EDLCAPIAttributeModifier::readonly)-»
                «EXPAND generateSetAttributeBoolean(imports) FOR att-»
            «ENDIF-»
        «ELSE-»
            «EXPAND generateGetAttribute(imports) FOR att-»
            «IF !att.modifiers.contains(EDLCAPIAttributeModifier::readonly)-»
                «EXPAND generateSetAttribute(imports) FOR att-»
            «ENDIF-»
            «IF !att.modifiers.contains(EDLCAPIAttributeModifier::required)-»
                «EXPAND generateGetAttributeNull(imports) FOR att-»
            «ENDIF-»
            «IF !att.modifiers.contains(EDLCAPIAttributeModifier::required) && 
                !att.modifiers.contains(EDLCAPIAttributeModifier::readonly)-»
                «EXPAND generateSetAttributeNull(imports) FOR att-»
            «ENDIF-»
        «ENDIF-»
    «ENDFOREACH-»
    «FOREACH getRelations() AS rel-»
        «IF rel.cardinality == EDLCAPIRelationCardinality::zeroToOne || rel.cardinality == EDLCAPIRelationCardinality::oneToOne-»
            «EXPAND generateGetRelation(imports) FOR rel-»
            «IF !rel.modifiers.contains(EDLCAPIRelationModifier::readonly)-»
                «EXPAND generateSetRelation(imports) FOR rel-»
            «ENDIF-»
        «ELSEIF rel.cardinality == EDLCAPIRelationCardinality::zeroToMany-»
            «EXPAND generateIsInRelation(imports) FOR rel-»
            «EXPAND generateGetRelationCount(imports) FOR rel-»
            «IF rel.modifiers.contains(EDLCAPIRelationModifier::pageable)-»
                «EXPAND generateCreateRelationPageable(imports) FOR rel-»
            «ELSE-»
                «EXPAND generateCreateRelationIterator(imports) FOR rel-»
            «ENDIF-»
            «IF !rel.modifiers.contains(EDLCAPIRelationModifier::readonly)-»
                «EXPAND generateAddToRelation(imports) FOR rel-»
                «EXPAND generateRemoveFromRelation(imports) FOR rel-»
            «ENDIF-»
        «ENDIF-»
    «ENDFOREACH-»
}
//ADDIMPORTS «FOREACH imports AS i SEPARATOR ", "»«i»«ENDFOREACH» 
«ENDLET-»
«ENDFILE-»
«ENDDEFINE»


«DEFINE generateHeader FOR EDLCAPIInterface-»
// =============================================================================
// File: «name.unescape()».java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: CAPIInterface.xpt(checksum: «getProperty("CAPIInterface.xpt.checksum")»)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
«ENDDEFINE»


«DEFINE generateConstant(List[String] imports) FOR EDLCAPIConstant-»
/**
 * A constant.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @generated
 */  
«type.getClassName().getShortName()» «name.unescape()» = «IF "char" != type.getClassName()»«defaultValue.getValue()»;«ELSE»'«((EDLStringLiteral)defaultValue).value»';«ENDIF-» 
«ENDDEFINE»


«DEFINE generateOperation(List[String] imports) FOR EDLCAPIOperation-»
/**
«IF comment != null-»
 * «comment»
«ENDIF-»
 * @generated
 */     
public «type.getClassName().getShortName()»«dimension.getArrayDimension()» «name.unescape()»(
«imports.addImport(type.getClassName())-»
«FOREACH parameters AS p SEPARATOR ", "-»
    «p.type.getClassName().getShortName()»«p.dimension.getArrayDimension()» «p.name.unescape()-»
    «imports.addImport(p.type.getClassName())-»
«ENDFOREACH-»
)
«IF exceptions.size > 0-»
    throws
    «FOREACH exceptions AS e SEPARATOR ", "-»
        «e.getClassName().getShortName()-»
        «imports.addImport(e.getClassName())-»
    «ENDFOREACH-»
«ENDIF-»
;
«ENDDEFINE»


«DEFINE generateGetLEOA(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Returns the value of the localized extensible object attribute
 * "«name.unescape()»" for the current locale.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      The value of the attribute for the current locale, 
 *              or null if it wasn't found
 * @generated
 */
public «type.getClassName().getShortName()» get«name.unescape().toFirstUpper()»();
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateGetLEOALocale(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Returns the value of the localized extensible object attribute 
 * "«name.unescape()»" for the specified locale.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param   aLocale     The locale to determine the attribute value
 * @return  The value of the localized extensible object attribute, or null
 *          if it wasn't found
 * @generated
 */
public «type.getClassName().getShortName()» get«name.unescape().toFirstUpper()»(LocaleInformation aLocale);
«imports.addImport(type.getClassName())-»
«imports.addImport("com.intershop.beehive.core.capi.localization.LocaleInformation")-»
«ENDDEFINE»


«DEFINE generateSetLEOA(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Sets the value of the localized extensible object attribute 
 * "«name.unescape()»" for the specified locale.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       a«name.unescape().toFirstUpper()»    the new value for the attribute
 * @param       aLocale  the locale to set the localized attribute value for
 * @generated
 */
public void set«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» a«name.unescape().toFirstUpper()», LocaleInformation aLocale);
«imports.addImport(type.getClassName())-»
«imports.addImport("com.intershop.beehive.core.capi.localization.LocaleInformation")-»
«ENDDEFINE»


«DEFINE generateGetEOA(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Returns the value of the non-localized extensible object 
 * attribute "«name.unescape()»".<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the value of the non-localized extensible object attribute,
 *              or null if it wasn't found
 * @generated
 */
public «type.getClassName().getShortName()» get«name.unescape().toFirstUpper()»();
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateSetEOA(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Sets the value of the non-localized extensible object
 * attribute "«name.unescape()»".<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       a«name.unescape().toFirstUpper()»   the new value for attribute «name.unescape()»
 * @generated
 */
public void set«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» a«name.unescape().toFirstUpper()»);
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateIsAttributeBoolean(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Returns the value of attribute '«name.unescape()»'.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the value of the attribute '«name.unescape()»'
 * @generated
 */
public boolean is«name.unescape().toFirstUpper()»();
«ENDDEFINE»


«DEFINE generateSetAttributeBoolean(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Sets the value of the attribute '«name.unescape()»'.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       aFlag The new value of the attribute.
 * @generated
 */
public void set«name.unescape().toFirstUpper()»(boolean aFlag);
«ENDDEFINE»


«DEFINE generateGetAttribute(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Returns the value of attribute '«name.unescape()»'.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the value of the attribute '«name.unescape()»'
 * @generated
 */
public «type.getClassName().getShortName()» get«name.unescape().toFirstUpper()»();
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateSetAttribute(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Sets the value of the attribute '«name.unescape()»'.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       aValue        the new value of the attribute
 * @generated
 */
public void set«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» aValue);
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateGetAttributeNull(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Checks whether the value of the attribute '«name.unescape()»' is null.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      true if the value of attribute '«name.unescape()»' is null, 
 *              false otherwise
 * @generated
 */
public boolean get«name.unescape().toFirstUpper()»Null();
«ENDDEFINE»


«DEFINE generateSetAttributeNull(List[String] imports) FOR EDLCAPIAttribute-»
/**
 * Sets the value of the attribute '«name.unescape()»' to null.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       aFlag       meaningless
 * @generated
 */
public void set«name.unescape().toFirstUpper()»Null(boolean aFlag);
«ENDDEFINE»


«DEFINE generateGetRelation(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Returns the object for the relation '«name.unescape()»'.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the object for the relation '«name.unescape()»'
 * @generated
 */
public «type.getClassName().getShortName()» get«name.unescape().toFirstUpper()»();
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateSetRelation(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Sets the object for the relation '«name.unescape()»'.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param «name.unescape()» the new object for the relation
 * @generated
 */
public void set«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» «name.unescape()»);
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateIsInRelation(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Checks whether the specified element participates in the relationship.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       anElement   the element to check for participation
 * @return      true, if the element is part of the relationship, 
 *              false otherwise
 * @generated
 */
public boolean isIn«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» anElement);
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateGetRelationCount(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Determines the number of elements participating in the relationship.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the number of elements participating in the relation
 * @generated
 */
public int get«name.unescape().toFirstUpper()»Count();
«ENDDEFINE»


«DEFINE generateCreateRelationPageable(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Creates a pageable iterator containing the elements of the relationship.
 * The pagesize is set to the number of elements in the relationship. Thus,
 * by default, all elements of the relationship will reside on one page.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the pageable iterator with the elements of the relation
 * @generated
 */
public PageableIterator /*<«type.getClassName().getShortName()»>*/ create«name.unescape().toFirstUpper()»Iterator();
«imports.addImport(type.getClassName())-»
«imports.addImport("com.intershop.beehive.core.capi.paging.PageableIterator")-»
«ENDDEFINE»


«DEFINE generateCreateRelationIterator(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Creates an iterator containing the elements of the relationship.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the iterator with the elements of the relation
 * @generated
 */
public Iterator<«type.getClassName().getShortName()»> create«name.unescape().toFirstUpper()»Iterator();
«imports.addImport(type.getClassName())-»
«imports.addImport("java.util.Iterator")-»
«ENDDEFINE»


«DEFINE generateAddToRelation(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Associates an object via the relation '«name.unescape()»'.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       instance        the new member object of the relation
 * @generated
 */
public void addTo«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» instance);
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateRemoveFromRelation(List[String] imports) FOR EDLCAPIRelation-»
/**
 * Removes an associated object from the relation '«name.unescape()»'.<p>
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       instance        the member of the relation to be removed
 * @generated
 */
public void removeFrom«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» instance);
«imports.addImport(type.getClassName())-»
«ENDDEFINE»
