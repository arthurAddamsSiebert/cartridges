/*
 * Generates the source code for XML DValues
 */

«IMPORT edl»
«EXTENSION util::EDLUtil»
«EXTENSION org::eclipse::xtend::util::stdlib::properties»


«DEFINE generateDValues FOR EDLModel»
    «FOREACH eAllContents.typeSelect(EDLXMLType).select(x |        
        x.isSubClass("com.intershop.beehive.core.common.DValue") ||
        x.getClassName() == "com.intershop.beehive.core.common.DValue") AS x»
        «EXPAND generateDValue FOR x»
    «ENDFOREACH»
«ENDDEFINE»


«DEFINE generateDValue FOR EDLXMLType-»
«FILE getClassName().replaceAll("\\.", "/") + ".java"-»
«LET {} AS imports-»
«EXPAND generateHeader FOR this-»
package «getPackageName()»;

//PREPAREIMPORTS «getPackageName()»

/**
 * This class implements the methods for «name.unescape()»
 * as defined in the object model.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @generated 
 */
public «modifiers.contains(EDLXMLTypeModifier::abstract) ? "abstract" : ""» class «name.unescape()»
«IF superClass != null-»
    extends «superClass.name.unescape()»
    «imports.addImport(superClass.getClassName())-»
«ENDIF-»
    implements
«FOREACH interfaces.getClassName().union({"java.io.Serializable"}) AS i SEPARATOR ", "-»
    «i.getShortName()-»
    «imports.addImport(i)-»
«ENDFOREACH-»
{
    /**
     * Useless constant to make compiler happy.
     *
     * @generated 
     */
    private static final long serialVersionUID = 1L;

    «FOREACH members.typeSelect(EDLXMLAttribute) AS att-»
        «EXPAND generateAttributeMember(imports) FOR att-»
    «ENDFOREACH-»

    //{{ attributes
    // insert your attributes here
    //}} attributes

    «EXPAND generateConstructor(imports) FOR this-»

    «FOREACH members.typeSelect(EDLXMLAttribute) AS att-»
        «IF att.type.getClassName() == "boolean"-»
             «EXPAND generateIsAttribute(imports) FOR att-»
        «ELSEIF att.type.getClassName() == "java.util.Date"-»
             «EXPAND generateGetAttributeDate(imports) FOR att-»             
         «ELSE-»
             «EXPAND generateGetAttribute(imports) FOR att-»             
        «ENDIF-»
    «ENDFOREACH-»

    //{{ methods
    // insert your methods here
    //}} methods
}
//ADDIMPORTS «FOREACH imports AS i SEPARATOR ", "»«i»«ENDFOREACH» 
«ENDLET-»
«ENDFILE-»
«ENDDEFINE»


«DEFINE generateHeader FOR EDLXMLType-»
// =============================================================================
// File: «name.unescape()».java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: XMLValue.xpt(checksum: «getProperty("XMLValue.xpt.checksum")»)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
«ENDDEFINE»


«DEFINE generateAttributeMember(List[String] imports) FOR EDLXMLAttribute-»
/**
 * The attribute «name.unescape()».
 * @generated 
 */
private «type.getClassName().getShortName()» «name.unescape()»;
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateConstructor(List[String] imports) FOR EDLXMLType-»
/**
 * The constructor.
 *
 * @generated modifiable
 */
public «name.unescape()»(
    «FOREACH getAllAttributes() AS att SEPARATOR ", "-»
        «imports.addImport(att.type.getClassName())-»
        «att.type.getClassName().getShortName()» «att.name.unescape()»
    «ENDFOREACH-»)
{
    «IF superClass != null-»
        super(
    «FOREACH superClass.getAllAttributes() AS att SEPARATOR ", "-»
        «att.name.unescape()»
    «ENDFOREACH-»
        );
    «ENDIF-»
    «FOREACH members.typeSelect(EDLXMLAttribute) AS att-»
        «IF att.type.getClassName() == "java.util.Date"-»
            this.«att.name.unescape()» = (Date) «att.name.unescape()».clone();
        «ELSE-»
            this.«att.name.unescape()» = «att.name.unescape()»;
        «ENDIF-»
    «ENDFOREACH-»

    //{{ constructor
    // room for your code
    //}} constructor
}
«ENDDEFINE»


«DEFINE generateIsAttribute(List[String] imports) FOR EDLXMLAttribute-»
/**
 * Returns the value of the flag '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the value of the flag
 * @generated 
 */
public «type.getClassName().getShortName()» is«name.unescape().toFirstUpper()»()
«imports.addImport(type.getClassName())-»
{
    return «name.unescape()»;
}
«ENDDEFINE»


«DEFINE generateGetAttribute(List[String] imports) FOR EDLXMLAttribute-»
/**
 * Returns the value of the attribute '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the value of the attribute
 * @generated 
 */
public «type.getClassName().getShortName()» get«name.unescape().toFirstUpper()»()
«imports.addImport(type.getClassName())-»
{
    return this.«name.unescape()»;
}
«ENDDEFINE»


«DEFINE generateGetAttributeDate(List[String] imports) FOR EDLXMLAttribute-»
/**
 * Returns the value of the attribute '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the value of the attribute
 * @generated 
 */
public «type.getClassName().getShortName()» get«name.unescape().toFirstUpper()»()
«imports.addImport(type.getClassName())-»
{
    return (Date) this.«name.unescape()».clone();
}
«ENDDEFINE»
