/*
 * Generates the source code for XML SAX codecs
 */

«IMPORT edl»
«EXTENSION util::EDLUtil»
«EXTENSION org::eclipse::xtend::util::stdlib::properties»


«REM»Subotnic does not compile with our sax codecs, so don't support them there... :-(«ENDREM»
«DEFINE generateSAXCodecs FOR EDLModel»
    «FOREACH eAllContents.typeSelect(EDLXMLType).select(x |        
        !x.modifiers.contains(EDLXMLTypeModifier::abstract) &&
        x.isSubClass("com.intershop.beehive.core.common.DObject") &&
        !x.getClassName().startsWith("com.intershop.subotnic")) AS x»
        «EXPAND generateSAXCodec FOR x»
    «ENDFOREACH»
«ENDDEFINE»


«DEFINE generateSAXCodec FOR EDLXMLType-»
«FILE getClassName().replaceAll("\\.", "/") + "SAXCodec.java"-»
«LET {} AS imports-»
«EXPAND generateHeader FOR this-»
package «getPackageName()»;

//PREPAREIMPORTS «getPackageName()»

/**
 * This class is an XML decoder for objects of type «name.unescape()».
 * The attributes and relations of the object are read from an XML
 * representation according to the object model.
 *
 * @generated 
 */
public class «name.unescape()»SAXCodec extends SAXCodec
«imports.addImport("com.intershop.beehive.foundation.xmlutil.SAXCodec")-»
{
    /**
     * @generated
     */
    private «name.unescape()» _instance = null;

    /**
     * @generated
     */
    private SAXCodec _delegate = null;

    /**
     * @generated
     */
    private boolean _isNull = false;

    /**
     * @generated
     */
    private int _elementLevel = 0;

    /**
     * @generated
     */
    private boolean _inRoot;
    «FOREACH getAllAttributes().select(a | a.xmlFormat == EDLXMLFormat::element) AS att-»

    /**
     * @generated
     */
    private boolean in«att.name.unescape().toFirstUpper()»;
    «ENDFOREACH-»
    «FOREACH getAllContainments().select(c | c.xmlFormat == EDLXMLFormat::element) AS rel-»
    /**
     * @generated
     */
    private boolean in«rel.name.unescape().toFirstUpper()»;
    «ENDFOREACH-»

    /**
     * @generated
     */
    public Object getResult()
    {
        return _instance;
    }
    
    «EXPAND generateStartElement(imports) FOR this-»
    «EXPAND generateCharacters(imports) FOR this-»
    «EXPAND generateEndElement(imports) FOR this-»
}
//ADDIMPORTS «FOREACH imports AS i SEPARATOR ", "»«i»«ENDFOREACH» 
«ENDLET-»
«ENDFILE-»
«ENDDEFINE»


«DEFINE generateHeader FOR EDLXMLType-»
// =============================================================================
// File: «name.unescape()»SAXCodec.java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: XMLSAXCodec.xpt(checksum: «getProperty("XMLSAXCodec.xpt.checksum")»)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
«ENDDEFINE»


«DEFINE generateStartElement(List[String] imports) FOR EDLXMLType-»
/**
 * @generated
 */
public void startElement(String uri, String localName, String qName, Attributes attributes)
    throws SAXException
«imports.addImport("org.xml.sax.Attributes")-»    
«imports.addImport("org.xml.sax.SAXException")-»    
{
    if (_delegate != null)
    {
        _delegate.startElement(uri, localName, qName, attributes);
        _elementLevel++; 
        return;
    }
        
    if (_isNull)
    {
        return;
    }
        
    if (!_inRoot)
    {
        _inRoot = true;
            
        String nil = attributes.getValue("dbo.null");
        if ("1".equals(nil))
        {
            _isNull = true;
            return;
        }
            
        _instance = new «name.unescape()»();

    «FOREACH getAllAttributes().select(a | a.xmlFormat == EDLXMLFormat::attribute) AS att-»
        «imports.addImport(att.type.getClassName())-»
        «IF att.type.getClassName() == "double"-»
            «imports.addImport("com.intershop.beehive.foundation.xmlutil.DoubleSAXCodec")-»
            «IF att.xmlPattern == null-»
                Double «att.name.unescape()» = DoubleSAXCodec.decode(attributes.getValue("«att.getXMLName()»"));
                _instance.set«att.name.unescape().toUpperCase()»(«att.name.unescape()».doubleValue());
            «ELSE-»
                Double «att.name.unescape()» = DoubleSAXCodec.decode(attributes.getValue("«att.getXMLName()»"), "«att.xmlPattern»");
                _instance.set«att.name.unescape().toUpperCase()»(«att.name.unescape()».doubleValue());
            «ENDIF-»
        «ELSEIF att.type.getClassName() == "java.util.Date"-»
            «imports.addImport("com.intershop.beehive.foundation.xmlutil.DateSAXCodec")-»
            Date «att.name.unescape()» = DateSAXCodec.decode(attributes.getValue("«att.getXMLName()»"), "«att.xmlPattern == null ? "MM/dd/yyyy hh:mm" : att.xmlPattern»");
            _instance.set«att.name.unescape().toFirstUpper()»(«att.name.unescape()»);
        «ELSEIF att.type.getClassName() == "java.lang.String"-»
            String «att.name.unescape()» = attributes.getValue("«att.getXMLName()»");
            _instance.set«att.name.unescape().toFirstUpper()»(«att.name.unescape()»);
        «ELSEIF att.type.getClassName() == "int"-»
            «imports.addImport("com.intershop.beehive.foundation.xmlutil.IntegerSAXCodec")-»
            Integer «att.name.unescape()» = IntegerSAXCodec.decode(attributes.getValue("«att.getXMLName()»"));
            _instance.set«att.name.unescape().toFirstUpper()»(«att.name.unescape()».intValue());
        «ELSE-»          
            «imports.addImport("com.intershop.beehive.foundation.xmlutil." + att.type.getClassName().getShortName().toFirstUpper() + "SAXCodec")-»
            «att.type.getClassName().getShortName().toFirstUpper()» «att.name.unescape()» = «att.type.getClassName().getShortName().toFirstUpper()»SAXCodec.decode(attributes.getValue("«att.getXMLName()»"));
            _instance.set«att.name.unescape().toFirstUpper()»(«att.name.unescape()».«att.type.getClassName().getShortName()»Value());
        «ENDIF-»
    «ENDFOREACH-»
    }

    «FOREACH getAllAttributes().select(a | a.xmlFormat == EDLXMLFormat::element) AS att-»
        «imports.addImport(att.type.getClassName())-»
        «IF att.dimension.size > 0-»
            «imports.addImport("com.intershop.beehive.foundation.xmlutil.ArraySAXCodec")-»
            else if ("«att.getXMLName()»".equals(localName))
            {
                in«att.name.unescape().toFirstUpper()» = true;
                _delegate = new ArraySAXCodec();
                _delegate.startElement(uri, localName, qName, attributes);
                _elementLevel++; 
            }
        «ELSEIF att.type.getClassName() == "int"-»
            «imports.addImport("com.intershop.beehive.foundation.xmlutil.IntegerSAXCodec")-»
            else if ("«att.getXMLName()»".equals(localName))
            {
                in«att.name.unescape().toFirstUpper()» = true;
                _delegate = new IntegerSAXCodec();
                _delegate.startElement(uri, localName, qName, attributes);
                _elementLevel++; 
            }
        «ELSE-»
            «imports.addImport("com.intershop.beehive.foundation.xmlutil." + att.type.getClassName().getShortName().toFirstUpper() + "SAXCodec")-»
            else if ("«att.getXMLName()»".equals(localName))
            {
                in«att.name.unescape().toFirstUpper()» = true;
                _delegate = new «att.type.getClassName().getShortName().toFirstUpper()»SAXCodec();
                _delegate.startElement(uri, localName, qName, attributes);
                _elementLevel++; 
            }
        «ENDIF-»
    «ENDFOREACH-»        
    «FOREACH getAllContainments() AS rel-»
        «imports.addImport(rel.type.getClassName())-»
        «imports.addImport(rel.type.getClassName() + "SAXCodec")-»
        «IF rel.xmlFormat == EDLXMLFormat::element-»
            else if ("«rel.getXMLName()»".equals(localName))
            {
                in«rel.name.unescape().toFirstUpper()» = true;
            }
        «ENDIF-»
        «IF rel.xmlFormat == EDLXMLFormat::text-»
            else if ("«rel.getXMLNameFallback()»".equals(localName))
        «ELSE-»
            else if (in«rel.name.unescape().toFirstUpper()» && "«rel.type.getXMLName()»".equals(localName))
        «ENDIF-»
        {
            // check the type
            String type = attributes.getValue("dbo.type");
            if ((type != null) && (type.length() > 0))
            {
                try
                {
                    Class c = Class.forName(type + "SAXCodec");
                    _delegate = (SAXCodec) c.newInstance();
                }
                catch (Exception cex)
                {
                    throw new SAXException(cex);
                }
            }
            else
            {
                _delegate = new «rel.type.getClassName().getShortName()»SAXCodec();
            }
            _delegate.startElement(uri, localName, qName, attributes);
            _elementLevel++; 
        }
    «ENDFOREACH-»
}
«ENDDEFINE»

    
«DEFINE generateCharacters(List[String] imports) FOR EDLXMLType-»
/**
 * @generated
 */
public void characters(char[] ch, int start, int length) throws SAXException
«imports.addImport("org.xml.sax.SAXException")-»    
{
    if (_isNull)
    {
        return;
    }
    
    if (_delegate != null)
    {
        _delegate.characters(ch, start, length);
    }            
}
«ENDDEFINE»    


«DEFINE generateEndElement(List[String] imports) FOR EDLXMLType-»
/**
 * @generated
 */
public void endElement(String uri, String localName, String qName) throws SAXException
«imports.addImport("org.xml.sax.SAXException")-»    
{
    if (_isNull)
    {
        return;
    }
    
    if (_delegate != null)
    {
        _elementLevel--;
    } 
    
    if ("«getXMLName()»".equals(localName))
    {
        _inRoot = false;
    }    
       «FOREACH getAllAttributes().select(a | a.xmlFormat == EDLXMLFormat::element) AS att-»
        else if (in«att.name.unescape().toFirstUpper()» && "«att.getXMLName()»".equals(localName) && _elementLevel == 0)
        {
            «IF att.type.getClassName() == "int"-»
                _delegate.endElement(uri, localName, qName);
                Integer«att.dimension.getArrayDimension()» result = (Integer«att.dimension.getArrayDimension()») _delegate.getResult();
                _instance.set«att.name.unescape().toFirstUpper()»(result);
            «ELSEIF att.type.getClassName() == "java.util.Date"-»
                _delegate.endElement(uri, localName, qName);
                Date«att.dimension.getArrayDimension()» result = (Date«att.dimension.getArrayDimension()») _delegate.getResult();
                _instance.set«att.name.unescape().toFirstUpper()»(result);
            «ELSE-»
                _delegate.endElement(uri, localName, qName);
                «att.type.getClassName().getShortName().toFirstUpper()»«att.dimension.getArrayDimension()» result = («att.type.getClassName().getShortName().toFirstUpper()»«att.dimension.getArrayDimension()») _delegate.getResult();
                _instance.set«att.name.unescape().toFirstUpper()»(result);
            «ENDIF-»
            in«att.name.unescape().toFirstUpper()» = false;
            _delegate = null;
        }
       «ENDFOREACH-»       
       «FOREACH getAllContainments() AS rel-»
           «IF rel.xmlFormat == EDLXMLFormat::element-»
            else if ("«rel.getXMLName()»".equals(localName) && _elementLevel == 0)
            {
                in«rel.name.unescape().toFirstUpper()» = false;
            }
        «ENDIF-»
           «IF rel.xmlFormat == EDLXMLFormat::text-»
            else if ("«rel.getXMLNameFallback()»".equals(localName) && _elementLevel == 0)
        «ELSE-»
            else if (in«rel.name.unescape().toFirstUpper()» && "«rel.type.getXMLName()»".equals(localName) && _elementLevel == 0)
           «ENDIF-»
        {
            _delegate.endElement(uri, localName, qName);
            «IF rel.cardinality == EDLXMLCardinality::zeroToOne-»
                «rel.type.getClassName().getShortName()» result = («rel.type.getClassName().getShortName()») _delegate.getResult();
                _instance.set«rel.name.unescape().toFirstUpper()»(result);
            «ELSEIF rel.cardinality == EDLXMLCardinality::zeroToMany-»
                «rel.type.getClassName().getShortName()» result = («rel.type.getClassName().getShortName()») _delegate.getResult();
                _instance.addTo«rel.name.unescape().toFirstUpper()»(result);
            «ENDIF-»
            _delegate = null;
        }
       «ENDFOREACH-»
    else
    {
        if (_delegate != null)
        {
            _delegate.endElement(uri, localName, qName);
        }
    }
}
«ENDDEFINE»
