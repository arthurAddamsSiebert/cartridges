/*
 * Generates the source code for XML DObjects
 */

«IMPORT edl»
«EXTENSION util::EDLUtil»
«EXTENSION org::eclipse::xtend::util::stdlib::properties»


«DEFINE generateDObjects FOR EDLModel»
    «FOREACH eAllContents.typeSelect(EDLXMLType).select(x |        
        x.isSubClass("com.intershop.beehive.core.common.DObject") ||
        x.getClassName() == "com.intershop.beehive.core.common.DObject") AS x»
        «EXPAND generateDObject FOR x»
    «ENDFOREACH»
«ENDDEFINE»


«DEFINE generateDObject FOR EDLXMLType-»
«FILE getClassName().replaceAll("\\.", "/") + ".java"-»
«LET {} AS imports-»
«EXPAND generateHeader FOR this-»
package «getPackageName()»;

//PREPAREIMPORTS «getPackageName()»
//{{ imports
// insert your imports here
//}} imports

/**
 * This interface defines  methods for «name.unescape()» as defined in the 
 * object model.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @generated 
 */
public «modifiers.contains(EDLXMLTypeModifier::abstract) ? "abstract" : ""» class «name.unescape()»
«IF superClass != null-»
    extends «superClass.name.unescape()»
    «imports.addImport(superClass.getClassName())-»
«ENDIF-»
    implements
«FOREACH interfaces.getClassName().union({"java.io.Serializable"}) AS i SEPARATOR ", "-»
    «i.getShortName()-»
    «imports.addImport(i)-»
«ENDFOREACH-»
{
    /**
     * @generated 
     */
    private static final long serialVersionUID = 1L;

    «FOREACH members.typeSelect(EDLXMLAttribute) AS att-»
        «EXPAND generateAttributeMember(imports) FOR att-»
    «ENDFOREACH-»
    «FOREACH members.typeSelect(EDLXMLContainment) AS c-»
        «IF c.cardinality == EDLXMLCardinality::zeroToOne-»
            «EXPAND generateContainmentMemberOne(imports) FOR c-»
        «ELSEIF c.cardinality == EDLXMLCardinality::zeroToMany-»
            «EXPAND generateContainmentMemberMany(imports) FOR c-»
        «ENDIF-»
    «ENDFOREACH-»    

    //{{ attributes
    // insert your attributes here
    //}} attributes
    
    «FOREACH members.typeSelect(EDLXMLAttribute) AS att-»
        «EXPAND generateSetAttribute(imports) FOR att-»
        «IF att.type.getClassName() == "boolean"-»
             «EXPAND generateIsAttribute(imports) FOR att-»
         «ELSE-»
             «EXPAND generateGetAttribute(imports) FOR att-»             
        «ENDIF-»
    «ENDFOREACH-»
    «FOREACH members.typeSelect(EDLXMLContainment) AS c-»
        «IF c.cardinality == EDLXMLCardinality::zeroToOne-»
            «EXPAND generateSetContainmentOne(imports) FOR c-»
            «EXPAND generateGetContainmentOne(imports) FOR c-»
        «ELSEIF c.cardinality == EDLXMLCardinality::zeroToMany-»
            «EXPAND generateAddContainmentMany(imports) FOR c-»
            «EXPAND generateRemoveContainmentMany(imports) FOR c-»
            «EXPAND generateGetContainmentMany(imports) FOR c-»
            «EXPAND generateGetContainmentCountMany(imports) FOR c-»
        «ENDIF-»
    «ENDFOREACH-»

    //{{ methods
    // insert your methods here
    //}} methods
}
//ADDIMPORTS «FOREACH imports AS i SEPARATOR ", "»«i»«ENDFOREACH» 
«ENDLET-»
«ENDFILE-»
«ENDDEFINE»


«DEFINE generateHeader FOR EDLXMLType-»
// =============================================================================
// File: «name.unescape()».java
// Generated by JGen Code Generator from INTERSHOP Communications AG.
// Generator template: XMLObject.xpt(checksum: «getProperty("XMLObject.xpt.checksum")»)
// =============================================================================
// The JGen Code Generator software is the property of INTERSHOP Communications AG. 
// Any rights to use are granted under the license agreement. 
// =============================================================================
«ENDDEFINE»


«DEFINE generateAttributeMember(List[String] imports) FOR EDLXMLAttribute-»
/**
 * The attribute «name.unescape()».
 * @generated
 */
private «type.getClassName().getShortName()»«dimension.getArrayDimension()» «name.unescape()» «defaultValue != null ? "= " + defaultValue.getValue() : ""»;
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateContainmentMemberOne(List[String] imports) FOR EDLXMLContainment-»
/**
 * The relation «name.unescape()».
 * @generated
 */
private «type.getClassName().getShortName()» «name.unescape()»;
«imports.addImport(type.getClassName())-»
«ENDDEFINE»


«DEFINE generateContainmentMemberMany(List[String] imports) FOR EDLXMLContainment-»
/**
 * The collection for the relation «name.unescape()».
 * @generated
 */
public Vector «name.unescape()» = new Vector(1);
«imports.addImport("java.util.Vector")-»
«ENDDEFINE»


«DEFINE generateIsAttribute(List[String] imports) FOR EDLXMLAttribute-»
/**
 * Returns the value of the flag '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the value of the flag
 * @generated
 */
public boolean is«name.unescape().toFirstUpper()»()
{
    return «name.unescape()»;
}
«ENDDEFINE»


«DEFINE generateSetAttribute(List[String] imports) FOR EDLXMLAttribute-»
/**
 * Sets the value of the attribute '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       «name.unescape()»    the value of the attribute
 * @generated
 */
public void set«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()»«dimension.getArrayDimension()» «name.unescape()»)
«imports.addImport(type.getClassName())-»
{
    this.«name.unescape()» = «name.unescape()»;
}
«ENDDEFINE»


«DEFINE generateGetAttribute(List[String] imports) FOR EDLXMLAttribute-»
/**
 * Returns the value of the attribute '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the value of the attribute
 * @generated
 */
public «type.getClassName().getShortName()»«dimension.getArrayDimension()» get«name.unescape().toFirstUpper()»()
«imports.addImport(type.getClassName())-»
{
    return «name.unescape()»;
}
«ENDDEFINE»


«DEFINE generateSetContainmentOne(List[String] imports) FOR EDLXMLContainment-»
/**
 * Sets the value of the relation '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       «name.unescape()»      the value of the relation
 * @generated
 */
public void set«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» «name.unescape()»)
«imports.addImport(type.getClassName())-»
{
    this.«name.unescape()» = «name.unescape()»;
}
«ENDDEFINE»


«DEFINE generateGetContainmentOne(List[String] imports) FOR EDLXMLContainment-»
/**
 * Returns the value of the relation '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the value of the relation
 * @generated
 */
public «type.getClassName().getShortName()» get«name.unescape().toFirstUpper()»()
«imports.addImport(type.getClassName())-»
{
    return «name.unescape()»;
}
«ENDDEFINE»


«DEFINE generateAddContainmentMany(List[String] imports) FOR EDLXMLContainment-»
/**
 * Adds a value to the relation '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       value   the value to be added
 * @generated
 */
public void addTo«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» value)
«imports.addImport(type.getClassName())-»
{
    if («name.unescape()» == null)
    {
        «name.unescape()» = new Vector(2);
    }
    «name.unescape()».addElement(value);
}
«ENDDEFINE»


«DEFINE generateRemoveContainmentMany(List[String] imports) FOR EDLXMLContainment-»
/**
 * Removes a value from the relation '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @param       value   the value to be removed
 * @generated
 */
public void removeFrom«name.unescape().toFirstUpper()»(«type.getClassName().getShortName()» value)
«imports.addImport(type.getClassName())-»
{
    if («name.unescape()» != null)
    {
        «name.unescape()».removeElement(value);
    }
}
«ENDDEFINE»


«DEFINE generateGetContainmentMany(List[String] imports) FOR EDLXMLContainment-»
/**
 * Returns all elements of the relation '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the enumeration of values of type "«type.getClassName().getShortName()»"
 * @generated
 */
public Enumeration get«name.unescape().toFirstUpper()»()
«imports.addImport("java.util.Enumeration")-»
«imports.addImport("com.intershop.beehive.foundation.util.Iterators")-»
{
    if («name.unescape()» == null)
    {
        return Iterators.createEmptyEnumeration();
    }        
    return «name.unescape()».elements();
}
«ENDDEFINE»


«DEFINE generateGetContainmentCountMany(List[String] imports) FOR EDLXMLContainment-»
/**
 * Returns the number of elements for the relation '«name.unescape()»'.
«IF comment != null-»
 * «comment»
«ENDIF-»
 *
 * @return      the number of elements
 * @generated
 */
public int get«name.unescape().toFirstUpper()»Count()
{
    if («name.unescape()» == null)
    {
        return 0;
    }
    return «name.unescape()».size();
}
«ENDDEFINE»
