<?xml version="1.0" encoding="UTF-8"?>
<cheatsheet title="Micro Service ${name}">
	<intro>
		<description>
${if(displayName)}			<b>${displayName}</b>
${if(displayName)}			<br />
${if(description)}			${description}
${if(description)}			<br />
			Initially, this microservice contains a simple REST API that produces
			welcome messages.
		</description>
	</intro>	
	<item title="Application: ${cap(serviceName)}Application">
		<description>
			This class is the central point of this service. 
			It inherits from <b>com.intershop.common.webapp.capi.server.BaseApplication</b>, 
			which itself is a <b>javax.ws.rs.core.Application</b>, to make sure that certain features, 
			like support for Swagger documentation, or Google Guice is configured and available. 
		</description>
  	  	<subitem
	        label="Open ${cap(serviceName)}Application"
	        skip="true">
	     	<command
	           required="false"
	           serialization="com.intershop.studio.core.ui.openFileCommand(com.intershop.studio.core.ui.openFileCommand.name=/${name}/src/main/java/${fileNameFromJavaName(basePkg)}/internal/remote/service/${cap(serviceName)}Application.java)"/>
	  	</subitem>
	</item>
	<item title="Service Implementation: ${cap(serviceName)}ServiceImpl">
		<description>
			This class contains the methods that produce the welcome messages.
			Messages are annotated with necessary <b>@javax.ws.rx.Path</b> as well as 
			Swagger API annotations in order to declare and document the implemented API. 
		</description>
  	  	<subitem
	        label="Open ${cap(serviceName)}ServiceImpl"
	        skip="true">
	     	<command
	           required="false"
	           serialization="com.intershop.studio.core.ui.openFileCommand(com.intershop.studio.core.ui.openFileCommand.name=/${name}/src/main/java/${fileNameFromJavaName(basePkg)}/internal/remote/service/${cap(serviceName)}ServiceImpl.java)"/>
	  	</subitem>
	</item>
	<item title="Build and Deployment: build.gradle">
		<description>
			This service uses Gradle as build tool. 
			The <b>build.gradle</b> contains dependencies to various libraries to ease dealing with tests, 
			logging, application and service handling and much more. 			
		</description>
  	  	<subitem
	        label="Open build.gradle"
	        skip="true">
	     	<command
	           required="false"
	           serialization="com.intershop.studio.core.ui.openFileCommand(com.intershop.studio.core.ui.openFileCommand.name=/${name}/build.gradle)"/>
	  	</subitem>
	</item>
	<item title="JUnit Test: ${cap(serviceName)}ServiceTest">
		<description>
			This test uses an <b>com.intershop.common.test.capi.server.ExternalApplicationServerRule.ExternalApplicationServerRule</b> which
		    runs this service as external program. Along with this service, an Eureka server gets started which is used for service discovery.
			The service itself is requested using a <b>javax.ws.rs.client.WebTarget</b> that is provided by the <b>com.intershop.common.webinterface.capi.WebTargetFactory</b>. 
			Note, the usage of the actual URL of the service as well as the notation 'service://${serviceName}' that will be resolved automatically using the built in Eureka support. 
		</description>
  	  	<subitem
	        label="Open ${cap(serviceName)}ServiceImpl"
	        skip="true">
	     	<command
	           required="false"
	           serialization="com.intershop.studio.core.ui.openFileCommand(com.intershop.studio.core.ui.openFileCommand.name=/${name}/src/test/java/${fileNameFromJavaName(basePkg)}/capi/remote/${cap(serviceName)}ServiceTest.java)"/>
	  	</subitem>
	</item>
	<item title="Launch Welcome Service">
		<description>
			This project contains a ready to use launch configuration. Select menu <b>Run/Run Configurations...</b> or 
			<b>Run/Debug Configurations...</b> and choose in the launch dialog <b>Java Application: Application Server[${serviceName}].</b>
		</description>
  	  	<subitem
	        label="Run.."
	        skip="true">
		  <command
	       	required="false"
        	serialization="org.eclipse.debug.ui.commands.OpenRunConfigurations"/>
	  	</subitem>
	</item>
	<item title="View and Test API using Swagger UI">
		<description>
			Once you service runs it listens on either the specified port or on a free one. Open the browser and enter the URL
			'http://localhost:[PORT]/api/' in order to view the API this service exposes.
			Use e.g. the URL 'http://localhost:[PORT]/${serviceName}/html/[Your_Name]' to receive a simple formatted welcome from this service.
		</description>
  	  	<subitem
	        label="Open API in Browser"
	        skip="true">
		  <command
        	required="false"
${notZero(port)}        	serialization="org.eclipse.ui.browser.openBrowser(url=http://localhost:${port}/api/,)"/>
${zero(port)}        	serialization="org.eclipse.ui.browser.openBrowser(url=http://localhost/api/,)"/>
	  	</subitem>
  	  	<subitem
	        label="Show Welcome in Browser"
	        skip="true">
		  <command
        	required="false"
${notZero(port)}        	serialization="org.eclipse.ui.browser.openBrowser(url=http://localhost:${port}/${serviceName}/html/MyName,)"/>
${zero(port)}        	serialization="org.eclipse.ui.browser.openBrowser(url=http://localhost/${serviceName}/html/MyName,)"/>
	  	</subitem>
	</item>
</cheatsheet>
