/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-16 22:40:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.app_005fsf_005fresponsive_005fcostcenter.default_.modules.b2bCostCenterUtils;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.google.common.base.Strings;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;

public final class CostCenterBudgetProgressBar_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write('\n');
      out.write('\n');
 
setEncodingType("text/html"); 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("CostCenter"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",5,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("CostCenter:Extension(\"CostCenterBOOrderExtension\")")); getPipelineDictionary().put("CostCenterOrderBOOrderExtension", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("CostCenterOrderBOOrderExtension"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",9,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("CostCenter")); getPipelineDictionary().put("CostCenterBO", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("Label"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",16,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("Label")); getPipelineDictionary().put("Label", temp_obj);} 
 } else { 
 {Object temp_obj = (localizeText(context.getFormattedValue("account.costcenter.form.field.budget.label",null))); getPipelineDictionary().put("Label", temp_obj);} 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("CostCenterOrderBOOrderExtension:BudgetLevel"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",21,e);}if (_boolean_result) { 
      out.write(' ');
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) ((new Double( ((Number) getObject("CostCenterOrderBOOrderExtension:BudgetLevel")).doubleValue() *((Number) new Double(100)).doubleValue())))).doubleValue() >((Number)(new Double(100))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",22,e);}if (_boolean_result) { 
 {Object temp_obj = ("100"); getPipelineDictionary().put("PERCENT", temp_obj);} 
 } else { 
 {Object temp_obj = (((new Double( ((Number) getObject("CostCenterOrderBOOrderExtension:BudgetLevel")).doubleValue() *((Number) new Double(100)).doubleValue())))); getPipelineDictionary().put("PERCENT", temp_obj);} 
 } 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) ((disableErrorMessages().isDefined(getObject("DisplayAs"))))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",31,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("CostCenterOrderBOOrderExtension:BudgetLevel"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",32,e);}if (_boolean_result) { 

					PipelineDictionary dict = getPipelineDictionary();
					String budgetPeriod = dict.get("CostCenterBO:BudgetPeriod");
					String capitalizedBudgetPeriod;
					if (Strings.isNullOrEmpty(budgetPeriod))
					{
						capitalizedBudgetPeriod = "";
					}
					else
					{
						capitalizedBudgetPeriod = Character.toUpperCase(budgetPeriod.charAt(0)) + budgetPeriod.substring(1);
					}

					dict.put("CapitalizedBudgetPeriod", capitalizedBudgetPeriod);
				
      out.write("<div data-toggle=\"popover\" data-html=\"true\" data-placement=\"top\" class=\"progress\" data-content=\"<p>");
 {String value = null;try{value=context.getFormattedValue(getObject("CapitalizedBudgetPeriod"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {48}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;");
 {String value = null;try{value=context.getFormattedValue(getObject("Label"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {48}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</p>\n<div class='row'>\n<div class='col-md-3'><label>");
 {out.write(localizeISText("account.user.list.spent.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</label></div>\n<div class='col-md-5 text-nowrap'><span data-testing-id='cost-center-orders-total' class='pull-right'>");
 {String value = null;try{value=context.getFormattedValue(getObject("CostCenterOrderBOOrderExtension:OrdersTotal"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {51}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</span></div>\n<div class='col-md-3 text-nowrap'><span class='pull-right'>");
 {String value = null;try{value=context.getFormattedValue(getObject("CostCenterOrderBOOrderExtension:BudgetLevelPercentage"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {52}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("%</span></div>\n</div>\n<div class='row'>\n<div class='col-md-3'><label>");
 {out.write(localizeISText("account.user.list.left.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</label></div>\n<div class='col-md-5 text-nowrap'><span data-testing-id='cost-center-remaining-budget' class='pull-right'>");
 {String value = null;try{value=context.getFormattedValue(getObject("CostCenterOrderBOOrderExtension:getRemainingBudget"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {56}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</span></div>\n<div class='col-md-3 text-nowrap'><span class='pull-right'>");
 {String value = null;try{value=context.getFormattedValue(getObject("CostCenterOrderBOOrderExtension:RemainingBudgetLevelPercentage"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {57}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("%</span></div>\n</div>\">\n<div class=\"progress-bar");
 _boolean_result=false;try {_boolean_result=((Boolean)(((( ((Number) getObject("CostCenterOrderBOOrderExtension:BudgetLevel")).doubleValue() >=((Number)(new Double(1.0))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",59,e);}if (_boolean_result) { 
      out.write(" progress-bar-danger");
 } 
      out.write("\" role=\"progressbar\" aria-valuenow=\"");
 {String value = null;try{value=context.getFormattedValue(((new Double( ((Number) getObject("CostCenterOrderBOOrderExtension:BudgetLevel")).doubleValue() *((Number) new Double(100)).doubleValue()))),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {59}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\naria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: ");
 {String value = null;try{value=context.getFormattedValue(getObject("PERCENT"),null,"DecimalSeparator=.");}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {60}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("%;\">\n<span class=\"progress-display\">");
 {String value = null;try{value=context.getFormattedValue(((new Double( ((Number) getObject("CostCenterOrderBOOrderExtension:BudgetLevel")).doubleValue() *((Number) new Double(100)).doubleValue()))),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {61}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("%</span>\n</div>\n</div>");
 } 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("DisplayAs")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("DisplayAs"),null).equals(context.getFormattedValue("dl-ListItem",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",71,e);}if (_boolean_result) { 
      out.write(' ');
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("CostCenterOrderBOOrderExtension:BudgetLevel"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",72,e);}if (_boolean_result) { 
      out.write("<dt>");
 {String value = null;try{value=context.getFormattedValue(getObject("Label"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {73}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</dt>\n<dd>\n<div data-toggle=\"popover\" data-html=\"true\" data-placement=\"top\" class=\"progress\" data-content=\"<p>");
 {String value = null;try{value=context.getFormattedValue(getObject("Label"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {75}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</p>\n<div class='row'>\n<div class='col-md-3'><label>");
 {out.write(localizeISText("account.user.list.spent.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</label></div>\n<div class='col-md-5 text-nowrap'><span data-testing-id='cost-center-orders-total' class='pull-right'>");
 {String value = null;try{value=context.getFormattedValue(getObject("CostCenterOrderBOOrderExtension:OrdersTotal"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {78}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</span></div>\n<div class='col-md-3 text-nowrap'><span class='pull-right'>");
 {String value = null;try{value=context.getFormattedValue(getObject("CostCenterOrderBOOrderExtension:BudgetLevelPercentage"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {79}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("%</span></div>\n</div>\n<div class='row'>\n<div class='col-md-3'><label>");
 {out.write(localizeISText("account.user.list.left.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</label></div>\n<div class='col-md-5 text-nowrap'><span data-testing-id='cost-center-remaining-budget' class='pull-right'>");
 {String value = null;try{value=context.getFormattedValue(getObject("CostCenterOrderBOOrderExtension:getRemainingBudget"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {83}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</span></div>\n<div class='col-md-3 text-nowrap'><span class='pull-right'>");
 {String value = null;try{value=context.getFormattedValue(getObject("CostCenterOrderBOOrderExtension:RemainingBudgetLevelPercentage"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {84}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("%</span></div>\n</div>\">\n<div class=\"progress-bar");
 _boolean_result=false;try {_boolean_result=((Boolean)(((( ((Number) getObject("CostCenterOrderBOOrderExtension:BudgetLevel")).doubleValue() >=((Number)(new Double(1.0))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",86,e);}if (_boolean_result) { 
      out.write(" progress-bar-danger");
 } 
      out.write("\" role=\"progressbar\" aria-valuenow=\"");
 {String value = null;try{value=context.getFormattedValue(((new Double( ((Number) getObject("CostCenterOrderBOOrderExtension:BudgetLevel")).doubleValue() *((Number) new Double(100)).doubleValue()))),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {86}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\naria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: ");
 {String value = null;try{value=context.getFormattedValue(getObject("PERCENT"),null,"DecimalSeparator=.");}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {87}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("%;\">\n<span class=\"progress-display\">");
 {String value = null;try{value=context.getFormattedValue(((new Double( ((Number) getObject("CostCenterOrderBOOrderExtension:BudgetLevel")).doubleValue() *((Number) new Double(100)).doubleValue()))),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {88}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("%</span>\n</div>\n</div>\n</dd>");
 } 
 } 
 } 
 } 
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
