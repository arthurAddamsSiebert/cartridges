/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-16 22:40:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.app_005fsf_005fresponsive_005fcostcenter.default_.account.costcenter;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class CostCenter_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 {try{String currentCacheTime = (String)((com.intershop.beehive.core.capi.request.ServletResponse)response).getHeaderValue(TemplateConstants.PAGECACHE_HEADER);if (currentCacheTime!=null && !"00".equals(currentCacheTime)) {Logger.debug(this, "ISCACHE 'forbidden' overwrites prior caching declaration.");}response.setHeader(TemplateConstants.PAGECACHE_HEADER, "00");}catch(Exception e){Logger.error(this,"ISCACHE failed. Line: {2}",e);}} 
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"modules/B2BModulesCostCenter", null, "4");} 
 processOpenTag(response, pageContext, "userpermissionmap", new TagParameter[] {
new TagParameter("User",getObject("UserBO")),
new TagParameter("UserPermissionMap","UserPermissionMap")}, 6); 
      out.write("<div class=\"breadcrumbs row\">");
 processOpenTag(response, pageContext, "accountbreadcrumb", new TagParameter[] {
new TagParameter("trailtext",localizeText(context.getFormattedValue("account.costcenter.list.title",null)))}, 9); 
      out.write("</div>\n<div class=\"marketing-area\">");
 processOpenTag(response, pageContext, "marketingslot", new TagParameter[] {
new TagParameter("id","baseMarketing")}, 14); 
      out.write("</div>\n<div class=\"account-wrapper\" data-testing-id=\"cost-center-page\">\n<div class=\"row account-main\">\n<div class=\"col-md-3 account-nav-box\">");
 processOpenTag(response, pageContext, "accountnavigation", new TagParameter[] {
new TagParameter("selecteditem","COSTCENTER")}, 22); 
      out.write("</div>\n<div class=\"col-md-9\">\n<div class=\"marketing-area\">");
 processOpenTag(response, pageContext, "marketingslot", new TagParameter[] {
new TagParameter("id","contentMarketing")}, 29); 
      out.write("</div>\n<div class=\"row section section-seperator\"> \n<div class=\"col-xs-12 col-md-6\"> \n<h1>");
 {out.write(localizeISText("account.costcenter.list.title","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</h1>\n</div>");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("UserPermissionMap:get(\"APP_B2B_MANAGE_COSTCENTER\")"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",38,e);}if (_boolean_result) { 
      out.write("<div class=\"col-xs-12 col-md-6 text-right\">\n<button\nid=\"open-create-costcenter-modal\"\ndata-url=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewCostCenter-ShowForm",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("CustomerID",null),context.getFormattedValue(getObject("CustomerBO:ID"),null))).addURLParameter(context.getFormattedValue("FormType",null),context.getFormattedValue("create",null))),null));
      out.write("\" \nclass=\"btn btn-default\"\ndata-toggle=\"modal\"\ndata-quick-title=\"");
 {out.write(localizeISText("account.costcenter.create.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write('"');
      out.write('\n');
      out.write('>');
 {out.write(localizeISText("account.costcenter.create.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</button>\n</div>");
 } 
      out.write("</div> \n");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("CostCenterBOs")))).booleanValue() && ((Boolean) (hasLoopElements("CostCenterBOs") ? Boolean.TRUE : Boolean.FALSE)).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",52,e);}if (_boolean_result) { 
      out.write("<div class=\"row \">\n<div class=\"col-xs-12\" > \n<div class=\"list-header\">\n<div class=\"list-header-item col-sm-1\">");
 {out.write(localizeISText("account.costcenter.list.header.no","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</div>\n<div class=\"list-header-item col-sm-3\">");
 {out.write(localizeISText("account.costcenter.list.header.name","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</div>\n<div class=\"list-header-item col-sm-1\">");
 {out.write(localizeISText("account.costcenter.list.header.orders","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</div>\n<div class=\"list-header-item col-sm-7\">");
 {out.write(localizeISText("account.costcenter.list.header.budgetspent","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</div>\n</div>\n<div class=\"list-body\" data-testing-id=\"cost-center-list\">");
 while (loop("CostCenterBOs","CostCenter",null)) { 
      out.write("<div class=\"list-item-row-big list-item-row section section-seperator\"");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) getObject("CostCenter:Active")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",64,e);}if (_boolean_result) { 
      out.write(" class=\"disabled\"");
 } 
      out.write(">\n<div class=\"list-item col-xs-12 col-sm-1\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("CostCenter:ID"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",68,e);}if (_boolean_result) { 
      out.write("<label class=\"hidden-lg hidden-md hidden-sm control-label\">");
 {out.write(localizeISText("account.costcenter.list.header.no","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</label>\n<a href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewCostCenter-Details",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("CostCenterID",null),context.getFormattedValue(getObject("CostCenter:ID"),null)))),null));
      out.write('"');
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) getObject("CostCenter:Active")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",71,e);}if (_boolean_result) { 
      out.write("class=\"text-info\"");
 } 
      out.write('\n');
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("CostCenter:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {73}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</a>");
 } 
      out.write("</div>\n<div class=\"list-item col-xs-12 col-sm-3\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("CostCenter:DisplayName"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",80,e);}if (_boolean_result) { 
      out.write("<label class=\"hidden-lg hidden-md hidden-sm control-label\">");
 {out.write(localizeISText("account.costcenter.list.header.name","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</label>\n<a href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewCostCenter-Details",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("CostCenterID",null),context.getFormattedValue(getObject("CostCenter:ID"),null)))),null));
      out.write('"');
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) getObject("CostCenter:Active")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",83,e);}if (_boolean_result) { 
      out.write("class=\"text-info\"");
 } 
      out.write('\n');
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("CostCenter:DisplayName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {85}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</a>");
 } 
      out.write("</div>\n<div class=\"list-item col-xs-12 col-sm-1\">\n<label class=\"hidden-lg hidden-md hidden-sm control-label\">");
 {out.write(localizeISText("account.costcenter.list.header.orders","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</label>");
 processOpenTag(response, pageContext, "costcenterordercount", new TagParameter[] {
new TagParameter("CostCenter",getObject("CostCenter"))}, 93); 
      out.write("</div >\n<div class=\"list-item col-xs-12 col-sm-6 text-left\" >\n<label class=\"hidden-lg hidden-md hidden-sm control-label\">");
 {out.write(localizeISText("account.costcenter.list.header.budgetspent","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</label>");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("CostCenter:isActive"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",99,e);}if (_boolean_result) { 
 processOpenTag(response, pageContext, "costcenterbudgetprogressbar", new TagParameter[] {
new TagParameter("CostCenter",getObject("CostCenter"))}, 100); 
 } 
      out.write("</div>");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("UserPermissionMap:get(\"APP_B2B_MANAGE_COSTCENTER\")"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",105,e);}if (_boolean_result) { 
      out.write("<div class=\"list-item col-xs-3 text-left-xs col-sm-1 text-right-sm text-right-lg\" >");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("CostCenter:isActive"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",107,e);}if (_boolean_result) { 
      out.write("<a href=\"\"\ndata-url=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewCostCenter-ConfirmDeactivate",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("CostCenterID",null),context.getFormattedValue(getObject("CostCenter:ID"),null)))),null));
      out.write("\"\nclass=\"btn-tool open-costcenter-modal\"\ndata-toggle=\"modal\"\ndata-quick-title=\"");
 {out.write(localizeISText("account.costcenter.dialog.confirm.deactivate.title","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"\n>\n<span class=\"glyphicon glyphicon-ban-circle\" title=\"");
 {out.write(localizeISText("account.costcenter.list.action.deactivate.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"></span>\n</a>");
 } else { 
      out.write("<a href=\"");
 {String value = null;try{value=context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewCostCenter-Activate",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("CostCenterID",null),context.getFormattedValue(getObject("CostCenter:ID"),null)))),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {117}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" class=\"btn-tool\">\n<span class=\"glyphicon glyphicon-ok-circle\" title=\"");
 {out.write(localizeISText("account.costcenter.list.action.activate.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"></span>\n</a>");
 } 
      out.write("<a href=\"\"\ndata-url=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewCostCenter-ConfirmRemove",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("CostCenterID",null),context.getFormattedValue(getObject("CostCenter:ID"),null)))),null));
      out.write("\"\nclass=\"btn-tool open-costcenter-modal\"\ndata-toggle=\"modal\"\ndata-quick-title=\"");
 {out.write(localizeISText("account.costcenter.dialog.confirm.remove.title","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"\n>\n<span class=\"glyphicon glyphicon-trash\" title=\"");
 {out.write(localizeISText("account.costcenter.list.action.remove.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"></span>\n</a>\n</div>");
 } 
      out.write("</div>");
 } 
      out.write("</div>\n</div>\n</div>");
 } else { 
      out.write('<');
      out.write('p');
      out.write('>');
 {out.write(localizeISText("account.costcenter.list.noitems","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</p>");
 } 
 processOpenTag(response, pageContext, "continueshoppinglink", new TagParameter[] {
new TagParameter("isDisplayed",getObject("ContinueShopping"))}, 142); 
      out.write("</div>\n</div>\n</div>\n<div class=\"modal\" id=\"general-costcenter-modal\" role=\"dialog\" aria-labelledby=\"CostCenterLabel\" aria-hidden=\"true\">\n<div class=\"modal-dialog modal-lg\">\n<div class=\"modal-content\">\n<div class=\"modal-header\">\n<button type=\"button\" class=\"close\" data-dismiss=\"modal\">\n<span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span>\n</button>\n<h2 class=\"modal-title\" id=\"modal-title-replacement\"></h2>\n</div>\n<div class=\"modal-body\">\n</div>\n</div>\n</div>\n</div>\n<script type=\"text/javascript\">\n$(document).on('click', '");
      out.print(context.getFormattedValue("#",null));
      out.write("open-create-costcenter-modal', function(event) {\nevent.preventDefault();\nvar button = $(this);\nif ($(this).attr('href')) var url = $(this).attr('href');\nif ($(this).attr('data-url')) var url = $(this).attr('data-url');\nvar modal = $('");
      out.print(context.getFormattedValue("#",null));
      out.write("general-costcenter-modal');\n$(modal).modal('hide');\n$.ajax({\nurl : url,\nsuccess : function(data) {\n$(modal).find('.modal-body').html(data);\n$(modal).find('.modal-title').html(button.attr('data-quick-title'));\n$(modal).modal('show');\nvar form = $(modal).find('form');\nform.bootstrapValidator().on('status.field.bv', function(e, data) {\ndata.bv.disableSubmitButtons(false);\n});\n}\n});\n});\n</script>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
