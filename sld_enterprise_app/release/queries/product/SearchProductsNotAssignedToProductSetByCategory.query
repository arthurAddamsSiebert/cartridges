<?xml version="1.0" encoding="UTF-8"?>
<query>
<parameters>
	<parameter name="ProductDomain" type="com.intershop.beehive.core.capi.domain.Domain" optional="false"/>
	<parameter name="LocaleInformation" type="com.intershop.beehive.core.capi.localization.LocaleInformation" optional="false"/>
	<parameter name="CatalogCategory" type="com.intershop.beehive.xcs.capi.catalog.CatalogCategory" optional="false"/>
	<parameter name="ProductSet" type="com.intershop.beehive.xcs.capi.productset.ProductSet" optional="false"/>
</parameters>
<return-mappings>
	<return-mapping name="Product" type="provider" class="ProductViewProvider">
		<return-attribute name="UUID"/>
		<return-attribute name="DOMAINID"/>
	</return-mapping>
</return-mappings>
<processor name="OracleSQL">
</processor>
<template type="countedobjects">
	    SELECT
	        p.uuid AS UUID, 
	        <template-variable value="ProductDomain:UUID"/> as DOMAINID, 
	        count(*) over() as "ROWCOUNT",
	        p.sorting AS SORTING
	    FROM 
	    (
	        <template-call name="product/GetProductsByAdvancedSearch">
	            <call-parameter name="ProductDomain" value="ProductDomain"/>
	            <call-parameter name="LocaleInformation" value="LocaleInformation"/>
	        </template-call>
	    ) p
	    JOIN
	    (
	        <template-call name="catalog/GetProductCategoryAssignmentsByCategoryID">
	            <call-parameter name="ProductDomain" value="ProductDomain"/>
	            <call-parameter name="CatalogCategory" value="CatalogCategory"/>
	        </template-call>
	    ) pca ON (p.uuid = pca.productid)
	    <template-comment>
			(Un)fortunately we do not support sharing chains, e.g. 
			sharing from channel A to channel B and then from B to C. 
			But if we show non-local products the UI will look like
			sharing chains are supported. @see IS-7572. Thus we fiter
			the shared products and show only locals...
		</template-comment>
		INNER JOIN product locp ON 
		(
			locp.uuid = p.uuid and locp.domainid = <template-variable value="ProductDomain:UUID"/>
		)
	    WHERE NOT EXISTS
	    (
	        SELECT 
	            1 
	        FROM 
	            productsetassignment psa
	        WHERE 
	            psa.productsetuuid = <template-variable value="ProductSet:UUID"/> AND
	            psa.productuuid = p.uuid
	    )
	    ORDER BY pca.position asc, CASE WHEN p.SORTING IS NULL THEN 1 ELSE 0 END ASC, p.SORTING ASC
	    
</template>
</query>
