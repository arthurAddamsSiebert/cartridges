<!---isnoloc--->
<iscontent type="text/javascript" charset="UTF-8" compact="true" templatemarker="false">
<!--- get grid parameters from configuration --->
<isif condition="#isDefined(configuration) AND isDefined(currentapplication)#">
	<!--- get column names for this grid --->
	<isset scope="request" name="configColumns" value="#config.'.columns'#">
	<isset scope="request" name="columns" value="#"'".replace(currentapplication:Configuration:String(configColumns), " ", "', '")."'"#">
	<isif condition="#columns EQ '\'\''#"><isset scope="request" name="columns" value=""></isif>
</isif>

(function () {
	var allColumns = {
		select: {
		    type: 'select',
		    dataKey: 'uuid',
		    single: true,
		    selectedItemsName: 'SelectedObjectUUID',
		    availableItemsName: 'ObjectUUID',
		    width: 30,
		    maxWidth: 30,
		},
		image : {
			type: 'image',
			dataKey: 'image',
			title: '#localizeText("product.productlist.image.title")#',
			width: 40,
			maxWidth: 40,
			sortable: false
		},
		name: {
		    type: 'text',
		    dataKey: 'name',
		    title: '#localizeText("product.productlist.name.title")#',
		    width: 265,
		    maxWidth: 265,
		    sortable: true
		},
		sku: {
			type: 'text',
		    dataKey: 'sku',
		    title: '#localizeText("product.productlist.id.title")#',
		    width: 165,
		    maxWidth: 165,
		    sortable: true,
		    render: function (args) {
		        return '<span title="'+args.row.sku+'">'+args.row.sku+'</span>';
		    }
		},
		supplier: {
		    type: 'text',
		    dataKey: 'supplier',
		    title: '#localizeText("product.productlist.supplier.title")#',
		    sortable: false,
		    width: 180,
		    maxWidth: 180,
		    sortable: true
		},
		value: {
		    type: 'money',
		    dataKey: 'value',
		    title: '#localizeText("product.productlist.listprice.title")#',
		    width: 110,
		    maxWidth: 110,
		    sortable: true
		}, 
		typeCode: {
		    type: 'text',
		    dataKey: 'typeCode',
		    title: '#localizeText("product.productlist.typecode.title")#',
		    sortable: false,
		    width: 150,
		    maxWidth: 150
		},
		status: {
		    type: 'status',
		    dataKey: 'status',
		    title: '#localizeText("product.productlist.status.title")#',
		    sortable: false,
		    width: 110,
		    maxWidth: 110,
		    render: function (args) {
		        var result = [];
		        if (args.row.isOnline) {
		            result.push('<img src="#WebRoot()#/images/status_online.gif" alt="#localizeText("product.productlist.status.online")#" title="#localizeText("product.productlist.status.online")#" border="0" />&nbsp;');
		        }
		        if (args.row.isAvailable) {
		            result.push('<img src="#WebRoot()#/images/status_instock.gif" alt="#localizeText("product.productlist.status.instock")#" title="#localizeText("product.productlist.status.instock")#" border="0" />&nbsp;');
		        }
		        if (args.row.isCategorized) {
		            result.push('<img src="#WebRoot()#/images/status_explicitly_bound.gif" alt="#localizeText("product.productlist.status.categorized")#" title="#localizeText("product.productlist.status.categorized")#" border="0"/>&nbsp;');
		        }
		        if (args.row.isOffered) {
		            result.push('<img src="#WebRoot()#/images/status_offers.gif" alt="#localizeText("product.productlist.status.offered")#" title="#localizeText("product.productlist.status.offered")#" border="0"/>&nbsp;');
		        }
		        if (args.row.isShared) {
		            result.push('<img src="#WebRoot()#/images/status_shared_product_to.gif" alt="#localizeText("product.productlist.status.shared")#" title="#localizeText("product.productlist.status.shared")#" border="0"/>');
		        }
		        return result.join('');
		    }
		}
	},
	names = [<isprint encoding="off" value="#columns#">],
	useAll = names.length === 0,
	columns = [],
	name, column;
	
	function indexOf(list, element) {
		if (list.indexOf) {
			return list.indexOf(element);
		}
		for (var i = 0, len = list.length; i < len; i++) {
			if (list[i] === element) {
				return i;
			}
		}
		return -1;
	}
	
	for (name in allColumns) {
		if (!allColumns.hasOwnProperty(name)) continue;
		
		var column = allColumns[name];
		column.id = name;
	
		// check if column configuration is provided
		if (useAll) {
			// no column configuration
			columns.push(column);
		} else {
			// check if column is needed
			if (indexOf(names, name) !== -1) {
				columns.push(column);
			}
		}
	}
	
	return columns;

})()
<!---/isnoloc--->