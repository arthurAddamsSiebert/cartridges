<iscontent type="text/html" charset="UTF-8" compact="true" templatemarker="false">
<%@page
	import="java.util.Date,
	com.intershop.beehive.core.capi.domain.*,
	com.intershop.beehive.core.capi.naming.*,
	com.intershop.beehive.core.capi.log.*,
	com.intershop.beehive.core.internal.pipeline.*,
	com.intershop.beehive.core.rapi.pipeline.*,
	com.intershop.component.mvc.capi.catalog.*"
%>

<%! PipelineMgr pipelineMgr = (PipelineMgr)NamingMgr.getInstance().lookupManager(PipelineMgr.REGISTRY_NAME); %>

<isif condition="#type eq 'CurrentActivity'#">
	
	<!--- 
		Render the name of the activity
			Example: "..." Monitor 
	--->
	
	<isif condition="#jobconfiguration:CurrentActivity eq 'CreateFileLogger'#">
		<istext key="ImpexMessages.CreatingFileLogger" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'DetermineConfiguration'#">
		<istext key="ImpexMessages.DeterminingConfiguration" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'LockImport'#">
		<istext key="ImpexMessages.LockingImport" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'OpenFile'#">
		<istext key="ImpexMessages.OpeningFile" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'CloseFile'#">
		<istext key="ImpexMessages.ClosingFile" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'CloseLoggers'#">
		<istext key="ImpexMessages.ClosingLoggers" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'OpenFilter'#">
		<istext key="ImpexMessages.OpeningFilter" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'CloseFilter'#">
		<istext key="ImpexMessages.ClosingFilter" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'XMLVerify'#">
		<istext key="ImpexMessages.ValidatingSourceFile" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'CollectXMLStatistics'#">
		<istext key="ImpexMessages.CollectingXMLStatistics" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRPrepare'#">
		<istext key="ImpexMessages.PreparingSqlLoader" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRImport'#">
		<istext key="ImpexMessages.CreatingSqlLoaderFile" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRImport.Category'#">
		<istext key="ImpexMessages.ImportedCategories" parameter0="#getValue(jobconfiguration:CurrentProgressCount_category,INTEGER)#" parameter1="#getValue(jobconfiguration:SourceCount_category,INTEGER)#" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRImport.CategoryRelation'#">
		<istext key="ImpexMessages.ImportedCategoryRelations" parameter0="#getValue(jobconfiguration:CurrentProgressCount_category,INTEGER)#" parameter1="#getValue(jobconfiguration:SourceCount_category,INTEGER)#" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRImport.Product'#">
		<istext key="ImpexMessages.ImportedProducts" parameter0="#getValue(jobconfiguration:ProgressCount_product,INTEGER)#" parameter1="#getValue(jobconfiguration:SourceCount_product,INTEGER)#" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRImport.Offer'#">
		<istext key="ImpexMessages.ImportedOffers" parameter0="#getValue(jobconfiguration:ProgressCount_offer,INTEGER)#" parameter1="#getValue(jobconfiguration:SourceCount_offer,INTEGER)#" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRImport.ProductType'#">
		<istext key="ImpexMessages.ImportedProductTypes" parameter0="#getValue(jobconfiguration:ProgressCount_product-type,INTEGER)#" parameter1="#getValue(jobconfiguration:SourceCount_product-type,INTEGER)#" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRImport.VariationType'#">
		<istext key="ImpexMessages.ImportedVariationTypes" parameter0="#getValue(jobconfiguration:ProgressCount_variation-type,INTEGER)#" parameter1="#getValue(jobconfiguration:SourceCount_product-type,INTEGER)#" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRImport.ProductTypeRelation'#">
		<istext key="ImpexMessages.ImportedProductTypeRelations" parameter0="#getValue(jobconfiguration:ProgressCount_product-type,INTEGER)#" parameter1="#getValue(jobconfiguration:SourceCount_product-type,INTEGER)#" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRImport.CatalogFilter'#">
		<istext key="ImpexMessages.ImportedCatalogViews" parameter0="#getValue(jobconfiguration:ProgressCount_catalog-filter,INTEGER)#" parameter1="#getValue(jobconfiguration:SourceCount_catalog-filter,INTEGER)#" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRImport.PriceScale'#">
		<istext key="ImpexMessages.ImportedPriceScales" parameter0="#getValue(jobconfiguration:ProgressCount_product-price-definition,INTEGER)#" parameter1="#getValue(jobconfiguration:SourceCount_product-price-definition,INTEGER)#" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRImport.User'#">
		<istext key="ImpexMessages.CreatingSqlLoaderFile" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRImport.BMEcat.Header'#">
		<istext key="ImpexMessages.ReadingHeaderInformation" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRImport.Order'#">
		<istext key="ImpexMessages.GeneratingSQLLoaderDataFromOrderImportFile" encoding="off"/>...
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRRun'#">
		<istext key="ImpexMessages.RunningSqlLoader" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'SQLLDRFinish'#">
		<istext key="ImpexMessages.FinishingSqlLoader" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'Refresh Cache'#">
		<istext key="ImpexMessages.RefreshingCache" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'AnalyzeTable'#">
		<istext key="ImpexMessages.AnalyzingDatabaseSchema" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'Export.Category'#">
		<istext key="ImpexMessages.ExportingCategories" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'Export.Product'#">
		<istext key="ImpexMessages.ExportingProducts" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'Export.BMEcat'#">
		<istext key="ImpexMessages.ExportingEntireCatalogAndAllProducts" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'Export.VariationType'#">
		<istext key="ImpexMessages.ExportingVariationTypes" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'Export.Order'#">
		<istext key="ImpexMessages.ExportingOrders" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'Export.User'#">
		<istext key="ImpexMessages.ExportingUsers" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'Export.PromotionCode'#">
		<istext key="ImpexMessages.ExportingPromotionCodes" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'Export.CatalogFilter'#">
		<istext key="ImpexMessages.ExportingCatalogFilters" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'Export.Link'#">
		<istext key="ImpexMessages.ExportingLinks" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'JDBCImport.Link'#">
		<istext key="ImpexMessages.ImportedLinks" parameter0="#getValue(jobconfiguration:ProgressCount_link,INTEGER)#" parameter1="#getValue(jobconfiguration:SourceCount_link,INTEGER)#" encoding="off"/>
	<iselseif condition="#jobconfiguration:CurrentActivity eq 'Export.PriceScale'#">
		<istext key="ImpexMessages.ExportingPriceScales" encoding="off"/>
	<iselse>
		<isif condition="#isDefined(jobconfiguration:CurrentActivity) and (jobconfiguration:CurrentActivity ne '')#">
			<isprint value="#jobconfiguration:CurrentActivity#">
		<iselse>
			&nbsp;
		</isif>
		&nbsp;
	</isif>
	
<iselseif condition="#type eq 'LastExecutionTime'#">
	
	<isif condition="#(((jobconfiguration:ExtendedStatus == 1) OR (jobconfiguration:ExtendedStatus == 2)) AND (jobconfiguration:Status != 1))#">
		&nbsp;
	<iselseif condition="#jobconfiguration:LastExecutionTime:Time == 0#">
		-
	<iselse>
		<isprint value="#jobconfiguration:LastExecutionTime#" style="DATE_SHORT"> <isprint value="#jobconfiguration:LastExecutionTime#" style="DATE_TIME">
	</isif>
	
<iselseif condition="#type eq 'LastExecutionEndTime'#">
	
	<% try { getPipelineDictionary().put("LastExecutionEndTime", new Date(Long.parseLong((String)getObject("JobConfiguration:LastExecutionEndTime")))); } catch(NumberFormatException nfx) {} %><isprint value="#LastExecutionEndTime#" style="DATE_SHORT"> <isprint value="#LastExecutionEndTime#" style="DATE_TIME">
	
<iselseif condition="#type eq 'BOType'#">
	
	<!--- 
		Render the name of the Import/Export type in table description selected by the ProcessPipelineName
			Example: "Promotion" started at ... and successfully finished at ... 
	--->
	
	<isif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPageletExport'#">
		<istext key="PageletTabs.Content.table_tabs_en_background" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPageletContentImport'#">
		<istext key="PageletTabs.Content.table_tabs_en_background" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPageExport'#">
		<istext key="NewViewContextObjectAssignment.Page.table_title" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessIncludeExport'#">
		<istext key="sld_enterprise_app.Include.link" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPageVariantTemplateExport'#">
		<istext key="ComponentSelectComponentSlot.PageTemplate.table_header1" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessComponentTemplateExport'#">
		<istext key="NewPagelet.ComponentTemplate.label" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPageVariantExport'#">
		<istext key="sld_enterprise_app.PageVariant.link" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessComponentExport'#">
		<istext key="NewPagelet.Component.label" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessViewContextExport'#">
		<istext key="ImpexMessages.ViewContext" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessCatalogImport'#">
		<istext key="sld_enterprise_app.Category" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessCatalogExport'#">
		<istext key="sld_enterprise_app.Category" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessProductImport'#">
		<istext key="BrowseClassificationCatalog.Product.table_detail" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessProductExport'#">
		<istext key="BrowseClassificationCatalog.Product.table_detail" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessProductCSVExport'#">
		<istext key="BrowseClassificationCatalog.Product.table_detail" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessBMEcatImport'#">
		<istext key="ImpexMessages.ProductAndCategory" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessBMEcatExport'#">
		<istext key="ImpexMessages.ProductAndCategory" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessOrderExport'#">
		<istext key="ImpexMessages.Order" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessOrderImport'#">
		<istext key="ImpexMessages.Order" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessImageMetadataImport'#">
		<istext key="ImpexMessages.ImageMetadata" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessImageMetadataExport'#">
		<istext key="ImpexMessages.ImageMetadata" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessVariationTypeImport'#">
		<istext key="ImpexMessages.VariationType" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessVariationTypeExport'#">
		<istext key="ImpexMessages.VariationType" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessUserImport'#">
		<istext key="ImpexMessages.User" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessUserExport'#">
		<istext key="ImpexMessages.User" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessCustomerImport'#">
		<istext key="OrderList.Customer.link" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessCustomerExport'#">
		<istext key="OrderList.Customer.link" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPromotionCodeGroupExport'#">
		<istext key="ImpexMessages.PromotionCodeGroup" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPromotionCodeGroupImport'#">
		<istext key="ImpexMessages.PromotionCodeGroup" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPCGImport'#">
		<istext key="ImpexMessages.PromotionCodeGroup" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPromotionImport'#">
		<istext key="ImpexMessages.Promotion" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPromotionCodeExport'#">
		<istext key="ImpexMessages.PromotionCode" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPromotionCodeImport'#">
		<istext key="ImpexMessages.PromotionCode" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessCatalogFilterImport'#">
		<istext key="ImpexMessages.CatalogView" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessCatalogFilterExport'#">
		<istext key="ImpexMessages.CatalogView" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessLocalizationImpex'#">
		<istext key="Home.Localization.link" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPriceScaleImport'#">
		<istext key="ImpexMessages.PriceScale" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPriceScaleExport'#">
		<istext key="ImpexMessages.PriceScale" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessFreightClassImport'#">
		<istext key="ImpexMessages.FreightClass" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessShippingMethodImport'#">
		<istext key="ImpexMessages.ShippingMethod" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessRegionImport'#">
		<istext key="ImpexMessages.Region" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessShippingRuleImport'#">
		<istext key="ImpexMessages.ShippingRule" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessLinkImport'#">
		<istext key="ContentRessourceType.Link" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessLinkExport'#">
		<istext key="ContentRessourceType.Link" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPriceListImport'#">
		<istext key="ImpexMessages.PriceList" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessSearchQueryDefinitionImport'#">
		<istext key="ProductFilter.ProductFilter.text" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessPriceListImportSchedule'#">
		<istext key="ImpexMessages.PriceList" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessScene7ImageImport'#">
		<istext key="ImpexMessages.Scene7Image" encoding="off"/>
	<iselseif condition="#jobconfiguration:BusinessObjectType eq 'PriceList'#">
		<istext key="ImpexMessages.PriceList" encoding="off"/>
	<iselseif condition="#jobconfiguration:BusinessObjectType eq 'FreightClass'#">
		<istext key="ImpexMessages.FreightClass" encoding="off"/>
	<iselseif condition="#jobconfiguration:BusinessObjectType eq 'ShippingMethod'#">
		<istext key="ImpexMessages.ShippingMethod" encoding="off"/>
	<iselseif condition="#jobconfiguration:BusinessObjectType eq 'Region'#">
		<istext key="ImpexMessages.Region" encoding="off"/>
	<iselseif condition="#jobconfiguration:BusinessObjectType eq 'ShippingRule'#">
		<istext key="ImpexMessages.ShippingRule" encoding="off"/>
	<iselseif condition="#jobconfiguration:BusinessObjectType eq 'ProductFilter'#">
		<istext key="ProductFilter.ProductFilter.text" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessStoreImport'#">
		<istext key="serviceparam.param.label.SOAPCrypt_store" encoding="off"/>
	<!--- BEGIN product attribute group impex --->
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessProductAttributeGroupImport'#">
		<istext key="ImpexMessages.ProductAttributeGroup" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineName eq 'ProcessProductAttributeGroupExport'#">
		<istext key="ImpexMessages.ProductAttributeGroup" encoding="off"/>
	<!--- END product attribute group impex --->
	<iselse>
		&nbsp;
	</isif>
	
<iselseif condition="#type eq 'ImpexType'#">
	
	<!--- 
		Rendered in table title
			Example: "Import" Monitor 
	--->
	
	<isif condition="#jobconfiguration:ProcessPipelineStartNode eq 'Validate'#">
		<istext key="ImpexMessages.Validation" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineStartNode eq 'Import'#">
		<istext key="PageletImpexOverview.Import.button" encoding="off"/>
	<iselseif condition="#jobconfiguration:ProcessPipelineStartNode eq 'Export'#">
		<istext key="PageletContentExport.Export.button" encoding="off"/>
	<iselse>
		&nbsp;
	</isif>
	
<iselseif condition="#type eq 'GetImpexType'#">
	
	<isif condition="#jobconfiguration:ProcessPipelineStartNode eq 'Validate'#">
		<isset name="ImpexType" value="Validation" scope="request">
	<iselseif condition="#jobconfiguration:ProcessPipelineStartNode eq 'Import'#">
		<isset name="ImpexType" value="Import" scope="request">
	<iselseif condition="#jobconfiguration:ProcessPipelineStartNode eq 'Export'#">
		<isset name="ImpexType" value="Export" scope="request">
	<iselse>
		&nbsp;
	</isif>
	
<iselseif condition="#type eq 'ValidationPipeline'#">
	
	<%
		String boType = String.valueOf(getObject("jobconfiguration:ProcessPipelineName"));
		String currentPipelineName = (String)getObject("CurrentPipelineName");
		Domain currentDomain = (Domain)getObject("CurrentDomain");
		String pipelineName = null;
			
		/* improvement done,
		but this must be kept due to backward compatibility
		*/		
		if(!("ProcessPCGImport".equals(boType)))
		{		    
		    boType = boType.substring(7);
		}
		else
		{
		    boType = "PromotionCodeGroupImport";
		}

		if (/*This is a temporary hack*/!currentPipelineName.startsWith("ViewChannelPagelet") &&
 			(currentPipelineName.startsWith("ViewChannel") || currentPipelineName.matches("^\\p{Alnum}+_\\d\\d$")))
 		{ 	
 			pipelineName = "ViewChannel" + boType;

 			if (pipelineMgr.lookupPipeline(currentDomain, null, pipelineName) == null)
 			{
 				Repository channel = (Repository)getObject("CurrentChannel");
 				pipelineName = "View" + boType + "_" + channel.getTypeCode();
 			}
 		}
 		else 		
 		{
 			pipelineName = "View" + boType;
 		} 	 	
 		
 		getPipelineDictionary().put("ValidationPipeline", pipelineName + "-ValidateFileRefresh"); 
 	%>
 	
 	#URL(Action(ValidationPipeline), Parameter('JobConfigurationUUID', jobconfiguration:UUID), Parameter('SelectedFile', jobconfiguration:SelectedFile), Parameter(parametername1, parametervalue1))#

<iselseif condition="#type eq 'Status'#">
	
	<isif condition="#(((jobconfiguration:ExtendedStatus == 0) OR (jobconfiguration:ExtendedStatus == 2) OR (jobconfiguration:ExtendedStatus == 3)) AND (not(jobconfiguration:Status == 1) AND (jobconfiguration:LastExecutionTime:Time == 0)))#">
		
		<istext key="ImpexMessages.Waiting" encoding="off"/>
		
	<iselseif condition="#(((jobconfiguration:ExtendedStatus == 1) OR (jobconfiguration:ExtendedStatus == 2)) AND ((jobconfiguration:Status == 0) OR (jobconfiguration:Status == 1)))#">
		
		<istext key="ProcessList.Running.table_detail" encoding="off"/>
		<isset scope="request" name="RefreshStatus" value="true">
		
	<iselse>
		
		<isif condition="#(jobconfiguration:LogCount_Error > 0) and (jobconfiguration:LogCount_Warn > 0)#">
			<span class="error"><istext key="ImpexMessages.CompletedErrorsAndWarnings" parameter0="#getValue(jobconfiguration:LogCount_Error,INTEGER)#" parameter1="#getValue(jobconfiguration:LogCount_Warn,INTEGER)#" encoding="off"/></span>
		<iselseif condition="#jobconfiguration:LogCount_Error > 0#"> 
			<span class="error"><istext key="ImpexMessages.CompletedWithErrors" parameter0="#getValue(jobconfiguration:LogCount_Error,INTEGER)#" encoding="off"/></span>
		<iselseif condition="#jobconfiguration:LogCount_Warn > 0#">
			<span class="error"><istext key="ImpexMessages.CompletedWithWarnings" parameter0="#getValue(jobconfiguration:LogCount_Warn,INTEGER)#" encoding="off"/></span>
		<iselseif condition="#isDefined(jobconfiguration:FinishedWithError) AND (jobconfiguration:FinishedWithError EQ 'true')#">
			<span class="error"><istext key="ImpexMessages.CompletedWithErrors1" encoding="off"/></span>
		<iselse>
			<istext key="ProcessStatusInc.Completed" encoding="off"/>
		</isif>
		
	</isif>
	
<iselseif condition="#type eq 'JobFinished'#">
	
	<!--- Unfortunately the end date of the job will provide as a timestamp and have to convert into a date object before --->
	<% try { getPipelineDictionary().put("JobConfiguration_LastExecutionEndTime", new Date(Long.parseLong((String)getObject("jobconfiguration:LastExecutionEndTime")))); } catch(NumberFormatException nfx) {} %>
	
	<istext key="ImpexMonitor.JobFinished.table_detail" 
		parameter0="#getValue(jobconfiguration:LastExecutionTime, DATE_SHORT).' '.getValue(jobconfiguration:LastExecutionTime, DATE_TIME)#" 
		parameter1="#getValue(JobConfiguration_LastExecutionEndTime, DATE_SHORT).' '.getValue(JobConfiguration_LastExecutionEndTime, DATE_TIME)#" 
		encoding="off"
	/>
	
<iselseif condition="#type eq 'JobFinishedSuccessfully'#">
	
	<!--- Unfortunately the end date of the job will provide as a timestamp and have to convert into a date object before --->
	<% try { getPipelineDictionary().put("JobConfiguration_LastExecutionEndTime", new Date(Long.parseLong((String)getObject("jobconfiguration:LastExecutionEndTime")))); } catch(NumberFormatException nfx) {} %>
	
	<istext key="ImpexMonitor.JobFinishedSuccessfully.table_detail" 
		parameter0="#getValue(jobconfiguration:LastExecutionTime, DATE_SHORT).' '.getValue(jobconfiguration:LastExecutionTime, DATE_TIME)#" 
		parameter1="#getValue(JobConfiguration_LastExecutionEndTime, DATE_SHORT).' '.getValue(JobConfiguration_LastExecutionEndTime, DATE_TIME)#" 
		encoding="off"
	/>
	
</isif>