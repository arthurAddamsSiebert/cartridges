<iscontent charset="UTF-8" type="image/png"><%@page import="
    java.awt.Graphics2D,
    java.awt.geom.AffineTransform,
    java.awt.image.AffineTransformOp,
    java.awt.image.BufferedImage,
    java.io.BufferedInputStream,
    java.io.ByteArrayInputStream,
    java.io.ByteArrayOutputStream,
    java.io.InputStream,
    java.io.IOException,
    java.io.File,
    java.io.FileInputStream,
    javax.imageio.ImageIO,
    javax.naming.InitialContext,
    org.slf4j.LoggerFactory,
    com.intershop.component.foundation.internal.jndi.FileRef
"%><%!
    private static InputStream toInputStream(Object obj) throws IOException {
        if (obj instanceof String) {
            obj = ((String) obj).getBytes("UTF-8");
        }
        if (obj instanceof byte[]) {
            return new ByteArrayInputStream((byte[]) obj);
        }
        if (obj instanceof File) {
            obj = new FileInputStream((File) obj);
        }
        if (obj instanceof FileRef) {
            obj = new FileInputStream((String)((FileRef) obj).get(FileRef.FileRefAddr.TYPE).getContent());
        }
        if (obj instanceof BufferedInputStream) {
            return (BufferedInputStream) obj;
        }
        if (obj instanceof InputStream) {
            return new BufferedInputStream((InputStream) obj);
        }
        throw new IllegalArgumentException("Unsupported object type: " + obj);
    }
%><%
    int width;
    try {
        width = Integer.parseInt(String.valueOf(getObject("Width")));
    } catch (Exception ignored) {
        width =  140;
    }
    int height;
    try {
        height = Integer.parseInt(String.valueOf(getObject("Height")));
    } catch (Exception ignored) {
        height = 60;
    }
    final String uri = String.valueOf(getObject("URI"));
    try {
        final FileRef o = (FileRef)new InitialContext().lookup(uri);
        final InputStream in = toInputStream(o);
        final BufferedImage image;
        try {
            image = ImageIO.read(in);
        } finally {
            in.close();
        }
        if (image == null) {
            throw new UnsupportedOperationException("Unsupported image format: " + uri);
        }
        if (width < image.getWidth() || height < image.getHeight()) {
            // final long t0 = System.currentTimeMillis(); 
            final double scale = Math.min((double)width / image.getWidth(), (double)height / image.getHeight());
            final AffineTransform at = new AffineTransform();
            at.translate(((double)width - scale * image.getWidth()) / 2, ((double)height - scale * image.getHeight()) / 2);
            at.scale(scale, scale);
            final BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
            final Graphics2D g = bi.createGraphics();
            try {
                g.drawImage(image, new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR), 0, 0);
            } finally {
                g.dispose();
            }
            final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            ImageIO.write(bi, "png", buffer);
            // System.err.println("Generated thumbnail for '" + uri + "' (" + width + "x" + height + "/" + scale + ") in "
            //     + (System.currentTimeMillis() - t0) + "ms");
            getPipelineDictionary().put("Buffer", new ByteArrayInputStream(buffer.toByteArray()));
            %><iscache type="relative" minute="30"/><isbinary stream="#Buffer#"/><%
        } else {
            getPipelineDictionary().put("FileRef", o);
            %><isredirect location="#FileRef:StaticURL#"/><%
        }
    } catch (Exception e) {
        // LoggerFactory.getLogger(getClass()).error("Thumbnailing " + uri, e);
        %><isredirect location="#WebRoot() . '/images/no_image_available.gif'#"/><%
    }
%>
