<!---isnoloc--->
<iscontent type="text/javascript" charset="UTF-8" compact="true" templatemarker="false">
<!--- get grid parameters from configuration --->
<isif condition="#isDefined(configuration) AND isDefined(currentapplication)#">
	<!--- get column names for this grid --->
	<isset scope="request" name="configColumns" value="#config.'.columns'#">
	<isset scope="request" name="columns" value="#"'".replace(currentapplication:Configuration:String(configColumns), " ", "', '")."'"#">
</isif>
(function () {
	var allColumns = {
		<isif condition="#isDefined(params:CurrentUserPermissionMap:SLD_MANAGE_USERS)#">
			<!--- select column is only available if the current user has the correct permission --->
			select: {
			    type: 'select',
			    dataKey: 'uuid',
			    selectedItemsName: '<isprint value="#params:SelectedItemsName#">',
			    availableItemsName: '<isprint value="#params:AvailableItemsName#">'
			},
		</isif>
			lastname: {
			    type: 'text',
			    dataKey: 'lastname',
			    title: '<istext key="GridUserColumns.LastName" encoding="off"/>',
			    sortable: false
			},
			lastnameLink: {
			    type: 'link',
			    dataKey: 'lastname',
			    title: '<istext key="GridUserColumns.LastName" encoding="off"/>',
			    url: '<isprint value="#URL(Action('ViewUser-Show')).'?USER_UUID={uuid}'#">',
			    <!---url: '<isprint value="#URL(Action('ViewUser-Show'), Parameter('USER_UUID','{uuid}'))#">',--->
			    params: ['uuid'],
			    sortable: false
			},
			firstname: {
			    type: 'text',
			    dataKey: 'firstname',
			    title: '<istext key="GridUserColumns.FirstName" encoding="off"/>',
			    sortable: false
			},
			firstnameLink: {
			    type: 'link',
			    dataKey: 'firstname',
			    title: '<istext key="GridUserColumns.FirstName" encoding="off"/>',
			    url: '<isprint value="#URL(Action('ViewUser-Show')).'?USER_UUID={uuid}'#">',
			    params: ['uuid'],
			    sortable: false
			},
			userid: {
				type: 'text',
				dataKey: 'userid',
				title: '<istext key="GridUserColumns.UserID" encoding="off"/>',
				sortable: false
			},
			useridLink: {
				type: 'link',
				dataKey: 'userid',
				title: '<istext key="GridUserColumns.UserID" encoding="off"/>',
			    url: '<isprint value="#URL(Action('ViewUser-Show')).'?USER_UUID={uuid}'#">',
			    params: ['uuid'],
				sortable: false
			},
			login: {
			    type: 'text',
			    dataKey: 'login',
			    title: '<istext key="GridUserColumns.Login" encoding="off"/>',
			    sortable: false
			},
			loginLink: {
			    type: 'link',
			    dataKey: 'login',
			    title: '<istext key="GridUserColumns.Login" encoding="off"/>',
			    url: '<isprint value="#URL(Action('ViewUser-Show')).'?USER_UUID={uuid}'#">',
			    params: ['uuid'],
			    sortable: false
			},
			status: {
			    type: 'text',
			    dataKey: 'status',
			    title: '<istext key="GridUserColumns.Status" encoding="off"/>',
			    sortable: false,
			    width: 180,
			    maxWidth: 180
			},
			roles: {
			    type: 'text',
			    dataKey: 'roles',
			    title: '<istext key="GridUserColumns.Roles" encoding="off"/>',
			    sortable: false,
			    width: 180,
			    maxWidth: 180
			}
		},
		names = [<isprint encoding="off" value="#columns#">],
		columns = [],
		len = names.length,
		i, column;

	// only show specified columns
	for (i = 0; i < len; i++) {
		if (allColumns.hasOwnProperty(names[i])) {
			column = allColumns[names[i]];
			// the column needs to know about its id
			column.id = names[i];
			columns.push(column);
		}
	}

	// show all columns if no columns are specified	
	if (columns.length === 0) return allColumns;

	return columns;
})()
<!---/isnoloc--->