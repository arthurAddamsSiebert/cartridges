<iscontent type="text/html" charset="UTF-8" compact="true">

<div id="configContainer_<isprint value="#ConfigurationParameterDefinition:Name#">">

			<input type="hidden" 
				name="ConfigurationParameter_<isprint value="#ConfigurationParameterDefinition:Name#">" 
				id="ConfigurationParameter_<isprint value="#ConfigurationParameterDefinition:Name#">" 
				value="<isprint value="#ConfigurationParameterWebForm:getParameter(ConfigurationParameterDefinition:Name):Value#">"
				/>
			<!--- 
			<div>
				<label for="ConfigurationParameter_<isprint value="#ConfigurationParameterDefinition:Name#">_cssId">CSS ID:</label>
				<input 
					type="text" 
					class="text" 
					onkeyup="ConfigurationParameter_<isprint value="#ConfigurationParameterDefinition:Name#">_setValues()" 
					id="ConfigurationParameter_<isprint value="#ConfigurationParameterDefinition:Name#">_cssId" <isif condition="#not(IsPageletEditable)#">disabled="disabled"</isif>>
			</div>
			--->
			
			<div>
				<!--- CSS Class Parameter --->
				<table border="0" cellspacing="0" cellpadding="0">
					<tr>
						<td class="label">
							<label class="label" for="cssClass"><istext key="CssConfigParameterInc.CSSClass.label" encoding="off"/>:</label>
						</td>
						<td>
							<input type="text" class="inputfield_en" id="cssClass" <isif condition="#not(IsPageletEditable)#">disabled="disabled"</isif>>
						</td>
					</tr>
				</table>
			</div>

<script type="text/javascript">
	// if-condition is required to prevent recreation of the same function in case 
	// multiple custom config parameters are included. Can be removed once functions
	// are moved to an external JS file.
	if (!serializeCustomConfigValues) {
	
		/**
		 * Serialize custom configuration field values
		 * 
		 * @param fields Array of fields to iterate over and to serialize values
		 * @param serializedField Form field (typically hidden) that hold the serialized config data
		 *
		 * TODO: this or a similar function should be moved to an external JavaScript file 
		 *       that is available on all pages that require this functionality
		 */
		var serializeCustomConfigValues = function(fields, serializedField) {
			var newConfigValues = "";
			
			for (var i=0; i<fields.length; i++) {
				if (i != 0)
					newConfigValues += ';';
					
				newConfigValues += (fields[i].id + '=' + fields[i].value);
			}
			
			serializedField.value = newConfigValues;
			return true;
		}
		
	}

	// if-condition is required to prevent recreation of the same function in case 
	// multiple custom config parameters are included. Can be removed once functions
	// are moved to an external JS file.
	if (!populateCustomConfigFields) {
	
		/**
		 * Unserialize data, populate fields, and add event listeners
		 * 
		 * @param configContainerId ID of element containing custom configuration fields
		 * @param serializedDataFieldId ID of (typically hidden) field that contains the serialized config data
		 * @param configFieldClass Class set on custom config fields of which values should be set and read
		 *
		 * TODO: this or a similar function should be moved to an external JavaScript file 
		 *       that is available on all pages that require this functionality
		 */
		var populateCustomConfigFields = function(configContainerId, serializedDataFieldId, configFieldClass) {
			// Read and split serialized configuration information
			var configContainer = document.getElementById(configContainerId);
			var serializedDataField = document.getElementById(serializedDataFieldId);
			var fieldValues = (serializedDataField.value).split(';');
			
			// Get elements by class name. Internet Explorer requires special treatment.
			var configFields = [];
			if(document.getElementsByClassName){
				configFields = configContainer.getElementsByClassName(configFieldClass);
			} else {
				var fields = document.getElementsByTagName("input"); // TODO: add support for other fields than input
				var len = fields.length;
				while(len){
					temp = fields[--len];
					if(temp.className.indexOf(configFieldClass) != -1) 
						configFields.push(temp);
				}
			}
			
			for (var i=0; i<configFields.length; i++) {
				// text fields - TODO: add functionality for other form field types
				if ((configFields[i].className).indexOf("text") != -1) {
					// Set value
					if (serializedDataField.value != '')
						configFields[i].value = fieldValues[i].split('=')[1];
					
					// Set event listener
					configFields[i].onblur = function() { serializeCustomConfigValues(configFields, serializedDataField); }
				}
			}
			return true;
		}
		
	}
	
	// Populate custom config fields with existing values
	populateCustomConfigFields(
		'configContainer_<isprint value="#ConfigurationParameterDefinition:Name#">',
		'ConfigurationParameter_<isprint value="#ConfigurationParameterDefinition:Name#">',
		'custom'
	);
</script>
