<iscontent type="text/html" charset="UTF-8" compact="true">
<ISSticky>
<ismodule strict="true" template="content/template/PageletTemplateTreeSubTree.isml"
    name="PageletTemplateTreeSubTree"
    attribute="PageFlag"
    attribute="ContextObject"
    attribute="ContentRepository"
    attribute="Site"
    attribute="Locale"
    attribute="SelectionListing"
	attribute="SelectionType"
	attribute="SelectionName"
	attribute="SelectionValue"
	attribute="SelectionValues"
    attribute="DepthCounter"
    attribute="RowCounter"
    attribute="ExpandedEntries"
    attribute="HasMoreMap"
    returnattribute="ReturnRowCounter"
    attribute="ContextPipeline"
    attribute="ConstraintCtnr"
    attribute="SelectedPageletDefinitions"
    attribute="SelectedPagelets"
    attribute="ReadOnly"
    attribute="ExcludedPagelets"
    attribute="PermissionMap"
    attribute="RestrictByConstraintCtnr"
    attribute="PageletModelRepository"
>

<ISCreateMap mapname="ContextPipelineMap" 
			key0="#parametername0#" value0="#parametervalue0#"
			key1="#parametername1#" value1="#parametervalue1#"
			key2="#parametername2#" value2="#parametervalue2#"
			key3="#parametername3#" value3="#parametervalue3#"
			key4="#parametername4#" value4="#parametervalue4#"
			key5="#parametername5#" value5="#parametervalue5#"
			key6="#parametername6#" value6="#parametervalue6#">
			
<ISCreateMap mapname="TreeIncludeMap" 
			key0="ContentRepository" value0="#ContentRepository#"
			key1="Locale" value1="#Locale#"
			key2="ContextPipeline" value2="#ContextPipeline#"
			key3="ContextPipelineMap" value3="#ContextPipelineMap#"
			key4="SelectionValue" value4="#SelectionValue#">

<ispipeline	pipeline="ViewPageletTemplatesTree-TreeInclude" 
			params="#TreeIncludeMap#"
			alias="Result">

<ISContentPermissionMap ContentRepository="#ContentRepository#" PermissionMap="PermissionMap">
	<ISCreateMap mapname="GlobalPageletLockParams"
			key0="ContentDomain" value0="#ContentRepository:RepositoryDomain#"
			key1="PreferenceDomain" value1="#ContentRepository:RepositoryDomain#">
	<ispipeline pipeline="ProcessPageletLock-LookupParentNamedResource" alias="GlobalPageletLockInfoDictionary" params="#GlobalPageletLockParams#"/>
	<isif condition="#isDefined(GlobalPageletLockInfoDictionary:AllPageletsLocked)#">
		<table border="0" cellpadding="3" cellspacing="0" width="100%" class="information w e s">
			<tr>
				<td>
					<img src="#WebRoot()#/images/lockedForOther.gif" align="middle" alt="#localizeText('PageletTemplateTreeInc.LockedByOther.alt')#" title="#localizeText('PageletTemplateTreeInc.LockedByOther.title')#" border="0"/>
				</td>		
				<td width="100%">
					<isif condition="#NOT(isDefined(PlaceholderDefinition)) AND ((isDefined(ContextObject:Page) AND (ContextObject:Page EQ 'true')) OR (isDefined(PageFlag) AND (PageFlag EQ 'true')))#">
						<istext key="PageletTemplateTreeInc.AllPageLocked.confirm" parameter0="text-decoration: underline" encoding="off"/>
					<iselse>
						<istext key="PageletTemplateTreeInc.AllComponentLocked.confirm" parameter0="text-decoration: underline" encoding="off"/>
					</isif> 
					<isLockOwnerToolTip Resource="#GlobalPageletLockInfoDictionary:Resource#" CurrentUser="#CurrentUser#">
				</td>
			</tr>
		</table>
	</isif>		

	<isif condition="#Result:PageletModelRepository:ApplicationTypes:Size > 1#">
		<table width="100%" cellspacing="0" cellpadding="6" border="0" id="pageletTemplateSearchMask" class="infobox w e s">
			<tbody>
				<tr>
                    <td nowrap="nowrap" class="label_select"><label class="label label_select label_light" for="PageletSearch_Application_Type_ID"><istext key="ContentPageTreeInc.ApplicationTypes.label" encoding="off"/>:</label></td>
                    <td>
						<isApplicationTypeSelector 	SelectedApplicationTypeID="#SelectedApplicationTypeID#" 
													PageletModelRepository="#Result:PageletModelRepository#" 
													SelectBoxID="PageletSearch_Application_Type_ID"
													SelectBoxClass="select inputfield_en">
					</td>
					<td class="w100">
						<table cellspacing="0" cellpadding="0" border="0">
							<tr>
								<td class="button">
									<input class="button" type="submit" value="#localizeText('PageletSearchMask.Find.input')#" name="<isif condition="#isDefined(FindAction)#"><isprint value="#FindAction#"/><iselse>find</isif>" />
								</td>
							</tr>
						</table>
					</td>
				</tr>
			</tbody>
		</table>
	</isif>
	<table border="0" cellspacing="0" cellpadding="0" class="zebra_table s stickyHeader" width="100%">
		<thead>
			<isif condition="#isDefined(SubmitButtonsTemplate) and (SubmitButtonsTemplate ne '') and (SelectionListing ne 'true')#">
				<isif condition="#NOT(isDefined(GlobalPageletLockInfoDictionary:AllPageletsLocked)) OR (GlobalPageletLockInfoDictionary:AllPageletsLocked EQ 'false')#">
					<isset name="DisableButtonAttribute" value="" scope="request"/>
				<iselse>
					<isset name="DisableButtonAttribute" value="#'disabled="disabled"'#" scope="request"/>
				</isif>
				<tr>
					<td colspan="10">
						<isinclude template = "#SubmitButtonsTemplate#">
					</td>
				</tr>
			</isif>
			<tr>
				<isif condition="#isDefined(SelectionType)#">
					<isif condition="#(SelectionType EQ 'wizard')#">
						<th class="table_header w s" width="80" style="text-align: center;" nowrap="nowrap">
							<a href="#" onclick="toggleSelectAll(this, '<isprint value="#SelectionName#">', 'Select All', 'Clear All');" class="tableheader"><istext key="PageletTemplateTreeInc.SelectAll.link" encoding="off"/></a>
						</th>
					<iselseif condition="#(SelectionType EQ 'constraint') AND NOT(isDefined(ReadOnly) AND ReadOnly) AND isDefined(PermissionMap:SLD_MANAGE_TEMPLATES)#">
						<th class="table_header w s" width="80" style="text-align: center;" nowrap="nowrap">
							<a href="#" onclick="SelectionTree.toggleSelectAll(); this.innerHTML = (this.innerHTML == 'Select All') ? 'Clear All' : 'Select All'; return false;" class="tableheader"><istext key="PageletTemplateTreeInc.SelectAll.link1" encoding="off"/></a>
						</th>
					<iselse>
						<th class="table_header w s" nowrap="nowrap">
							&nbsp;
						</th>
					</isif>
				</isif>
				<th class="table_header w e s"><istext key="PageletTemplateTreeInc.Name.table_header" encoding="off"/></th>
				<th class="table_header e s"><istext key="PageletTemplateTreeInc.ID.table_header" encoding="off"/></th>
				<th class="table_header e s"><istext key="PageletTemplateTreeInc.Group.table_header" encoding="off"/></th>
				<th class="table_header e s"><istext key="PageletTemplateTreeInc.Type.table_header" encoding="off"/></th>
				<th class="table_header e s"><istext key="PageletTemplateTreeInc.Description.table_header" encoding="off"/></th>
				<isif condition="#NOT(SelectionListing EQ 'true')#"><th class="table_header e s" width="1%" nowrap="nowrap"><istext key="PageletTemplateTreeInc.Actions.table_header" encoding="off"/></th></isif>
			</tr>
		</thead>
		<tbody>
			<ISCreateMap mapname="HasMoreMap">
		
			<ISPageletTemplateTreeSubTree
				PageFlag="#PageFlag#"
				ContextObject="#ContextObject#"
				ContentRepository="#ContentRepository#"
				ExpandedEntries="#Result:ExpandedPageletTemplateTreeEntries#"
				Locale="#Locale#"
				SelectionListing="#SelectionListing#"
				SelectionType="#SelectionType#"
				SelectionName="#SelectionName#"
				SelectionValue="#SelectionValue#"
				SelectionValues="#SelectionValues#"
				DepthCounter="#0#"
				RowCounter="#0#"
				HasMoreMap="#HasMoreMap#"
				ReturnRowCounter="RowCounter"
				Site="#Site#"
				ConstraintCtnr="#ConstraintCtnr#"
				SelectedPageletDefinitions="#SelectedPageletDefinitions#"
				SelectedPagelets="#SelectedPagelets#"
				ReadOnly="#ReadOnly#"
				ExcludedPagelets="#ExcludedPagelets#"
				PermissionMap="#PermissionMap#"
				RestrictByConstraintCtnr="#RestrictByConstraintCtnr#"
				PageletModelRepository="#Result:PageletModelRepository#"
				>
		</tbody>
	</table>

<script type="text/javascript">
function switchActive(element)
{
	var allElements = document.getElementsByTagName("tr");
	for (var i = 0, len = allElements.length; i < len; ++ i) 
	{
		if(allElements[i].className.match(/\bactive\b/g))
		{
			allElements[i].className = allElements[i].className.replace(/active/g, "")
		}
	}
	var newActiveElement = element.parentNode.parentNode;
	newActiveElement.className = newActiveElement.className + " active";
}
function toggleSelected(element)
{
	element.checked ? element.checked = false :  element.checked = true;
}
function toggleSelectAll(toggleElement, partOfFormElementName, selectAllText, clearAllText)
{
	var select = true;
	if (toggleElement.innerHTML == selectAllText)
	{
		toggleElement.innerHTML = clearAllText;
		select = true;
	} else {
		toggleElement.innerHTML = selectAllText;
		select = false;
	}
	var e = toggleElement;
	while (e.nodeName != "FORM") {
		e = e.parentNode;
	}
	var formElements = e.elements;
	for (var i=0; i<formElements.length; i++) {
	    if ( ( -1 != formElements[i].name.indexOf(partOfFormElementName) ) &&
	         ( formElements[i].disabled == false ) &&
	         ( ( formElements[i].type == "checkbox" ) ||
	           ( formElements[i].type == "radio"    )  ) ) {
	      formElements[i].checked = select;
	    }
	}
	return false;
}
</script>