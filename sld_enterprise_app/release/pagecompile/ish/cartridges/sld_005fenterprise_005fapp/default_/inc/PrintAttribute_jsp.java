/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import java.util.Iterator;
import com.intershop.beehive.core.capi.domain.AttributeDefinitionConstants;
import com.intershop.beehive.core.capi.localization.LocaleMgr;
import com.intershop.beehive.core.capi.localization.LocaleInformation;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.domain.ExtensibleObject;
import com.intershop.beehive.core.capi.request.Request;

public final class PrintAttribute_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {



    /**
     * retrieves the type of an extensible object attribute as a String constant.
     * If no such attribute can be found, null is returned.
     */
    public static String getAttributeTypeAsString( String attributeName, ExtensibleObject object )
    {
        try
        {
            return getAttributeTypeAsString( object.getAttributeType( attributeName ) );
        }
        catch (Exception e)
        {
        	Logger.error(object,e.getMessage(),e);
            return null;
        }
    }
   /**
    * converts the integer type of an extensible object attribute to a String
   */
    public static String getAttributeTypeAsString( int type )
    {
        switch ( type )
        {
            case AttributeDefinitionConstants.ATTRIBUTE_TYPE_STRING:          return "string";
            case AttributeDefinitionConstants.ATTRIBUTE_TYPE_INT:             return "integer";
            case AttributeDefinitionConstants.ATTRIBUTE_TYPE_DOUBLE:          return "double";
            case AttributeDefinitionConstants.ATTRIBUTE_TYPE_MULTIPLE_STRING: return "multiple_string";
            case AttributeDefinitionConstants.ATTRIBUTE_TYPE_MULTIPLE_INT:    return "multiple_integer";
            case AttributeDefinitionConstants.ATTRIBUTE_TYPE_MULTIPLE_DOUBLE: return "multiple_double";
            // other attribute types are not supported
            default: return null;
        }
    }
    
 	/**
     * converts an attribute value that can be either a String, Integer or Double
     * or an Iterator of the above, to a plain String. If the value is null, an
     * empty string is returned.
     */
    public static String convertAttributeValueToString( Object value , boolean isMultiple)
    {
        if ( value == null )
        {
            return "";
        }
        
        else if ( !isMultiple )
        {
            return value.toString();
        }
        else
        {
            Iterator<?> iter = (Iterator<?>) value;
            StringBuffer result = new StringBuffer();

            while ( iter.hasNext() )
            {
                Object item = iter.next();
                if ( item != null )
                {
                    result.append( item.toString() );
                }

                if ( iter.hasNext() )
                {
                    result.append( AttributeDefinitionConstants.MULTIPLE_ATTR_DELIMITER);
                }
            }

            return result.toString();
        }
    }



    LocaleMgr localeMgr = (LocaleMgr)NamingMgr.getInstance().lookupManager(LocaleMgr.REGISTRY_NAME);
    LocaleInformation leadLocale = localeMgr.getLeadLocale();    

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write("\n\n\n\n\n\n\n\n");
 
setEncodingType("text/html"); 

    Object value = null;
    ExtensibleObject object = (ExtensibleObject)getObject((String)getObject("extensibleobject"));
    LocaleInformation locale = (LocaleInformation)getObject((String)getObject("locale"));
    if(locale == null)
    {
    	locale = Request.getCurrent().getLocale();
    }
    String attributename = (String)getObject("attributename");

    String type = getAttributeTypeAsString( attributename, object );

    if( type == null || attributename ==null 
    || object == null || attributename==null)
    {
    	
      out.write('(');
 {out.write(localizeISText("PrintAttribute.NoAttribute",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(')');

    }
    else
    {

	    boolean isMultiple  = type.startsWith("multiple");
	    boolean isLocalized = false;
	    boolean isLanguageMissing = false;
	    
	    isLocalized = object.isAttributeLocalized( attributename );
	
	
		if(isLocalized)
		{
			//Try current request locale
			if(isMultiple)
			{
				value = object.getMultipleLocalizedAttributes( attributename, locale );
			}
			else
			{
				value = object.getLocalizedAttribute(attributename, locale);
			}
			
			//Try current lead locale
			if(value == null)
			{
				isLanguageMissing = true;
				if(isMultiple)
				{
					value = object.getMultipleLocalizedAttributes( attributename, leadLocale );
				}
				else
				{
					value = object.getLocalizedAttribute(attributename, leadLocale);
				}
				
			}
		}
		else
		{
			if(isMultiple)
			{
			   	value = object.getMultipleAttributes( attributename );
			}
			else
			{
				value = object.getAttribute( attributename );
			}
		}
		
		String result = convertAttributeValueToString( value, isMultiple);

	    if (!result.isEmpty())
	    {
	        out.print(encodeString(result.trim()));
	        if(isLanguageMissing)
	        {
	        	
 {out.write(localizeISText("CatalogCategory.LanguageMissing.input",null,null,null,null,null,null,null,null,null,null,null,null));} 

	        }
	    }
	    else
	    {
	        
      out.write('(');
 {out.write(localizeISText("PrintAttribute.NoAttribute",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(')');

	    }
    
    }

 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
