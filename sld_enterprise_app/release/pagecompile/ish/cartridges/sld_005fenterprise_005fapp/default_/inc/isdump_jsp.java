/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import java.util.Iterator;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.capi.request.Session;
import com.intershop.beehive.core.capi.naming.NamingMgr;

public final class isdump_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
      out.write("<pre>");

	PipelineDictionary dict = getPipelineDictionary();
	Session sess = ((SessionMgr)NamingMgr.getInstance().lookupManager(SessionMgr.REGISTRY_NAME)).getCurrentSession();

      out.write("\n-------------------------------------------------------------------------------\n| ");
 {out.write(localizeISText("isdump.SESSIONProperties",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(" |\n-------------------------------------------------------------------------------\n");

	out.println("SessionID: "+sess.getSessionID());
	out.println("User logged in: "+(sess.isLoggedIn()?"YES":"NO"));
	out.println("Locale: "+sess.getLocale().getJavaLanguageKey()+"_"+sess.getLocale().getJavaCountryKey() );
	out.println("Currency: "+sess.getCurrencyCode());

      out.write("\n-------------------------------------------------------------------------------\n| ");
 {out.write(localizeISText("isdump.SESSIONDictionary",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(" |\n-------------------------------------------------------------------------------\n");

	Iterator sessKeys = sess.createDictionaryKeyIterator();
	Object value = null;
	String key = null;
	while (sessKeys.hasNext()){
		key = sessKeys.next().toString();
		value = sess.getObject(key);
		out.println(key+": "+String.valueOf(value));
	}

      out.write("\n-------------------------------------------------------------------------------\n| ");
 {out.write(localizeISText("isdump.PIPELINEDictionary",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(" |\n-------------------------------------------------------------------------------\n");

	Iterator pipeKeys = dict.createKeyIterator();
	String alias = null;
	while (pipeKeys.hasNext()){
		key = pipeKeys.next().toString();
		alias = dict.getAliasKey(key);
		value = dict.get(key);
		out.println(key+" ("+alias+"): "+String.valueOf(value));
	}

      out.write("\n-------------------------------------------------------------------------------\n| ");
 {out.write(localizeISText("isdump.FORMValues",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(" |\n-------------------------------------------------------------------------------\n");

	Iterator formKeys = dict.createFormKeyIterator();
	Object[] values = null;
	while (formKeys.hasNext()){
		key = formKeys.next().toString();
		alias = dict.getAliasKey(key);
		values = dict.getFormValues(key);
		if (values.length<=1){
			value = dict.getFormValue(key);
			out.println(key+" ("+alias+"): "+String.valueOf(value));
		}else{
			out.print(key+": [");
			for (int i=0; i<values.length-1; i++){
				out.print(", "+String.valueOf(values[i]));
			}
			out.println(", "+String.valueOf(values[values.length-1])+"]");
		}
	}

      out.write("</pre>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
