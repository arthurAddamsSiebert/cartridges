/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class HtmlEditor_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 _boolean_result=false;try {_boolean_result=((Boolean)(((!(context.getFormattedValue(getObject("CurrentRequest:Object(\"TinyMCE.initialized\")"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",3,e);}if (_boolean_result) { 
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/tinymce/js/tinymce/tinymce.min.js\"></script>\n<script type=\"text/javascript\" src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/js/ObjectGlue.js\"></script>\n<script type=\"text/javascript\" src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/js/CodeBlueprint.js\"></script>\n<script type=\"text/javascript\" src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/htmleditor/ServerBrowser.js\"></script>\n<script type=\"text/javascript\" src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/js/StaticMediaLink.js\"></script>\n<script type=\"text/javascript\" src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/htmleditor/BasicEditor.js\"></script>\n<script type=\"text/javascript\" src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/htmleditor/AdvancedEditor.js\"></script>\n<script type=\"text/javascript\" src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/htmleditor/EditorControls.js\"></script>\n<style type=\"text/css\">\n.defaultSkin span.hide {\nbackground-position: -460px -20px;\n}\n.disabledEditor {\nz-index: 201;\nposition: absolute;\nbackground: #dddddd;\nfilter:alpha(opacity=40); /* set alpha for IE < 9 */\nopacity: 0.4;\n}\n.editor_mode_triggers {\nmargin-bottom: 10px;\n}\n.editor_mode_triggers a,\n.editor_mode_trigger {\nmargin: 0 10px 20px 0;\ntext-decoration: underline;\n}\n.editor_mode_triggers a.active,\n.editor_mode_trigger.active {\nfont-weight: bold;\ntext-decoration: none;\n}\n</style>");
 com.intershop.beehive.core.capi.request.Request.getCurrent().putObject("TinyMCE.initialized", "true"); 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("repositoryid"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",41,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("repositoryid")); getPipelineDictionary().put("OrganizationDomainId", temp_obj);} 
 } else { 
 {Object temp_obj = (getObject("OrganizationDomain:DomainID")); getPipelineDictionary().put("OrganizationDomainId", temp_obj);} 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("norepositorylinks"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",48,e);}if (_boolean_result) { 
 {Object temp_obj = (url(true,(new URLPipelineAction(context.getFormattedValue("HtmlEditor-GetLibraries",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("OrganizationDomainId",null),context.getFormattedValue(getObject("OrganizationDomainId"),null))).addURLParameter(context.getFormattedValue("RepositoryDomainID",null),context.getFormattedValue(getObject("repositoryid"),null)).addURLParameter(context.getFormattedValue("ImageLinks",null),context.getFormattedValue("true",null)).addURLParameter(context.getFormattedValue("ContentImageLinks",null),context.getFormattedValue("true",null)).addURLParameter(context.getFormattedValue("LocaleId",null),context.getFormattedValue(getObject("localeid"),null)))); getPipelineDictionary().put("linkURI", temp_obj);} 
 } else { 
 {Object temp_obj = (url(true,(new URLPipelineAction(context.getFormattedValue("HtmlEditor-GetLibraries",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("OrganizationDomainId",null),context.getFormattedValue(getObject("OrganizationDomainId"),null))).addURLParameter(context.getFormattedValue("RepositoryDomainID",null),context.getFormattedValue(getObject("repositoryid"),null)).addURLParameter(context.getFormattedValue("ProductLinks",null),context.getFormattedValue("true",null)).addURLParameter(context.getFormattedValue("CategoryLinkPipeline",null),context.getFormattedValue(getObject("categorylinkpipeline"),null)).addURLParameter(context.getFormattedValue("CategoryLinkSite",null),context.getFormattedValue(getObject("categorylinksite"),null)).addURLParameter(context.getFormattedValue("ProductLinkPipeline",null),context.getFormattedValue(getObject("productlinkpipeline"),null)).addURLParameter(context.getFormattedValue("ProductLinkSite",null),context.getFormattedValue(getObject("productlinksite"),null)).addURLParameter(context.getFormattedValue("ImageLinks",null),context.getFormattedValue("true",null)).addURLParameter(context.getFormattedValue("ContentImageLinks",null),context.getFormattedValue("true",null)).addURLParameter(context.getFormattedValue("LocaleId",null),context.getFormattedValue(getObject("localeid"),null)))); getPipelineDictionary().put("linkURI", temp_obj);} 
 } 
      out.write("<script type=\"text/javascript\">\ncreateEditor._config = {\npreferredMode : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("configuration"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {55}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\nid : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {56}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\nenabled : ");
 {String value = null;try{value=context.getFormattedValue(getObject("enabled"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {57}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(",\nuri: \"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ServerBrowser-Open",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("ImageLinks",null),context.getFormattedValue("true",null))).addURLParameter(context.getFormattedValue("LocaleId",null),context.getFormattedValue(getObject("localeid"),null))),null));
      out.write("\",\nmedia : \"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("HtmlEditor-GetLibraries",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("OrganizationDomainId",null),context.getFormattedValue(getObject("OrganizationDomainId"),null))).addURLParameter(context.getFormattedValue("RepositoryDomainID",null),context.getFormattedValue(getObject("repositoryid"),null)).addURLParameter(context.getFormattedValue("ProductImages",null),context.getFormattedValue("true",null)).addURLParameter(context.getFormattedValue("ContentImages",null),context.getFormattedValue("true",null)).addURLParameter(context.getFormattedValue("LocaleId",null),context.getFormattedValue(getObject("localeid"),null))),null));
      out.write("\",\nlinks : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("linkURI"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {60}",e);}if (value==null) value="";out.write(value);} 
      out.write("\",\nstyleSheet : \"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("HtmlEditor-StyleSheetHook",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("dummy1",null),context.getFormattedValue(getObject("CurrentOrganization:UUID"),null))).addURLParameter(context.getFormattedValue("dummy2",null),context.getFormattedValue(getObject("CurrentSession:PersonalizationGroupID"),null)).addURLParameter(context.getFormattedValue("RepositoryDomainID",null),context.getFormattedValue(getObject("repositoryid"),null))),null));
      out.write("\",\ntemplateURL : \"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("HtmlEditor-GetTemplateList",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("OrganizationDomainId",null),context.getFormattedValue(getObject("OrganizationDomainId"),null))).addURLParameter(context.getFormattedValue("RepositoryDomainID",null),context.getFormattedValue(getObject("repositoryid"),null)).addURLParameter(context.getFormattedValue("ProductImages",null),context.getFormattedValue("true",null)).addURLParameter(context.getFormattedValue("LocaleId",null),context.getFormattedValue(getObject("localeid"),null))),null));
      out.write("\",\nlanguage : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("CurrentRequest:Locale:Language"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {63}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\nstaticURLMappingPrefix : \"");
      out.print(com.intershop.beehive.core.capi.url.URLUtils.getStaticPath());
      out.write("\" , \nlabels : {\nadvanced: \"");
 {out.write(localizeISText("HtmlEditor.FullNbspMode",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\",\nbasic: \"");
 {out.write(localizeISText("HtmlEditor.SimpleNbspMode",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\",\nnoEditor: \"");
 {out.write(localizeISText("HtmlEditor.EditorNbspDisabled",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"\n}\n}\nif(createEditor._config.id != 'false') createEditor(createEditor._config);\n</script>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
