/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.xcs.capi.product.Product;
import com.intershop.component.warranty.capi.WarrantyBO;
import com.intershop.beehive.foundation.quantity.Money;
import com.intershop.beehive.core.capi.app.AppContextUtil;
import com.intershop.component.product.capi.ProductBO;
import com.intershop.component.warranty.capi.product.ProductBOWarrantyExtension;
import com.intershop.beehive.app.capi.AppContext;
import com.intershop.beehive.businessobject.capi.BusinessObjectContext;
import com.intershop.beehive.businessobject.capi.BusinessObjectRepositoryFactory;
import com.intershop.component.repository.capi.RepositoryBO;
import com.intershop.component.repository.capi.RepositoryBORepository;
import com.intershop.component.warranty.capi.WarrantyBORepository;
import com.intershop.component.product.capi.ProductBORepository;
import java.lang.String;

public final class ProductPrice_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

 protected Boolean printTemplateMarker() { return Boolean.FALSE; } 
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 

setEncodingType("text/html"); 

	// init default value
	Money price = Money.NOT_AVAILABLE;
	
	// get product from PD
	Product product = (Product)getObject("Product");
	
	if (product != null)
	{
	
	    AppContext appContext = AppContextUtil.getCurrentAppContext();
        BusinessObjectContext boContext = (BusinessObjectContext)appContext.getVariable(BusinessObjectContext.NAME);
        BusinessObjectRepositoryFactory<RepositoryBORepository> repositoryFactory = boContext.getEngine().getRepositoryFactory(RepositoryBORepository.class);
        RepositoryBORepository repositoryBORepository = repositoryFactory.createRepository(boContext);
        RepositoryBO repository = repositoryBORepository.getRepositoryByID(product.getDomainID());
        ProductBORepository productBORepository = repository.getExtension(ProductBORepository.class);
	
		ProductBO productBO = productBORepository.getProductByID(product.getUUID());
		
		if (productBO != null)
		{
			WarrantyBORepository warrantyBORepository = repository.getExtension(WarrantyBORepository.class);
			ProductBOWarrantyExtension productBOWarrantyExt = (ProductBOWarrantyExtension) productBO.getExtension("Warranty");
			if (productBOWarrantyExt!=null && productBOWarrantyExt.isWarranty())
			{
				WarrantyBO warranty = warrantyBORepository.getWarrantyBOBySKU(product.getSKU());
				if( warranty.hasPrice() )
				{
					// get curency from PD
					String currency = (String)getObject("Currency");	
					if(currency != null) 
					{
						price = warranty.getPrice(null, currency);
					}
					else
					{
						price = warranty.getPrice(null);
					}
					
					getPipelineDictionary().put("WarrantyPrice", price.isAvailable() ? price : "depends on product");
				}
				else
				{
					getPipelineDictionary().put("WarrantyPrice", "N/A");
				}
			}
		}
	}

 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("WarrantyPrice"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",68,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("WarrantyPrice"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {69}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } else { 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("Currency"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",71,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("Product:ListPrice(Currency):Amount"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {72}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } else { 
 {String value = null;try{value=context.getFormattedValue(getObject("Product:Price"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {74}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } 
 } 
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
