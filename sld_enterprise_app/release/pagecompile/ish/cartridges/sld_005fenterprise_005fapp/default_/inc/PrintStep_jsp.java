/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class PrintStep_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write('\n');
 
setEncodingType("text/html"); 
 {Object temp_obj = (getObject("step")); getPipelineDictionary().put("Step", temp_obj);} 
 {Object temp_obj = (getObject("parentstep")); getPipelineDictionary().put("ParentStep", temp_obj);} 
 {Object temp_obj = (getObject("editcondition")); getPipelineDictionary().put("EditCondition", temp_obj);} 
 {Object temp_obj = (getObject("newstepform")); getPipelineDictionary().put("NewStepForm", temp_obj);} 
 {Object temp_obj = (getObject("conditionclipboard")); getPipelineDictionary().put("ConditionClipboard", temp_obj);} 
 {Object temp_obj = (getObject("processchainid")); getPipelineDictionary().put("ProcessChainID", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("Step:Type:Value"),null).equals(context.getFormattedValue("CONTAINER",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",11,e);}if (_boolean_result) { 
      out.write("<table cellpadding=\"0\" cellspacing=\"4\" border=\"0\" width=\"100%\" class=\"aldi\">\n<tr>");
 {Object temp_obj = (getObject("step")); getPipelineDictionary().put("Step", temp_obj);} 
      out.write("<td class=\"top\" width=\"120\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) getObject("Step:Chain")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",18,e);}if (_boolean_result) { 
      out.write("<img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/space.gif\" width=\"120\" height=\"1\" alt=\"\" border=\"0\"/> \n");
 {out.write(localizeISText("process.chain.print.step.timeout.container","",null,getObject("Step:Timeout"),null,null,null,null,null,null,null,null,null));} 
      out.write("<img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/space.gif\" width=\"120\" height=\"10\" alt=\"\" border=\"0\"/>\n<select name=\"");
      out.print(context.getFormattedValue(context.getFormattedValue("ExpectedType_",null) + context.getFormattedValue(getObject("Step:Id"),null),null));
      out.write("\" id=\"ExecuteType\" class=\"select inputfield_en\">\n<option value=\"Concurrent\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("Step:Error")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("Step:ContainerType:Value"),null).equals(context.getFormattedValue("ERROR",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",25,e);}if (_boolean_result) { 
      out.write("disabled=\"disabled\"");
 } 
      out.write(' ');
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("Step:ContainerType:Value"),null).equals(context.getFormattedValue("CONCURRENT",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",25,e);}if (_boolean_result) { 
      out.write("selected=\"selected\"");
 } 
      out.write(">PARALLEL</option>\n<option value=\"Sequence\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("Step:ContainerType:Value"),null).equals(context.getFormattedValue("SEQUENCE",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",26,e);}if (_boolean_result) { 
      out.write("selected=\"selected\"");
 } 
      out.write(">SERIAL</option>\n<option value=\"Error\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) getObject("Step:EnabledError")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",27,e);}if (_boolean_result) { 
      out.write("disabled=\"disabled\"");
 } 
      out.write(' ');
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("Step:ContainerType:Value"),null).equals(context.getFormattedValue("ERROR",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",27,e);}if (_boolean_result) { 
      out.write("selected=\"selected\"");
 } 
      out.write(">ERROR</option> \n</select> \n");
 } 
      out.write(" \n</td>\n<td width=\"100%\">\n<table cellpadding=\"0\" cellspacing=\"6\" class=\"\" width=\"100%\">\n<tr>\n<td class=\"\" width=\"100%\">");
 while (loop("Step:StepBOs","SubStep",null)) { 
      out.write(' ');
      out.write('\n');
 processOpenTag(response, pageContext, "printstep", new TagParameter[] {
new TagParameter("conditionclipboard",getObject("ConditionClipboard")),
new TagParameter("readonly",((((Boolean) (disableErrorMessages().isDefined(getObject("readonly")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("readonly"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE)),
new TagParameter("step",getObject("SubStep")),
new TagParameter("newstepform",getObject("NewStepForm")),
new TagParameter("editstep",getObject("EditCondition")),
new TagParameter("processchainid",getObject("ProcessChainID")),
new TagParameter("parentstep",getObject("Step"))}, 39); 
      out.write("<br/> \n");
 } 
      out.write("</td>\n<td class=\"right top ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((((context.getFormattedValue(getObject("Step:Type:Value"),null).equals(context.getFormattedValue("CONTAINER",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) ((( ((Number) getObject("Step:StepBOs:Size")).doubleValue() >((Number)(new Double(1))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",51,e);}if (_boolean_result) { 
      out.write("ruleBar");
 } 
      out.write("\">\n<input type=\"checkbox\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("Step:Id"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {52}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" name=\"SelectedStep\"\n");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) getObject("Step:Chain")).booleanValue() || ((Boolean) getObject("Step:ProcessChainStepContainerBO:Chain")).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",53,e);}if (_boolean_result) { 
      out.write("disabled");
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ConditionClipboard:ObjectUUID(condition:UUID)"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",54,e);}if (_boolean_result) { 
      out.write("checked=\"checked\"");
 } 
      out.write("\n/> \n</td>\n</tr>\n</table>\n</td>\n</tr>\n</table>");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("Step:Type:Value"),null).equals(context.getFormattedValue("PIPELINE",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",77,e);}if (_boolean_result) { 
      out.write("<table cellpadding=\"0\" cellspacing=\"4\" border=\"0\" class=\"aldi\" width=\"100%\" data-testing-id=\"page-bo-processchains-singlestep\">\n<tr>\n<td class=\"\" width=\"100%\">");
 {out.write(localizeISText("process.chain.steps.pipeline.display.1","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("<a href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewProcessChainParams-Start",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("ProcessChainID",null),context.getFormattedValue(getObject("ProcessChainID"),null))).addURLParameter(context.getFormattedValue("SelectedStep",null),context.getFormattedValue(getObject("Step:Id"),null))),null));
      out.write("\" class=\"table_detail_link\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Step:Pipeline"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {83}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('-');
 {String value = null;try{value=context.getFormattedValue(getObject("Step:Startnode"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {83}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</a>&nbsp;\n");
 {out.write(localizeISText("process.chain.steps.pipeline.display.2","",null,getObject("Step:Domain:DomainName"),getObject("Step:Timeout"),null,null,null,null,null,null,null,null));} 
      out.write(" \n</td>\n<td class=\"right top\">\n<input type=\"checkbox\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("Step:Id"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {89}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" name=\"SelectedStep\"\n");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ConditionClipboard:ObjectUUID(Step:Id)"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",90,e);}if (_boolean_result) { 
      out.write("checked=\"checked\"");
 } 
      out.write("\n/>\n</td>\n</tr>\n</table>");
 } else { 
      out.write("<table cellpadding=\"0\" cellspacing=\"4\" border=\"0\" class=\"aldi\" width=\"100%\" data-testing-id=\"page-bo-processchains-singlestep\">\n<tr>\n<td class=\"\" width=\"100%\">");
 {out.write(localizeISText("process.chain.steps.job.display","",null,getObject("Step:Name"),getObject("Step:Domain:DomainName"),getObject("Step:Timeout"),null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"right top\">\n<input type=\"checkbox\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("Step:Id"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {105}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" name=\"SelectedStep\"\n");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ConditionClipboard:ObjectUUID(Step:Id)"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",106,e);}if (_boolean_result) { 
      out.write("checked=\"checked\"");
 } 
      out.write("\n/>\n</td>\n</tr>\n</table>");
 }} 
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
