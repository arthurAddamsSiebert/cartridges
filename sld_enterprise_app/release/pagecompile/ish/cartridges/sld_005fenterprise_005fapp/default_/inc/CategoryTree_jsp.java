/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import java.util.LinkedList;
import java.util.Collection;
import java.util.Collections;
import java.util.ArrayList;
import com.intershop.component.foundation.internal.iterator.ComparatorAdapter;
import com.intershop.beehive.xcs.capi.catalog.CatalogCategory;
import com.intershop.beehive.xcs.internal.catalog.CatalogCategoryPO;

public final class CategoryTree_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write("\n\n\n\n\n\n\n\n");
 
setEncodingType("text/html"); 
 context.setCustomTagTemplateName("categorytreenode","inc/CategoryTreeNode.isml",true,new String[]{"categories","selectmode","minexpandlevel","autoselectsubcategories","selectedcategories","lazycategories","disabledcategories","detailspagepipeline","detailspageparameter","parametername","parametervalue","parametername1","parametervalue1","parametername2","parametervalue2","parametername3","parametervalue3","parametername4","parametervalue4","parametername5","parametervalue5"},null); 
      out.write(' ');
      out.write('\n');
 out.print(context.prepareWAPlacement("CSSWebLibraries")); 
      out.write("jquery/dynatree/jquery.dynatree.css");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("CSSWebLibraries")); 
      out.write("jquery.dynatree.customized.css");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery-ui-1.10.3.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/dynatree/jquery.dynatree-1.2.4.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebControls")); 
      out.write("\n$(\"");
 {String value = null;try{value=context.getFormattedValue(context.getFormattedValue("#",null) + context.getFormattedValue(getObject("treeid"),null),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {82}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\").dynatree({\ncheckbox: true,\n");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("selectmode")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("selectmode"),null).equals(context.getFormattedValue("single",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",84,e);}if (_boolean_result) { 
      out.write("\nclassNames: $.extend({}, $.ui.dynatree.prototype.options.classNames, {checkbox: \"dynatree-radio\"}),\n");
 } 
      out.write(" \nselectMode: ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("selectmode")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("selectmode"),null).equals(context.getFormattedValue("single",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",87,e);}if (_boolean_result) { 
      out.write('1');
 } else {_boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("selectmode")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("selectmode"),null).equals(context.getFormattedValue("multiplehier",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",87,e);}if (_boolean_result) { 
      out.write('3');
 } else { 
      out.write('2');
 }} 
      out.write(",\nminExpandLevel: ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("minexpandlevel"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",88,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("minexpandlevel"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {88}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } else { 
      out.write('1');
 } 
      out.write(", \ngenerateIds: true,\nidPrefix: '',\nonPostInit: function(isReloading, isError) {\nlogMsg(\"onPostInit(%o, %o)\", isReloading, isError);\n// activate all pre-selected categories; TODO: prefix list elements IDs, categories UUIDs might start with a dot\n");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (hasLoopElements("selectedcategories") ? Boolean.TRUE : Boolean.FALSE)).booleanValue() || ((Boolean) (hasLoopElements("disabledcategories") ? Boolean.TRUE : Boolean.FALSE)).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",95,e);}if (_boolean_result) { 
      out.write("\nif (this.isInitializing())\n{\n");
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("selectedcategories") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",98,e);}if (_boolean_result) { 
 while (loop("selectedcategories","selectedcategory",null)) { 
      out.write("\nvar key = \"");
 {String value = null;try{value=context.getFormattedValue(getObject("selectedcategory"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {100}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\";\nvar selectedNode = null;\nthis.visit(function(node){\nif(node.data.key == key) {\nselectedNode = node;\nreturn false;\n}\n}, true);\nif ($(selectedNode).length)\n{\nselectedNode.activateSilently(); \n}\n");
 } 
 } 
      out.write("\n// activate the root node\nthis.getRoot().activateSilently();\n}\n");
 } 
      out.write("\n// Re-fire onActivate, so the text is update\nthis.reactivate();\n},\nonCustomRender: function(dataNode){ \nvar tooltip = dataNode.data.tooltip ? \" title='\" + dataNode.data.tooltip + \"'\" : \"\";\nif (dataNode.data.href == undefined) {\nnodeTitle = \"<span style='display: inline-block;' class='\" + this.options.classNames.title + \"'\" + tooltip + \">\" + dataNode.data.title + \"</span>\";\n}\nelse {\nnodeTitle = \"<a href='\" + dataNode.data.href + \"' class='\" + this.options.classNames.title + \"'\" + tooltip + \">\" + dataNode.data.title + \"</a>\";\n}\nreturn nodeTitle;\n},\nonRender: function(dataNode, nodeSpan){ \n$(nodeSpan).addClass('dynatree-ico-cf');\n$(nodeSpan).filter('.dynatree-expanded').addClass('dynatree-ico-ef');\n");
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("disabledcategories") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",137,e);}if (_boolean_result) { 
      out.write(' ');
      out.write('\n');
 while (loop("disabledcategories","disabledcategory",null)) { 
      out.write(" \nif (dataNode.data.key == \"");
 {String value = null;try{value=context.getFormattedValue(getObject("disabledcategory"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {139}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\")\n{\ndataNode.data.unselectable = true; \n//Set unchangeable property to keep disabled state by selection/deselection\ndataNode.data.unchangeable = true; \n$(nodeSpan).addClass(\"dynatree-unselectable dynatree-unselectable-unchangeable\"); \n}\n");
 } 
      out.write(' ');
      out.write('\n');
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("autodisabledisabledsubcategories")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("autodisabledisabledsubcategories"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",148,e);}if (_boolean_result) { 
      out.write("\nif (dataNode.parent.data.unselectable == true)\n{ \ndataNode.data.unselectable = true;\n$(nodeSpan).addClass(\"dynatree-unselectable\"); \n}\nif (dataNode.data.unchangeable == true)\n{\n//Set unchangeable property to keep disabled state by selection/deselection\ndataNode.data.unchangeable = true;\n$(nodeSpan).addClass(\"dynatree-unselectable-unchangeable\"); \n}\n");
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("autoselectdisablesubcategories")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("autoselectdisablesubcategories"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",162,e);}if (_boolean_result) { 
      out.write("\nif (dataNode.parent.isSelected() == true)\n{ \ndataNode.data.unselectable = true; \n$(nodeSpan).addClass(\"dynatree-unselectable\"); \n}\nif (dataNode.isSelected() == true && dataNode.hasChildren() && dataNode.data.unchangeable)\n{\ndataNode.visit(function(node){\nnode.data.unselectable = true;\nnode.data.unchangeable = true;\nnode.data.addClass = \"dynatree-unselectable dynatree-unselectable-unchangeable\";\n}); \n}\nelse if (dataNode.isSelected() == true && dataNode.hasChildren())\n{\ndataNode.visit(function(node){\nnode.data.unselectable = true;\nnode.data.addClass = \"dynatree-unselectable\";\n}); \n} \n");
 } 
      out.write("\n},\nonActivate: function(node) {\n$(\"#echoActive\").text(node.data.title);\nif (node.data.href){\nwindow.location = node.data.href;\n}\n},\nonDeactivate: function(node) {\n$(\"#echoActive\").text(\"-\");\n},\nonDblClick: function(node, event) {\nlogMsg(\"onDblClick(%o, %o)\", node, event);\n//node.toggleExpand();\n},\nonLazyRead: function(node){\nnode.appendAjax({url: \"");
 {String value = null;try{value=context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewCategoryTree-GetSubCategories",null)))),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {201}",e);}if (value==null) value="";value = encodeString(value,"javascript");out.write(value);} 
      out.write("\",\ndata: {\"CategoryUUID\": node.data.key, \n\"detailspagepipeline\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("detailspagepipeline"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {203}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n\"detailspageparameter\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("detailspageparameter"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {204}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n\"parametername\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("parametername"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {205}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n\"parametername1\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("parametername1"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {206}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n\"parametername2\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("parametername2"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {207}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n\"parametername3\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("parametername3"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {208}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n\"parametername4\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("parametername4"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {209}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n\"parametername5\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("parametername5"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {210}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n\"parametervalue\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("parametervalue"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {211}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n\"parametervalue1\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("parametervalue1"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {212}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n\"parametervalue2\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("parametervalue2"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {213}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n\"parametervalue3\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("parametervalue3"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {214}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n\"parametervalue4\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("parametervalue4"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {215}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n\"parametervalue5\" : \"");
 {String value = null;try{value=context.getFormattedValue(getObject("parametervalue5"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {216}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\",\n}\n});\n}\n,\nonQuerySelect: function(sel, node){\n// Overridding the original function in order\n// to add to the desection of the node \n// check if it is unselectable\nnode._fixSelectionState = function(){\nvar p, i, l;\nvar opts = this.tree.options;\nif( this.bSelected ) {\n// Select all children\nthis.visit(function(node){\nnode.parent._setSubSel(true);\nif(!node.data.unselectable){\nnode._select(true, false, false);\n}\n});\n// Select parents, if all children are selected\np = this.parent;\nif (opts.selectMode == 3) {\nwhile( p ) {\np._setSubSel(true);\nvar allChildsSelected = true;\nfor(i=0, l=p.childList.length; i<l; i++) {\nvar n = p.childList[i];\nif( !n.bSelected && !n.data.isStatusNode && !n.data.unselectable) {\nallChildsSelected = false;\nbreak;\n}\n}\nif( allChildsSelected ){\np._select(true, false, false);\n}\np = p.parent;\n}\n} \n} else {\n// Deselect all children\nthis._setSubSel(false);\nthis.visit(function(node){\nnode._setSubSel(false);\n//Code extionsion\nif(!node.data.unchangeable){\nnode._select(false, false, false);\n}\n});\n// Deselect parents, and recalc hasSubSel\n");
      out.write("p = this.parent;\nif (opts.selectMode == 3) {\nwhile( p ) {\np._select(false, false, false);\nvar isPartSel = false;\nfor(i=0, l=p.childList.length; i<l; i++) {\nif( p.childList[i].bSelected || p.childList[i].hasSubSel ) {\nisPartSel = true;\nbreak;\n}\n}\np._setSubSel(isPartSel);\np = p.parent;\n}\n} \n}\n};\nreturn true;\n} \n");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("autoselectdisablesubcategories")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("autoselectdisablesubcategories"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",286,e);}if (_boolean_result) { 
      out.write("\n, \nonSelect: function(flag, dataNode){\nif (flag == true) {\nif (dataNode.hasChildren())\n{\ndataNode.visit(function(node){\nnode.data.unselectable = true;\n$(node.span).addClass(\"dynatree-unselectable\");\n}); \n}\n}\nelse {\nif (dataNode.hasChildren())\n{\ndataNode.visit(function(node){\n//Do not deselect if node is initialized as disabled\nif (!node.data.unchangeable)\n{\nnode.data.unselectable = false;\n// removeClass doesn't clear addClass data property \n// If it stays set to 'dynatree-unselectable' \n// onRender event will display nodes as unselectable\n// So clear it here.\nnode.data.addClass = null;\n$(node.span).removeClass(\"dynatree-unselectable\");\n} \n}); \n} \n}\n}\n");
 } 
      out.write("\n});\n$(\"form\").submit(function(a) {\n// Serialize standard form fields:\n// then append Dynatree selected 'checkboxes':\nvar tree = $(\"");
 {String value = null;try{value=context.getFormattedValue(context.getFormattedValue("#",null) + context.getFormattedValue(getObject("treeid"),null),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {326}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\").dynatree(\"getTree\");\nvar treeData = tree.serializeArray(");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("autoselectdisablesubcategories")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("autoselectdisablesubcategories"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",327,e);}if (_boolean_result) { 
      out.write("true");
 } 
      out.write(");\nfor (var i=0,l=treeData.length;i<l;i++) {\nvar nodeData = tree.getNodeByKey(treeData[i].value).data;\n// Don't submit a selected node if it is 'root' node (should one exist at all) or if it is disabled.\nif (treeData[i].value !== \"root\" && !nodeData.unselectable)\n{\n$(\"form\").append('<input type=\"hidden\" name=\"'+treeData[i].name+'\" value=\"'+treeData[i].value+'\"/>');\n} \n}\n// and/or add the active node as 'radio button':\nreturn true;\n});\n");
 out.print("</waplacement>"); 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("category:isRootCategory"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",345,e);}if (_boolean_result) { 
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/js/PageletConstraint.js\"></script>");
 } 
      out.write("<div id=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("treeid"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {349}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<ul>");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("root")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("root"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",351,e);}if (_boolean_result) { 
      out.write("<li>");
 {String value = null;try{value=context.getFormattedValue(getObject("root"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {353}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("<ul> \n");
 } 

	List<String> selectedCategoriesList = new ArrayList<String>();
	Iterator selectedCategories = getPipelineDictionary().get("selectedcategories");
	
	if (selectedCategories != null)
	{
		while(selectedCategories.hasNext())
		{
		    selectedCategoriesList.add((String)selectedCategories.next());
		}	    
	}
	
	getPipelineDictionary().put("SelectedCategoriesList",selectedCategoriesList);
	
	List<String> lazyCategoriesList = new LinkedList<String>();
	Iterator lazyCategories = getPipelineDictionary().get("lazycategories");
	
	
	if (lazyCategories != null)
	{
		while(lazyCategories.hasNext())
		{
		    lazyCategoriesList.add((String)lazyCategories.next());
		}	    
	}
	
	getPipelineDictionary().put("LazyCategoriesList",lazyCategoriesList);
	
	Iterator disabledCategories = getPipelineDictionary().get("disabledcategories");
	List<String> disabledCategoriesList = new ArrayList<String>();
	
	if (disabledCategories != null)
	{
	    while (disabledCategories.hasNext())
	    {
	        disabledCategoriesList.add((String) disabledCategories.next());
	    }
	}
	
	getPipelineDictionary().put("DisabledCategoriesList",disabledCategoriesList);

 processOpenTag(response, pageContext, "getsortedcategories", new TagParameter[] {
new TagParameter("CategoriesCollection",getObject("categories")),
new TagParameter("SortAttribute","DisplayName"),
new TagParameter("SortedCategories","SortedSubCategories")}, 397); 
 while (loop("SortedSubCategories","subcategory",null)) { 
      out.write("<li id=\"");
      out.print(context.getFormattedValue(getObject("subcategory:UUID"),null));
      out.write("\" class=\"");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (hasLoopElements("SelectedCategoriesList") ? Boolean.TRUE : Boolean.FALSE)).booleanValue() && ((Boolean) getObject("SelectedCategoriesList:Contains(subcategory:UUID)")).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",401,e);}if (_boolean_result) { 
      out.write("selected");
 } 
      out.write(' ');
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (hasLoopElements("LazyCategoriesList") ? Boolean.TRUE : Boolean.FALSE)).booleanValue() && ((Boolean) getObject("LazyCategoriesList:Contains(subcategory:UUID)")).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",401,e);}if (_boolean_result) { 
      out.write("lazy");
 } 
      out.write("\" title=\"");
      out.print(context.getFormattedValue(encodeString(context.getFormattedValue(getObject("subcategory:Name"),null)),null));
      out.write('"');
      out.write('>');
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("detailspagepipeline"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",402,e);}if (_boolean_result) { 
      out.write("<a href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue(getObject("detailspagepipeline"),null))),(new URLParameterSet().addURLParameter(context.getFormattedValue(getObject("detailspageparameter"),null),context.getFormattedValue(getObject("subcategory:UUID"),null))).addURLParameter(context.getFormattedValue(getObject("parametername"),null),context.getFormattedValue(getObject("parametervalue"),null)).addURLParameter(context.getFormattedValue(getObject("parametername1"),null),context.getFormattedValue(getObject("parametervalue1"),null)).addURLParameter(context.getFormattedValue(getObject("parametername2"),null),context.getFormattedValue(getObject("parametervalue2"),null)).addURLParameter(context.getFormattedValue(getObject("parametername3"),null),context.getFormattedValue(getObject("parametervalue3"),null)).addURLParameter(context.getFormattedValue(getObject("parametername4"),null),context.getFormattedValue(getObject("parametervalue4"),null)).addURLParameter(context.getFormattedValue(getObject("parametername5"),null),context.getFormattedValue(getObject("parametervalue5"),null))),null));
      out.write('"');
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("subcategory:DisplayName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {410}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</a>");
 } else { 
 {String value = null;try{value=context.getFormattedValue(getObject("subcategory:DisplayName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {412}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) getObject("LazyCategoriesList:Contains(subcategory:UUID)")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",414,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("subcategory:SubCategories") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",415,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("autoselectsubcategories")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("autoselectsubcategories"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) getObject("SelectedCategoriesList:Contains(subcategory:UUID)")).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",416,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("subcategory")); getPipelineDictionary().put("CurrentSubCategory", temp_obj);} 

									List<String> selectedSubCategoriesList = new ArrayList<String>();
									CatalogCategory subCategory = getPipelineDictionary().get("CurrentSubCategory");
									
									List<String> disabledCategoriesCollection = getPipelineDictionary().get("DisabledCategoriesList");
									
									Iterator subCategories = subCategory.createSubCategoriesIterator();
									    
									while(subCategories.hasNext())
									{									
									    CatalogCategory subCatalogCategory = (CatalogCategory) subCategories.next();
									    
									    if (!disabledCategoriesCollection.contains(subCatalogCategory.getUUID()))
									    {
									    	selectedSubCategoriesList.add(subCatalogCategory.getUUID());
									    }
									}	    
									getPipelineDictionary().put("SelectedSubCategoriesList",selectedSubCategoriesList);
								
 } else { 
 {Object temp_obj = (getObject("SelectedCategoriesList")); getPipelineDictionary().put("SelectedSubCategoriesList", temp_obj);} 
 } 
      out.write("<ul>");
 processOpenTag(response, pageContext, "categorytreenode", new TagParameter[] {
new TagParameter("parametervalue",getObject("parametervalue")),
new TagParameter("parametervalue5",getObject("parametervalue5")),
new TagParameter("parametervalue4",getObject("parametervalue4")),
new TagParameter("parametervalue3",getObject("parametervalue3")),
new TagParameter("parametername1",getObject("parametername1")),
new TagParameter("parametervalue2",getObject("parametervalue2")),
new TagParameter("parametervalue1",getObject("parametervalue1")),
new TagParameter("parametername2",getObject("parametername2")),
new TagParameter("minexpandlevel",getObject("minexpandlevel")),
new TagParameter("parametername3",getObject("parametername3")),
new TagParameter("selectmode",getObject("selectmode")),
new TagParameter("selectedcategories",getObject("SelectedSubCategoriesList")),
new TagParameter("disabledcategories",getObject("DisabledCategoriesList")),
new TagParameter("lazycategories",getObject("LazyCategoriesList")),
new TagParameter("detailspageparameter",getObject("detailspageparameter")),
new TagParameter("detailspagepipeline",getObject("detailspagepipeline")),
new TagParameter("parametername4",getObject("parametername4")),
new TagParameter("parametername5",getObject("parametername5")),
new TagParameter("parametername",getObject("parametername")),
new TagParameter("categories",getObject("subcategory:SubCategories")),
new TagParameter("autoselectsubcategories",getObject("autoselectsubcategories"))}, 443); 
      out.write("</ul>");
 } 
 } 
      out.write("</li> \n");
 } 
      out.write(' ');
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("root")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("root"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",471,e);}if (_boolean_result) { 
      out.write("</ul> \n</li>");
 } 
      out.write("</ul>\n</div>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
