/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.inc.navigation;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class quickNavigation_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 out.print(context.prepareWAPlacement("CSSWebLibraries")); 
      out.write("navigation/quickNavigation.css");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/hotkeys/jquery.hotkeys.js");
 out.print("</waplacement>"); 
      out.write("<script type=\"text/javascript\">\n$(function() {\nvar \nsearchDialogSelector = '");
      out.print(context.getFormattedValue("#",null));
      out.write("quickNavigation',\nsearchFieldSelector = \"[name='quickNavigationField']\",\nsearchResultSelector = '");
      out.print(context.getFormattedValue("#",null));
      out.write("quickNavigationResult';\n// open search panel - global shortcut: ctrl+space\n$(document).bind('keydown', 'ctrl+space', function(event) {\n$(searchDialogSelector).on( \"dialogopen\", function( event, ui ) {\n// stop bubbling key events to higher levels (e.g. prevent main page from scrolling, ...)\n$(event.target).on('keydown', function(e) {\n// escape key (this is handled by the modal panel itself)\nif (e.which !== 27) {\ne.stopPropagation();\n}\n});\n// click outside the dialog will close the dialog. bind each time the dialog is opened \n$('.ui-widget-overlay').bind( 'click', function() {\n$(searchDialogSelector).dialog('close');\n$('.ui-widget-overlay').unbind();\n}); \n});\n$(searchDialogSelector).dialog('open');\n// select search input field\n$(searchDialogSelector).find('[name=\"quickNavigationField\"]').select();\nreturn false;\n});\n// pressing the cursor down key within the search field will select the first search result (if available) \n$(searchFieldSelector).bind('keydown', 'down', function(e){\n$(searchResultSelector).find('[data-keyboard-focus]').eq(0).focus();\n");
      out.write("return false;\n});\n// pressing return within the search field will also select the first search result (if available)\n$(searchFieldSelector).bind('keyup', 'return', function(e){\n$(searchResultSelector).find('[data-keyboard-focus]').eq(0).focus();\nreturn false;\n});\n// pressing return within the search field will also select the first search result (if available)\n$(searchFieldSelector).bind('keydown', 'tab', function(e){\n$(searchResultSelector).find('[data-keyboard-focus]').eq(0).focus();\nreturn false;\n});\n// run search after each key stroke within the search field\n$(searchFieldSelector).keyup(function(e) {\n// ignore cursor keys and the return key\nif ($.inArray(e.which, [37, 38, 39, 40, 13]) < 0) {\ne.stopPropagation();\nvar resultList = $(searchResultSelector);\n// clear results\nresultList.find('*').remove();\nvar searchString = $(this).val().toLowerCase();\n// search words are separated by spaces (allow multiple matches)\nvar searchWords = searchString.split(\" \");\n// for avoiding dublicate links utilize this blacklist\n");
      out.write("var blackList = [];\n// search all anchor references in the current page and match with the search term\n$(\"a\").each(function(i, link) {\nvar linkName = $(link).text().toLowerCase();\nvar linkText = $.trim($(link).text());\n// validate if all search words are in the link\nfor(var index=0; index < searchWords.length; index++) {\nif ( linkName.indexOf(searchWords[index]) < 0 ) {\nreturn; \n}\n}\nif (!linkText || !$(link).attr('href')) {\n// do nothing (link has no name or no href to display)\n} else if ($.inArray($(link).attr('href'), blackList) >= 0) {\n// do nothing (link is in blacklist)\n} else {\n// update blacklist (dublicate links)\nblackList.push($(link).attr('href'));\n// add link\nvar item = $('<div/>').attr('data-keyboard-focus', '').attr('tabindex', '-1').attr('class','search_result_item')\n.append('<img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/arrow_right_down.gif\" width=\"9\" height=\"9\" alt=\"\" border=\"0\" class=\"search_result_link\"/> ')\n.append('<a href=\"'+$(link).attr('href')+'\" class=\"search_result_link\" data-keyboard-focus-action=\"\">'+linkText+'</a>');\n// add description\nif ($(link).attr('title')) {\nitem.append( $('<div/>').html( $(link).attr('title') ).addClass('search_result_description') );\n} else {\nitem.append( $('<div/>').html('').addClass('search_result_description') );\n}\nitem.appendTo(resultList);\n}\n});\n}\n});\n// Result list \n$(searchResultSelector).bind('keydown', 'down', function(e){\nquickNavigationSelectNextItem();\nreturn false;\n});\n// using tab key for navigation\n$(searchResultSelector).bind('keydown', 'tab', function(e) {\nquickNavigationSelectNextItem();\nreturn false;\n});\n$(searchResultSelector).bind('keydown', 'up', function(e){\nquickNavigationSelectPreviousItem();\n});\n// using tab key for navigation\n$(searchResultSelector).bind('keydown', 'shift+tab', function(e) {\nquickNavigationSelectPreviousItem();\nreturn false;\n});\n// pressing 'return' within the result list will open the selected link\n");
      out.write("$(searchResultSelector).bind('keyup', 'return', function(e) {\nvar destination = $(':focus [data-keyboard-focus-action]').attr('href');\nif (!destination) {\n// do nothing\n} else if (destination.indexOf('");
      out.print(context.getFormattedValue("#",null));
      out.write("') === 0) {\n// Exception to the Rule (e.g. dashboard link is only clickable to work right)\n// Check if first character is an anchor tag\n// then: click the element\n$(\"[href='\"+destination+\"']\").click();\n} else {\nwindow.location = destination; \n}\nreturn false;\n});\n// Naviation down\nfunction quickNavigationSelectNextItem() {\nvar currentFocusElement = $(':focus');\nvar currentFocusGroupItems = currentFocusElement.closest('[data-keyboard-focus-group]').find('[data-keyboard-focus]');\nvar nextIndex = ( currentFocusGroupItems.index(currentFocusElement) + 1);\n$(currentFocusGroupItems).eq(nextIndex).focus();\nreturn false;\n}\n// Navigation up\nfunction quickNavigationSelectPreviousItem() {\nvar currentFocusElement = $(':focus');\nvar currentFocusGroupItems = currentFocusElement.closest('[data-keyboard-focus-group]').find('[data-keyboard-focus]');\nvar prevIndex = ( currentFocusGroupItems.index(currentFocusElement) - 1);\nif (prevIndex < 0) {\nprevIndex = 0;\n// jump back into the search field\n$(searchDialogSelector).find(searchFieldSelector).focus();\n");
      out.write("} else {\n$(currentFocusGroupItems).eq(prevIndex).focus();\n}\nreturn false;\n}\n});\n</script>\n<div id=\"quickNavigation\" class=\"js-dialog\" data-title=\"");
 {out.write(localizeISText("QuickNavigation.dialog.title","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\" width=\"550\" height=\"350\">\n<div class=\"dialog-content-header\">\n<input type=\"text\" name=\"quickNavigationField\" value=\"\" class=\"inputfield_en\" placeholder=\"");
 {out.write(localizeISText("QuickNavigation.dialog.search.placeholder","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\" />\n</div>\n<div class=\"dialog-content\">\n<div id=\"quickNavigationResult\" data-keyboard-focus-group=\"\"></div>\n</div>\n<div class=\"dialog-buttons\">\n<input type=\"button\" class=\"button\" value=\"");
 {out.write(localizeISText("QuickNavigation.button.close","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\" data-focus data-action=\"dialog-close\" />\n</div>\n</div>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
