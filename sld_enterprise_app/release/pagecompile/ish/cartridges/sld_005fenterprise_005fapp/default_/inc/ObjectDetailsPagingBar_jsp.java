/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.core.capi.paging.PageableIterator;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.request.Request;

public final class ObjectDetailsPagingBar_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 processOpenTag(response, pageContext, "createmap", new TagParameter[] {
new TagParameter("key1","DetailsPageNumber"),
new TagParameter("key0","PageLocatorName"),
new TagParameter("value1",getObject("pagenumber")),
new TagParameter("value0",getObject("pagelocatorname")),
new TagParameter("mapname","ObjectPagingBarParams")}, 6); 
      out.write(' ');
      out.write('\n');
 {try{executePipeline("ProcessObjectDetailsPaging-GetPageableFromSession",((java.util.Map)(getObject("ObjectPagingBarParams"))),"ObjectPagingBarDictionary");}catch(Exception e){Logger.error(this,"ISPIPELINE failed. Line: 9.",e);}} 

	PipelineDictionary my_dict = (PipelineDictionary) getObject("ObjectPagingBarDictionary");
	
		PageableIterator my_pageable = (PageableIterator)my_dict.get("DetailsPagingBarPageable");
		getPipelineDictionary().put("TmpPageable", my_pageable);
		PageableIterator pageable = (PageableIterator)getObject("TmpPageable");
		//String pageableName = (String)getObject("pageable");
		//getPipelineDictionary().put("TmpPageable", getObject(pageableName));
		//PageableIterator pageable = (PageableIterator)getObject("TmpPageable");
	
	Object currentObject = getObject("currentobject");
	Object previousObject = null;
	Object nextObject = null;
	
	if ( null != currentObject && null != pageable ) {
		getPipelineDictionary().put("TmpNextObjectPage", pageable.getPage());
		getPipelineDictionary().put("TmpPreviousObjectPage", pageable.getPage());
	
		int counter = 0;
		boolean found = false;
		int currentPage = pageable.getPage();
		pageable.reset();
		while(pageable.hasNext()) {
			previousObject = nextObject;
			nextObject = pageable.next();
			counter++;
			if (nextObject.equals(currentObject)) {
				found = true;
				nextObject = (pageable.hasNext()) ? pageable.next() : null;
				break;
			}
		}
		//if object found on current page (if not - hide paging bar)
		if(found) {
			//determine previous and next objects 
			if (null == previousObject && !pageable.isFirstPage()) {
				pageable.setPage(currentPage - 1);
				pageable.reset();
				getPipelineDictionary().put("TmpPreviousObjectPage", currentPage - 1);
				while(pageable.hasNext()) {
					previousObject = pageable.next();
				}
			}
		
			pageable.setPage(currentPage);
		
			if (null == nextObject && !pageable.isLastPage()) {
				pageable.setPage(currentPage + 1);
				pageable.reset();
				getPipelineDictionary().put("TmpNextObjectPage", currentPage + 1);
				if (pageable.hasNext()) 
					nextObject = pageable.next();
			}
		
			pageable.setPage(currentPage);
		
			getPipelineDictionary().put("TmpCurrentCounter", pageable.getPage() * pageable.getPageSize() + counter);
			getPipelineDictionary().put("TmpNextObject", nextObject);
			getPipelineDictionary().put("TmpPreviousObject", previousObject);
			getPipelineDictionary().put("TmpCurrentObject", currentObject);
		}
	}

      out.write("<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tr>");

            getPipelineDictionary().put("ApplicationState", Request.getCurrent().getSession().getObject("ApplicationState"));
        
      out.write("<td width=\"20%\">");
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"inc/BackToList", null, "99");} 
      out.write("</td>\n<td nowrap=\"nowrap\" align=\"center\">");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((( ((Number) getObject("TmpPageable:ElementCount")).doubleValue() >((Number)(new Double(0))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("TmpNextObject")))).booleanValue() || ((Boolean) (disableErrorMessages().isDefined(getObject("TmpPreviousObject")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",102,e);}if (_boolean_result) { 
      out.write("<div style=\"margin-bottom: 2px;\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("TmpPreviousObject"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",104,e);}if (_boolean_result) { 
      out.write("\n&nbsp;<a href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue(getObject("pipeline"),null))),(new URLParameterSet().addURLParameter(context.getFormattedValue(getObject("nameforobjectuuid"),null),context.getFormattedValue(getObject("TmpPreviousObject:UUID"),null))).addURLParameter(context.getFormattedValue("removeid",null),context.getFormattedValue(getObject("TmpCurrentObject:UUID"),null)).addURLParameter(context.getFormattedValue(getObject("parametername"),null),context.getFormattedValue(getObject("parametervalue"),null)).addURLParameter(context.getFormattedValue(getObject("parametername1"),null),context.getFormattedValue(getObject("parametervalue1"),null)).addURLParameter(context.getFormattedValue(getObject("parametername2"),null),context.getFormattedValue(getObject("parametervalue2"),null)).addURLParameter(context.getFormattedValue(getObject("parametername3"),null),context.getFormattedValue(getObject("parametervalue3"),null)).addURLParameter(context.getFormattedValue(getObject("parametername4"),null),context.getFormattedValue(getObject("parametervalue4"),null)).addURLParameter(context.getFormattedValue(getObject("parametername5"),null),context.getFormattedValue(getObject("parametervalue5"),null)).addURLParameter(context.getFormattedValue(getObject("parametername6"),null),context.getFormattedValue(getObject("parametervalue6"),null)).addURLParameter(context.getFormattedValue(getObject("parametername7"),null),context.getFormattedValue(getObject("parametervalue7"),null)).addURLParameter(context.getFormattedValue(getObject("parametername8"),null),context.getFormattedValue(getObject("parametervalue8"),null)).addURLParameter(context.getFormattedValue(getObject("parametername9"),null),context.getFormattedValue(getObject("parametervalue9"),null)).addURLParameter(context.getFormattedValue(getObject("parametername10"),null),context.getFormattedValue(getObject("parametervalue10"),null)).addURLParameter(context.getFormattedValue(getObject("parametername11"),null),context.getFormattedValue(getObject("parametervalue11"),null)).addURLParameter(context.getFormattedValue(getObject("parametername12"),null),context.getFormattedValue(getObject("parametervalue12"),null)).addURLParameter(context.getFormattedValue("DetailsPageNumber",null),context.getFormattedValue(getObject("TmpPreviousObjectPage"),null))),null));
      out.write("\" class=\"pagecursortxt button\">&lt;&lt;</a>");
 } 
      out.write(' ');
      out.write('\n');
 {out.write(localizeISText("ObjectDetailsByIdPagingBar.Item0Of1.link",null,null,context.getFormattedValue(getObject("TmpCurrentCounter"),null),context.getFormattedValue(getObject("TmpPageable:ElementCount"),null),"pagecursortxt","pagecursoritem bold",null,null,null,null,null,null));} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("TmpNextObject"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",130,e);}if (_boolean_result) { 
      out.write("<a href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue(getObject("pipeline"),null))),(new URLParameterSet().addURLParameter(context.getFormattedValue(getObject("nameforobjectuuid"),null),context.getFormattedValue(getObject("TmpNextObject:UUID"),null))).addURLParameter(context.getFormattedValue("removeid",null),context.getFormattedValue(getObject("TmpCurrentObject:UUID"),null)).addURLParameter(context.getFormattedValue(getObject("parametername"),null),context.getFormattedValue(getObject("parametervalue"),null)).addURLParameter(context.getFormattedValue(getObject("parametername1"),null),context.getFormattedValue(getObject("parametervalue1"),null)).addURLParameter(context.getFormattedValue(getObject("parametername2"),null),context.getFormattedValue(getObject("parametervalue2"),null)).addURLParameter(context.getFormattedValue(getObject("parametername3"),null),context.getFormattedValue(getObject("parametervalue3"),null)).addURLParameter(context.getFormattedValue(getObject("parametername4"),null),context.getFormattedValue(getObject("parametervalue4"),null)).addURLParameter(context.getFormattedValue(getObject("parametername5"),null),context.getFormattedValue(getObject("parametervalue5"),null)).addURLParameter(context.getFormattedValue(getObject("parametername6"),null),context.getFormattedValue(getObject("parametervalue6"),null)).addURLParameter(context.getFormattedValue(getObject("parametername7"),null),context.getFormattedValue(getObject("parametervalue7"),null)).addURLParameter(context.getFormattedValue(getObject("parametername8"),null),context.getFormattedValue(getObject("parametervalue8"),null)).addURLParameter(context.getFormattedValue(getObject("parametername9"),null),context.getFormattedValue(getObject("parametervalue9"),null)).addURLParameter(context.getFormattedValue(getObject("parametername10"),null),context.getFormattedValue(getObject("parametervalue10"),null)).addURLParameter(context.getFormattedValue(getObject("parametername11"),null),context.getFormattedValue(getObject("parametervalue11"),null)).addURLParameter(context.getFormattedValue(getObject("parametername12"),null),context.getFormattedValue(getObject("parametervalue12"),null)).addURLParameter(context.getFormattedValue("DetailsPageNumber",null),context.getFormattedValue(getObject("TmpNextObjectPage"),null))),null));
      out.write("\" class=\"pagecursortxt button\">&gt;&gt;</a>");
 } 
      out.write("</div>");
 } else { 
      out.write("&nbsp;\n");
 } 
      out.write("</td>\n<td width=\"20%\">\n&nbsp;\n</td>\n</tr>\n</table>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
