/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.editing.palette;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class MediaAssetsImageFile_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"inc/Modules", null, "2");} 
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("FileHandled"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",5,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((!(context.getFormattedValue(getObject("File:Extension"),null).equals(context.getFormattedValue(replace(context.getFormattedValue(getObject("File:Extension"),null),(String)("(jpg|jpeg|png|gif|svg)"),(String)("000")),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",6,e);}if (_boolean_result) { 
 {Object temp_obj = ((( ((Number) new Double(1)).doubleValue() ==((Number)(new Double(1))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE)); getPipelineDictionary().put("FileHandled", temp_obj);} 
 {Object temp_obj = (replace(context.getFormattedValue(getObject("File:ContentDescriptor"),null),(String)(context.getFormattedValue(".",null) + context.getFormattedValue(getObject("File:Extension"),null) + context.getFormattedValue("$",null)),(String)(""))); getPipelineDictionary().put("FileContentDescriptorWhithoutFileExtension", temp_obj);} 
 {Object temp_obj = (getObject("TargetApplicationBO:ApplicationType:NamedObject(\"MediaAssetsImageFile.isml/Image\")")); getPipelineDictionary().put("MediaAssetsImageFileConfiguration", temp_obj);} 
      out.write("<div class=\"component-tile-container\"\n");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("MediaAssetsImageFileConfiguration"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",11,e);}if (_boolean_result) { 
      out.write("\ndraggable=\"true\"\ndata-component-type=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("MediaAssetsImageFileConfiguration:PageletDefinition"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {13}",e);}if (value==null) value="";value = encodeString(value,"json");out.write(value);} 
      out.write("\"\ndata-component-name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("MediaAssetsImageFileConfiguration:PageletName(File:Name)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {14}",e);}if (value==null) value="";value = encodeString(value,"json");out.write(value);} 
      out.write("\"\ndata-component-config=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("MediaAssetsImageFileConfiguration:PageletConfiguration(File:ContentDescriptor,FileContentDescriptorWhithoutFileExtension,File:Extension)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {15}",e);}if (value==null) value="";value = encodeString(value,"json");out.write(value);} 
      out.write('"');
      out.write('\n');
 } 
      out.write("\n>\n<div class=\"component-tile file-tile\">\n<div class=\"component-tile-img\">\n<img src=\"");
      out.print(context.getFormattedValue(contentURL(context.getFormattedValue(getObject("File:ContentDescriptor"),null),context.getFormattedValue(getObject("Locale:LocaleID"),null)),null));
      out.write("\" draggable=\"false\">\n</div>\n<div class=\"component-tile-title\">");
 {String value = null;try{value=context.getFormattedValue(getObject("File:FullName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {23}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</div>\n</div>\n<div class=\"component-tile-info\"></div>\n<div class=\"tooltip\" style=\"display:none;\">\n<p>\n<h6>");
 {String value = null;try{value=context.getFormattedValue(getObject("File:FullName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {29}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</h6>\n<div>");
 processOpenTag(response, pageContext, "imageproperties", new TagParameter[] {
new TagParameter("Locale",getObject("Locale")),
new TagParameter("LastModified","LastModified"),
new TagParameter("ImageFile",getObject("File")),
new TagParameter("Size","Size"),
new TagParameter("Height","Height"),
new TagParameter("ERROR","ERROR"),
new TagParameter("Width","Width")}, 31); 
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) ((disableErrorMessages().isDefined(getObject("ERROR"))))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",40,e);}if (_boolean_result) { 
 processOpenTag(response, pageContext, "filesizestring", new TagParameter[] {
new TagParameter("FileSizeString","FileSizeString"),
new TagParameter("value",getObject("Size")),
new TagParameter("ReturnOnly","true")}, 41); 
 {out.write(localizeISText("imagefile.information",null,null,getObject("Width"),getObject("Height"),getObject("FileSizeString"),context.getFormattedValue(getObject("LastModified"),new Integer(DATE_TIME_INPUT)),null,null,null,null,null,null));} 
 } 
      out.write("</div>\n</p>\n</div>\n</div>");
 } 
 } 
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
