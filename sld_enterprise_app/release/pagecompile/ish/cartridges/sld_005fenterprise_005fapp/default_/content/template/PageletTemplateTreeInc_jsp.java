/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.content.template;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class PageletTemplateTreeInc_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 processOpenTag(response, pageContext, "sticky", new TagParameter[] {
}, 2); 
 context.setCustomTagTemplateName("pagelettemplatetreesubtree","content/template/PageletTemplateTreeSubTree.isml",true,new String[]{"PageFlag","ContextObject","ContentRepository","Site","Locale","SelectionListing","SelectionType","SelectionName","SelectionValue","SelectionValues","DepthCounter","RowCounter","ExpandedEntries","HasMoreMap","ContextPipeline","ConstraintCtnr","SelectedPageletDefinitions","SelectedPagelets","ReadOnly","ExcludedPagelets","PermissionMap","RestrictByConstraintCtnr","PageletModelRepository"},new String[]{"ReturnRowCounter"}); 
 processOpenTag(response, pageContext, "createmap", new TagParameter[] {
new TagParameter("key1",getObject("parametername1")),
new TagParameter("value6",getObject("parametervalue6")),
new TagParameter("key2",getObject("parametername2")),
new TagParameter("value5",getObject("parametervalue5")),
new TagParameter("key0",getObject("parametername0")),
new TagParameter("value2",getObject("parametervalue2")),
new TagParameter("key5",getObject("parametername5")),
new TagParameter("value1",getObject("parametervalue1")),
new TagParameter("key6",getObject("parametername6")),
new TagParameter("key3",getObject("parametername3")),
new TagParameter("value4",getObject("parametervalue4")),
new TagParameter("value3",getObject("parametervalue3")),
new TagParameter("key4",getObject("parametername4")),
new TagParameter("mapname","ContextPipelineMap"),
new TagParameter("value0",getObject("parametervalue0"))}, 31); 
 processOpenTag(response, pageContext, "createmap", new TagParameter[] {
new TagParameter("key1","Locale"),
new TagParameter("key2","ContextPipeline"),
new TagParameter("key0","ContentRepository"),
new TagParameter("value2",getObject("ContextPipeline")),
new TagParameter("value1",getObject("Locale")),
new TagParameter("key3","ContextPipelineMap"),
new TagParameter("value4",getObject("SelectionValue")),
new TagParameter("value3",getObject("ContextPipelineMap")),
new TagParameter("key4","SelectionValue"),
new TagParameter("value0",getObject("ContentRepository")),
new TagParameter("mapname","TreeIncludeMap")}, 40); 
 {try{executePipeline("ViewPageletTemplatesTree-TreeInclude",((java.util.Map)(getObject("TreeIncludeMap"))),"Result");}catch(Exception e){Logger.error(this,"ISPIPELINE failed. Line: 47.",e);}} 
 processOpenTag(response, pageContext, "contentpermissionmap", new TagParameter[] {
new TagParameter("ContentRepository",getObject("ContentRepository")),
new TagParameter("PermissionMap","PermissionMap")}, 51); 
 processOpenTag(response, pageContext, "createmap", new TagParameter[] {
new TagParameter("key1","PreferenceDomain"),
new TagParameter("key0","ContentDomain"),
new TagParameter("value1",getObject("ContentRepository:RepositoryDomain")),
new TagParameter("value0",getObject("ContentRepository:RepositoryDomain")),
new TagParameter("mapname","GlobalPageletLockParams")}, 52); 
 {try{executePipeline("ProcessPageletLock-LookupParentNamedResource",((java.util.Map)(getObject("GlobalPageletLockParams"))),"GlobalPageletLockInfoDictionary");}catch(Exception e){Logger.error(this,"ISPIPELINE failed. Line: 55.",e);}} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("GlobalPageletLockInfoDictionary:AllPageletsLocked"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",56,e);}if (_boolean_result) { 
      out.write("<table border=\"0\" cellpadding=\"3\" cellspacing=\"0\" width=\"100%\" class=\"information w e s\">\n<tr>\n<td>\n<img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/lockedForOther.gif\" align=\"middle\" alt=\"");
      out.print(context.getFormattedValue(localizeText(context.getFormattedValue("PageletTemplateTreeInc.LockedByOther.alt",null)),null));
      out.write("\" title=\"");
      out.print(context.getFormattedValue(localizeText(context.getFormattedValue("PageletTemplateTreeInc.LockedByOther.title",null)),null));
      out.write("\" border=\"0\"/>\n</td> \n<td width=\"100%\">");
 _boolean_result=false;try {_boolean_result=((Boolean)(((!((Boolean) ((disableErrorMessages().isDefined(getObject("PlaceholderDefinition"))))).booleanValue() && ((Boolean) (((((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("ContextObject:Page")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("ContextObject:Page"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() || ((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("PageFlag")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("PageFlag"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",63,e);}if (_boolean_result) { 
 {out.write(localizeISText("PageletTemplateTreeInc.AllPageLocked.confirm",null,null,"text-decoration: underline",null,null,null,null,null,null,null,null,null));} 
 } else { 
 {out.write(localizeISText("PageletTemplateTreeInc.AllComponentLocked.confirm",null,null,"text-decoration: underline",null,null,null,null,null,null,null,null,null));} 
 } 
      out.write(' ');
      out.write('\n');
 processOpenTag(response, pageContext, "lockownertooltip", new TagParameter[] {
new TagParameter("CurrentUser",getObject("CurrentUser")),
new TagParameter("Resource",getObject("GlobalPageletLockInfoDictionary:Resource"))}, 68); 
      out.write("</td>\n</tr>\n</table>");
 } 
      out.write(' ');
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("Result:PageletModelRepository:ApplicationTypes:Size")).doubleValue() >((Number)(new Double(1))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"6\" border=\"0\" id=\"pageletTemplateSearchMask\" class=\"infobox w e s\">\n<tbody>\n<tr>\n<td nowrap=\"nowrap\" class=\"label_select\"><label class=\"label label_select label_light\" for=\"PageletSearch_Application_Type_ID\">");
 {out.write(localizeISText("ContentPageTreeInc.ApplicationTypes.label",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</label></td>\n<td>");
 processOpenTag(response, pageContext, "applicationtypeselector", new TagParameter[] {
new TagParameter("SelectBoxClass","select inputfield_en"),
new TagParameter("SelectedApplicationTypeID",getObject("SelectedApplicationTypeID")),
new TagParameter("PageletModelRepository",getObject("Result:PageletModelRepository")),
new TagParameter("SelectBoxID","PageletSearch_Application_Type_ID")}, 80); 
      out.write("</td>\n<td class=\"w100\">\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\">\n<tr>\n<td class=\"button\">\n<input class=\"button\" type=\"submit\" value=\"");
      out.print(context.getFormattedValue(localizeText(context.getFormattedValue("PageletSearchMask.Find.input",null)),null));
      out.write("\" name=\"");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("FindAction"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",89,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("FindAction"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {89}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } else { 
      out.write("find");
 } 
      out.write("\" />\n</td>\n</tr>\n</table>\n</td>\n</tr>\n</tbody>\n</table>");
 } 
      out.write("<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" class=\"zebra_table s stickyHeader\" width=\"100%\">\n<thead>");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("SubmitButtonsTemplate")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("SubmitButtonsTemplate"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("SelectionListing"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",100,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((!((Boolean) ((disableErrorMessages().isDefined(getObject("GlobalPageletLockInfoDictionary:AllPageletsLocked"))))).booleanValue() || ((Boolean) ((((context.getFormattedValue(getObject("GlobalPageletLockInfoDictionary:AllPageletsLocked"),null).equals(context.getFormattedValue("false",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",101,e);}if (_boolean_result) { 
 {Object temp_obj = (""); getPipelineDictionary().put("DisableButtonAttribute", temp_obj);} 
 } else { 
 {Object temp_obj = ("disabled=\"disabled\""); getPipelineDictionary().put("DisableButtonAttribute", temp_obj);} 
 } 
      out.write("<tr>\n<td colspan=\"10\">");
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,context.getFormattedValue(getObject("SubmitButtonsTemplate"),null), null, "108");} 
      out.write("</td>\n</tr>");
 } 
      out.write("<tr>");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectionType"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",113,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((context.getFormattedValue(getObject("SelectionType"),null).equals(context.getFormattedValue("wizard",null)))) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",114,e);}if (_boolean_result) { 
      out.write("<th class=\"table_header w s\" width=\"80\" style=\"text-align: center;\" nowrap=\"nowrap\">\n<a href=\"#\" onclick=\"toggleSelectAll(this, '");
 {String value = null;try{value=context.getFormattedValue(getObject("SelectionName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {116}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("', 'Select All', 'Clear All');\" class=\"tableheader\">");
 {out.write(localizeISText("PageletTemplateTreeInc.SelectAll.link",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a>\n</th>");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((((context.getFormattedValue(getObject("SelectionType"),null).equals(context.getFormattedValue("constraint",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && !((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("ReadOnly")))).booleanValue() && ((Boolean) getObject("ReadOnly")).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) (disableErrorMessages().isDefined(getObject("PermissionMap:SLD_MANAGE_TEMPLATES")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",118,e);}if (_boolean_result) { 
      out.write("<th class=\"table_header w s\" width=\"80\" style=\"text-align: center;\" nowrap=\"nowrap\">\n<a href=\"#\" onclick=\"SelectionTree.toggleSelectAll(); this.innerHTML = (this.innerHTML == 'Select All') ? 'Clear All' : 'Select All'; return false;\" class=\"tableheader\">");
 {out.write(localizeISText("PageletTemplateTreeInc.SelectAll.link1",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a>\n</th>");
 } else { 
      out.write("<th class=\"table_header w s\" nowrap=\"nowrap\">\n&nbsp;\n</th>");
 }} 
 } 
      out.write("<th class=\"table_header w e s\">");
 {out.write(localizeISText("PageletTemplateTreeInc.Name.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</th>\n<th class=\"table_header e s\">");
 {out.write(localizeISText("PageletTemplateTreeInc.ID.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</th>\n<th class=\"table_header e s\">");
 {out.write(localizeISText("PageletTemplateTreeInc.Group.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</th>\n<th class=\"table_header e s\">");
 {out.write(localizeISText("PageletTemplateTreeInc.Type.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</th>\n<th class=\"table_header e s\">");
 {out.write(localizeISText("PageletTemplateTreeInc.Description.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</th>");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) ((((context.getFormattedValue(getObject("SelectionListing"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",133,e);}if (_boolean_result) { 
      out.write("<th class=\"table_header e s\" width=\"1%\" nowrap=\"nowrap\">");
 {out.write(localizeISText("PageletTemplateTreeInc.Actions.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</th>");
 } 
      out.write("</tr>\n</thead>\n<tbody>");
 processOpenTag(response, pageContext, "createmap", new TagParameter[] {
new TagParameter("mapname","HasMoreMap")}, 137); 
 processOpenTag(response, pageContext, "pagelettemplatetreesubtree", new TagParameter[] {
new TagParameter("Locale",getObject("Locale")),
new TagParameter("Site",getObject("Site")),
new TagParameter("ReadOnly",getObject("ReadOnly")),
new TagParameter("ExcludedPagelets",getObject("ExcludedPagelets")),
new TagParameter("DepthCounter",new Double(0)),
new TagParameter("SelectedPagelets",getObject("SelectedPagelets")),
new TagParameter("RestrictByConstraintCtnr",getObject("RestrictByConstraintCtnr")),
new TagParameter("SelectedPageletDefinitions",getObject("SelectedPageletDefinitions")),
new TagParameter("SelectionName",getObject("SelectionName")),
new TagParameter("SelectionListing",getObject("SelectionListing")),
new TagParameter("SelectionValues",getObject("SelectionValues")),
new TagParameter("ReturnRowCounter","RowCounter"),
new TagParameter("PermissionMap",getObject("PermissionMap")),
new TagParameter("ContextObject",getObject("ContextObject")),
new TagParameter("RowCounter",new Double(0)),
new TagParameter("HasMoreMap",getObject("HasMoreMap")),
new TagParameter("PageFlag",getObject("PageFlag")),
new TagParameter("ExpandedEntries",getObject("Result:ExpandedPageletTemplateTreeEntries")),
new TagParameter("SelectionType",getObject("SelectionType")),
new TagParameter("ConstraintCtnr",getObject("ConstraintCtnr")),
new TagParameter("ContentRepository",getObject("ContentRepository")),
new TagParameter("SelectionValue",getObject("SelectionValue")),
new TagParameter("PageletModelRepository",getObject("Result:PageletModelRepository"))}, 139); 
      out.write("</tbody>\n</table>\n<script type=\"text/javascript\">\nfunction switchActive(element)\n{\nvar allElements = document.getElementsByTagName(\"tr\");\nfor (var i = 0, len = allElements.length; i < len; ++ i) \n{\nif(allElements[i].className.match(/\\bactive\\b/g))\n{\nallElements[i].className = allElements[i].className.replace(/active/g, \"\")\n}\n}\nvar newActiveElement = element.parentNode.parentNode;\nnewActiveElement.className = newActiveElement.className + \" active\";\n}\nfunction toggleSelected(element)\n{\nelement.checked ? element.checked = false : element.checked = true;\n}\nfunction toggleSelectAll(toggleElement, partOfFormElementName, selectAllText, clearAllText)\n{\nvar select = true;\nif (toggleElement.innerHTML == selectAllText)\n{\ntoggleElement.innerHTML = clearAllText;\nselect = true;\n} else {\ntoggleElement.innerHTML = selectAllText;\nselect = false;\n}\nvar e = toggleElement;\nwhile (e.nodeName != \"FORM\") {\ne = e.parentNode;\n}\nvar formElements = e.elements;\nfor (var i=0; i<formElements.length; i++) {\nif ( ( -1 != formElements[i].name.indexOf(partOfFormElementName) ) &&\n");
      out.write("( formElements[i].disabled == false ) &&\n( ( formElements[i].type == \"checkbox\" ) ||\n( formElements[i].type == \"radio\" ) ) ) {\nformElements[i].checked = select;\n}\n}\nreturn false;\n}\n</script>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
