/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.content.refsiteparameters;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class CssConfigParameterInc_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
      out.write("<div id=\"configContainer_");
 {String value = null;try{value=context.getFormattedValue(getObject("ConfigurationParameterDefinition:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {3}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" \nname=\"ConfigurationParameter_");
 {String value = null;try{value=context.getFormattedValue(getObject("ConfigurationParameterDefinition:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {6}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" \nid=\"ConfigurationParameter_");
 {String value = null;try{value=context.getFormattedValue(getObject("ConfigurationParameterDefinition:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {7}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" \nvalue=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ConfigurationParameterWebForm:getParameter(ConfigurationParameterDefinition:Name):Value"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {8}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\n/>\n<div>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tr>\n<td class=\"label\">\n<label class=\"label\" for=\"cssClass\">");
 {out.write(localizeISText("CssConfigParameterInc.CSSClass.label",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</label>\n</td>\n<td>\n<input type=\"text\" class=\"inputfield_en\" id=\"cssClass\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("IsPageletEditable"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",29,e);}if (_boolean_result) { 
      out.write("disabled=\"disabled\"");
 } 
      out.write(">\n</td>\n</tr>\n</table>\n</div>\n<script type=\"text/javascript\">\n// if-condition is required to prevent recreation of the same function in case \n// multiple custom config parameters are included. Can be removed once functions\n// are moved to an external JS file.\nif (!serializeCustomConfigValues) {\n/**\n* Serialize custom configuration field values\n* \n* @param fields Array of fields to iterate over and to serialize values\n* @param serializedField Form field (typically hidden) that hold the serialized config data\n*\n* TODO: this or a similar function should be moved to an external JavaScript file \n* that is available on all pages that require this functionality\n*/\nvar serializeCustomConfigValues = function(fields, serializedField) {\nvar newConfigValues = \"\";\nfor (var i=0; i<fields.length; i++) {\nif (i != 0)\nnewConfigValues += ';';\nnewConfigValues += (fields[i].id + '=' + fields[i].value);\n}\nserializedField.value = newConfigValues;\nreturn true;\n}\n}\n// if-condition is required to prevent recreation of the same function in case \n");
      out.write("// multiple custom config parameters are included. Can be removed once functions\n// are moved to an external JS file.\nif (!populateCustomConfigFields) {\n/**\n* Unserialize data, populate fields, and add event listeners\n* \n* @param configContainerId ID of element containing custom configuration fields\n* @param serializedDataFieldId ID of (typically hidden) field that contains the serialized config data\n* @param configFieldClass Class set on custom config fields of which values should be set and read\n*\n* TODO: this or a similar function should be moved to an external JavaScript file \n* that is available on all pages that require this functionality\n*/\nvar populateCustomConfigFields = function(configContainerId, serializedDataFieldId, configFieldClass) {\n// Read and split serialized configuration information\nvar configContainer = document.getElementById(configContainerId);\nvar serializedDataField = document.getElementById(serializedDataFieldId);\nvar fieldValues = (serializedDataField.value).split(';');\n// Get elements by class name. Internet Explorer requires special treatment.\n");
      out.write("var configFields = [];\nif(document.getElementsByClassName){\nconfigFields = configContainer.getElementsByClassName(configFieldClass);\n} else {\nvar fields = document.getElementsByTagName(\"input\"); // TODO: add support for other fields than input\nvar len = fields.length;\nwhile(len){\ntemp = fields[--len];\nif(temp.className.indexOf(configFieldClass) != -1) \nconfigFields.push(temp);\n}\n}\nfor (var i=0; i<configFields.length; i++) {\n// text fields - TODO: add functionality for other form field types\nif ((configFields[i].className).indexOf(\"text\") != -1) {\n// Set value\nif (serializedDataField.value != '')\nconfigFields[i].value = fieldValues[i].split('=')[1];\n// Set event listener\nconfigFields[i].onblur = function() { serializeCustomConfigValues(configFields, serializedDataField); }\n}\n}\nreturn true;\n}\n}\n// Populate custom config fields with existing values\npopulateCustomConfigFields(\n'configContainer_");
 {String value = null;try{value=context.getFormattedValue(getObject("ConfigurationParameterDefinition:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {119}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("',\n'ConfigurationParameter_");
 {String value = null;try{value=context.getFormattedValue(getObject("ConfigurationParameterDefinition:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {120}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("',\n'custom'\n);\n</script>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
