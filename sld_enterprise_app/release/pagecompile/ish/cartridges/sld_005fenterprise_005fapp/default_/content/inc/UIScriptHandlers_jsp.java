/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.content.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class UIScriptHandlers_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ConfigurationParameterCtnr:ParentContainer"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",2,e);}if (_boolean_result) { 
      out.write("\t\t\t\t\t\t \n\t<script type=\"text/javascript\" src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/js/parameter-overloading.js\"></script>\n\t\t\t\t\t\n\t\n\t");
 processOpenTag(response, pageContext, "uidefinitionutils", new TagParameter[] {
new TagParameter("UIDefinitionUtils","UIDefinitionUtils")}, 6); 
      out.write('\n');
      out.write('	');
 {Object temp_obj = (replace(context.getFormattedValue(getObject("ConfigurationParameterCtnr:UUID"),null),(String)("\\."),(String)("-"))); getPipelineDictionary().put("ContainerIDSuffix", temp_obj);} 
      out.write("\n\t\n\t");
 {Object temp_obj = (getObject("UIDefinitionUtils:AggregateScriptFiles(ConfigurationParameterCtnr:ConfigurationParameterDefinitionCtnr,ContentRepository)")); getPipelineDictionary().put("UIAggregateScriptFiles", temp_obj);} 
      out.write("\t\t\t\n\t\n\t<script type=\"text/javascript\">\n\t\tif (typeof cpoScriptHandlers == 'undefined') {\t\n\t\t\tvar cpoScriptHandlers = {};\n\t\t}\n\t\t\n\t\t$(function(){\n\t\t\tcpoManager.init(jQuery('");
      out.print(context.getFormattedValue("#",null));
      out.write("cpo-form-");
 {String value = null;try{value=context.getFormattedValue(getObject("ContainerIDSuffix"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {17}",e);}if (value==null) value="";out.write(value);} 
      out.write("'));\n\t\t});\n\t</script>\n\t\t\n\t");
 while (loop("UIAggregateScriptFiles","ScriptFile",null)) { 
      out.write("\n\t\t<script type=\"text/javascript\"  src=\"");
 {String value = null;try{value=context.getFormattedValue(context.getFormattedValue(context.webRoot(),null) + context.getFormattedValue("/",null) + context.getFormattedValue(getObject("ScriptFile"),null),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {22}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"></script>\t\t\n\t");
 } 
      out.write("\n\t\t\n\t\t\n\t");
 while (loop("ConfigurationParameterCtnr:ConfigurationParameterDefinitionCtnr:ConfigurationParameterDefinitions","ConfigurationParameterDefinition",null)) { 
      out.write('\n');
      out.write('	');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("ConfigurationParameterDefinition:Visible"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",27,e);}if (_boolean_result) { 
      out.write("\t\t\t\t\n\t\t\t");
 {Object temp_obj = (getObject("UIDefinitionUtils:ScriptHandler(ConfigurationParameterDefinition:TypeReference,ContentRepository)")); getPipelineDictionary().put("ScriptHandlerReference", temp_obj);} 
      out.write("\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t    ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ScriptHandlerReference"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",30,e);}if (_boolean_result) { 
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\tjQuery(function() {\t\t\n\t\t\t\t\tvar $parameterUI = jQuery('");
      out.print(context.getFormattedValue("#",null));
      out.write("cpo-parameter-");
 {String value = null;try{value=context.getFormattedValue(getObject("ConfigurationParameterDefinition:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {33}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('-');
 {String value = null;try{value=context.getFormattedValue(getObject("ContainerIDSuffix"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {33}",e);}if (value==null) value="";out.write(value);} 
      out.write("');\n\t\t\t\t\t\n\t\t\t\t\tvar parameterInfo = {\n\t\t\t\t\t\tname : '");
 {String value = null;try{value=context.getFormattedValue(getObject("ConfigurationParameterDefinition:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {36}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("',\n\t\t\t\t\t\tmultiple : ");
 {String value = null;try{value=context.getFormattedValue(getObject("ConfigurationParameterDefinition:Multiple"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {37}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(",\n\t\t\t\t\t\ttypeReference : '");
 {String value = null;try{value=context.getFormattedValue(getObject("ConfigurationParameterDefinition:TypeReference"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {38}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("'\t\t\t\t\t\t\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tcpoScriptHandlers.");
 {String value = null;try{value=context.getFormattedValue(getObject("ScriptHandlerReference:ScriptHandlerName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {41}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("($parameterUI, parameterInfo, $);\n\t\t\t\t\t\n\t\t\t\t\tvar parameter = cpoManager.createUIParameter($parameterUI);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tparameter.init();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t});\n\t\t\t</script>\n\t\t\t");
 } 
      out.write("\t\t\n\t\t");
 } 
      out.write("\t\t\t\t\n\t");
 } 
      out.write('\n');
 } 
      out.write('\n');
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
