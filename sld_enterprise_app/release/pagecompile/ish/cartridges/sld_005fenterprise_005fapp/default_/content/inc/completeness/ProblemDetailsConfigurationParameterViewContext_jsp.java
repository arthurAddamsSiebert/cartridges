/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.content.inc.completeness;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class ProblemDetailsConfigurationParameterViewContext_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write('\n');
 
setEncodingType("text/html"); 
 {try{executePipeline("ProcessCmsValidation-GetValidationResultsForViewContextFallBacksMandatory",((java.util.Map)(((new ParameterMap().addParameter(new ParameterEntry("PageletUUID",getObject("object:UUID")))).addParameter(new ParameterEntry("ObjectDomain",getObject("ContentRepository:RepositoryDomain"))).addParameter(new ParameterEntry("checkForMandatory",getObject("checkForMandatory"))).addParameter(new ParameterEntry("checkForEmptySlot",getObject("checkForEmptySlot"))).addParameter(new ParameterEntry("startdate",getObject("startdate"))).addParameter(new ParameterEntry("enddate",getObject("enddate"))).addParameter(new ParameterEntry("Locale",getObject("Locale"))).addParameter(new ParameterEntry("ContentRepositoryUUID",getObject("ContentRepository:UUID")))))),"FallBackResults");}catch(Exception e){Logger.error(this,"ISPIPELINE failed. Line: 4.",e);}} 
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("firstBlock"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",6,e);}if (_boolean_result) { 
 {Object temp_obj = (" "); getPipelineDictionary().put("clazz", temp_obj);} 
      out.write(' ');
      out.write('\n');
 } else { 
 {Object temp_obj = ("follow"); getPipelineDictionary().put("clazz", temp_obj);} 
 } 
      out.write("<ul class=\"problemDetail ");
 {String value = null;try{value=context.getFormattedValue(getObject("clazz"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {11}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 while (loop("FallBackResults:SearchResult","sr",null)) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("sr:count")).doubleValue() >((Number)(new Double(1))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",13,e);}if (_boolean_result) { 
 {Object temp_obj = (context.getFormattedValue(" ",null) + context.getFormattedValue(localizeText(context.getFormattedValue("ProblemDetailsConfigurationParameterViewContext.MissingConfigurationParametersInFallback.value",null)),null)); getPipelineDictionary().put("LinkText", temp_obj);} 
 } else { 
 {Object temp_obj = (context.getFormattedValue(" ",null) + context.getFormattedValue(localizeText(context.getFormattedValue("ProblemDetailsConfigurationParameterViewContext.MissingConfigurationParameterInFallback.value",null)),null)); getPipelineDictionary().put("LinkText", temp_obj);} 
 } 
 processOpenTag(response, pageContext, "displayname", new TagParameter[] {
new TagParameter("Nameable",getObject("sr:PageletEntryPoint")),
new TagParameter("Locale",getObject("SessionLocale")),
new TagParameter("Print","false"),
new TagParameter("NameableDisplayName","FallBackName")}, 18); 
      out.write("<li>");
 processOpenTag(response, pageContext, "objectlink", new TagParameter[] {
new TagParameter("ObjectType","Page"),
new TagParameter("ObjectUUID",getObject("sr:PageletEntryPoint:UUID")),
new TagParameter("LocaleID",getObject("sr:locale:LocaleID")),
new TagParameter("ContentRepositoryUUID",getObject("ContentRepository:UUID")),
new TagParameter("SelectedMenuItem","ContentOverview"),
new TagParameter("LinkText",context.getFormattedValue(context.getFormattedValue(getObject("sr:count"),"#,##0"),null) + context.getFormattedValue(getObject("LinkText"),null) + context.getFormattedValue(getObject("FallBackName"),null))}, 20); 
      out.write("\n&nbsp;");
 {String value = null;try{value=context.getFormattedValue(getObject("sr:locale:DisplayName(SessionLocale)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {21}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</li>");
 } 
      out.write("</ul>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
