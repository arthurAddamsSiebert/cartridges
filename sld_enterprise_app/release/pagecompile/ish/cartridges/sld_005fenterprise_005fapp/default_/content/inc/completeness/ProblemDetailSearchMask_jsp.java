/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.content.inc.completeness;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class ProblemDetailSearchMask_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"inc/Modules", null, "2");} 
      out.write("<input type=\"hidden\" name=\"ContentRepositoryUUID\" value=\"");
      out.print(context.getFormattedValue(getObject("ContentRepository:UUID"),null));
      out.write("\" />\n<input type=\"hidden\" name=\"preselectedProblemType\" value=\"");
      out.print(context.getFormattedValue(stringToHtml(context.getFormattedValue(getObject("preselectedProblemType"),null)),null));
      out.write("\" />\n<input type=\"hidden\" name=\"preselectedLocale\" value=\"");
      out.print(context.getFormattedValue(stringToHtml(context.getFormattedValue(getObject("preselectedLocale"),null)),null));
      out.write("\" />\n<table class=\"infobox w e\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n<tr>\n<td class=\"label\" nowrap=\"nowrap\">\n<label class=\"label label_light\" for=\"");
      out.print(context.getFormattedValue(getObject("ContentCompletenessDetailSearch:NameOrID:QualifiedName"),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("ProblemDetailSearchMask.NameOrID.label",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</label>\n</td>\n<td> \n<input type=\"text\" \nname=\"");
      out.print(context.getFormattedValue(getObject("ContentCompletenessDetailSearch:NameOrID:QualifiedName"),null));
      out.write("\" \nid=\"");
      out.print(context.getFormattedValue(getObject("ContentCompletenessDetailSearch:NameOrID:QualifiedName"),null));
      out.write("\" \nclass=\"inputfield_en\"\nvalue=\"");
      out.print(context.getFormattedValue(encodeString(context.getFormattedValue(getObject("ContentCompletenessDetailSearch:NameOrID:Value"),null)),null));
      out.write("\" />\n</td>\n<td class=\"label\" nowrap=\"nowrap\">\n<label class=\"label label_light label_horizontal_align\" for=\"paramProblemType\">");
 {out.write(localizeISText("ProblemDetailSearchMask.ProblemType.label",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</label>\n</td>");
 processOpenTag(response, pageContext, "createmap", new TagParameter[] {
new TagParameter("key1","checkEmptySlots"),
new TagParameter("key0","missingMandatory"),
new TagParameter("value1","Empty slot / placeholder"),
new TagParameter("value0","Missing configuration parameter"),
new TagParameter("mapname","ProblemTypes")}, 23); 
      out.write("<td>\n<select name=\"");
      out.print(context.getFormattedValue(getObject("ContentCompletenessDetailSearch:ProblemType:QualifiedName"),null));
      out.write("\" id=\"paramProblemType\" \nclass=\"select inputfield_en\"\n");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("disableInput")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("disableInput"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() || ((Boolean) ((((context.getFormattedValue(getObject("preselectedProblemType"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",30,e);}if (_boolean_result) { 
      out.write("disabled=\"disabled\"");
 } 
      out.write("\n>\n<option value=\"all\">");
 {out.write(localizeISText("ProblemDetailSearchMask.AllProblemTypes.option",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</option>");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ProblemTypes"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",33,e);}if (_boolean_result) { 
 while (loop("ProblemTypes:KeySet","ProblemType",null)) { 
      out.write("<option value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ProblemType"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {35}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("ContentCompletenessDetailSearch:ProblemType:Value"),null).equals(context.getFormattedValue(getObject("ProblemType"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",36,e);}if (_boolean_result) { 
      out.write("\nselected=\"selected\"\n");
 } 
      out.write(' ');
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("ProblemTypes:get(ProblemType)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {39}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</option>");
 } 
 } 
      out.write("</select>\n</td>\n<td class=\"label\" nowrap=\"nowrap\">\n<label class=\"label label_light label_horizontal_align\" for=\"paramLanguage\">");
 {out.write(localizeISText("ProblemDetailSearchMask.Language.label",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</label>\n</td>\n<td>\n<select name=\"");
      out.print(context.getFormattedValue(getObject("ContentCompletenessDetailSearch:locale:QualifiedName"),null));
      out.write("\" id=\"paramLanguage\" \nclass=\"select inputfield_en\" \n");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("disableInput")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("disableInput"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() || ((Boolean) ((((context.getFormattedValue(getObject("preselectedLocale"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() || ((Boolean) ((((context.getFormattedValue(getObject("ContentCompletenessDetailSearch:ProblemType:Value"),null).equals(context.getFormattedValue("checkEmptySlots",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",51,e);}if (_boolean_result) { 
      out.write("disabled=\"disabled\"");
 } 
      out.write("\n>\n<option value=\"all\">");
 {out.write(localizeISText("ProblemDetailSearchMask.AllLanguages.option",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</option>");
 while (loop("Locales","Locale",null)) { 
      out.write("<option value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("Locale:LocaleID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {55}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write(' ');
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("Locale:LocaleID"),null).equals(context.getFormattedValue(getObject("ContentCompletenessDetailSearch:locale:Value"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",55,e);}if (_boolean_result) { 
      out.write("selected=\"selected\"");
 } 
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("Locale:DisplayName(CurrentRequest:Locale)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {56}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(" \n</option>");
 } 
      out.write("</select> \n</td>\n<td width=\"100%\">\n<table border=\"0\" cellspacing=\"5\" cellpadding=\"0\">\n<tr>\n<td class=\"button\">\n<input type=\"submit\" value=\"");
      out.print(context.getFormattedValue(localizeText(context.getFormattedValue("ProblemDetailSearchMask.Find.button",null)),null));
      out.write("\" class=\"button\" name=\"find\"/>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n</table>\n<table class=\"infobox w e s\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n<tr>\n<td class=\"label_text\"><label class=\"label label_text label_light\">");
 {out.write(localizeISText("ProblemDetailSearchMask.PresetStartTime.label",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</label></td>\n<td class=\"table_detail\" nowrap=\"nowrap\">");
 {String value = null;try{value=context.getFormattedValue(getObject("startdate"),new Integer(DATE_SHORT),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {75}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;");
 {String value = null;try{value=context.getFormattedValue(getObject("startdate"),new Integer(DATE_TIME),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {75}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n<td class=\"label_text\"><label class=\"label label_text label_light label_horizontal_align\">");
 {out.write(localizeISText("ProblemDetailSearchMask.PresetEndTime.label",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</label></td>\n<td class=\"table_detail\" nowrap=\"nowrap\" width=\"100%\">");
 {String value = null;try{value=context.getFormattedValue(getObject("enddate"),new Integer(DATE_SHORT),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {77}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;");
 {String value = null;try{value=context.getFormattedValue(getObject("enddate"),new Integer(DATE_TIME),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {77}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>\n<tr><td colspan=\"5\"><img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/space.gif\" width=\"1\" height=\"6\" alt=\"\" border=\"0\"/></td></tr>\n</table>\n<script lang=\"JavaScript\">\n$(function() {\n$('");
      out.print(context.getFormattedValue("#",null));
      out.write("paramProblemType').change(function() {\nif ($('");
      out.print(context.getFormattedValue("#",null));
      out.write("paramProblemType option:selected').attr('value') === 'checkEmptySlots') {\n$('");
      out.print(context.getFormattedValue("#",null));
      out.write("paramLanguage').attr('disabled','disabled');\n}\nelse {\nif ('");
      out.print(context.getFormattedValue(stringToHtml(context.getFormattedValue(getObject("preselectedLocale"),null)),null));
      out.write("' === 'true') {}\nelse $('");
      out.print(context.getFormattedValue("#",null));
      out.write("paramLanguage').removeAttr('disabled');\n}\n}); \n});\n</script>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
