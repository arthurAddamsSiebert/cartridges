/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.htmleditor;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Collections;
import java.util.regex.Pattern;
import javax.naming.Binding;
import javax.naming.InitialContext;
import javax.naming.LinkRef;
import javax.naming.NamingEnumeration;
import javax.naming.Context;
import org.slf4j.LoggerFactory;
import com.intershop.beehive.core.capi.domain.Domain;
import com.intershop.beehive.core.capi.domain.DomainMgr;
import com.intershop.beehive.core.capi.localization.LocaleMgr;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.paging.PageableIterator;
import com.intershop.beehive.core.capi.user.User;
import com.intershop.component.foundation.capi.paging.PageablePositionableIterator;
import com.intershop.component.foundation.capi.security.UserAuthorization;
import com.intershop.component.foundation.capi.security.Authorization;

public final class ServerBrowserList_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

 protected Boolean printTemplateMarker() { return Boolean.FALSE; } 

    public static class BindingOrder implements Comparator<Binding> {
        public static final BindingOrder INSTANCE = new BindingOrder();
        public int compare(final Binding a, final Binding b) {
            return a.getName().compareTo(b.getName());
        }
    }
    private static String stripSlash(final String name) {    
        if (name == null || !name.endsWith("/")) {
            return name;
        } else {
            return name.substring(0, name.length() - 1);
        }
    }
    private static final Pattern BUNDLE_PATTERN = Pattern.compile("^isfile://(?:[^/]+/){3}branding[-/].*");

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 

setEncodingType("text/xml"); 
      out.write("\n<?is-template class=\"");
      out.print(getClass().getName());
      out.write("\" credits=\"Copyright (C) 2008 Intershop Communications AG, all rights reserved.\"?>\n");
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"htmleditor/Modules.isml", null, "44");} 
      out.write('\n');

    final DomainMgr domainManager = NamingMgr.getManager(DomainMgr.class);
    final Domain unitDomain = domainManager.getDomainByUUID(String.valueOf(getObject("OrganizationDomainId")));
    if (unitDomain != null) {
        final Domain siteDomain = unitDomain.isMereUnit() ? unitDomain.getSite() : unitDomain;
        getPipelineDictionary().put("SiteDomain", siteDomain);
    }
    final String startURI;
    try {
        startURI = String.valueOf(getObject("ContextURI"));

        // List bindings at startURI.
        final InitialContext initial = new InitialContext();
        initial.addToEnvironment(Authorization.AUTHORIZATION_ENVIRONMENT_KEY, new UserAuthorization((User)getObject("CurrentUser")));
        final NamingEnumeration<Binding> result = initial.listBindings(startURI);

        // Since directories and files are intermixed without any order, we have no choice but to separate them
        // here. While we're at it, we can sort them as well.
        final ArrayList<Binding> fileList = new ArrayList<Binding>();
        final ArrayList<Binding> subdirList = null == getObject("PageNumber") ? new ArrayList<Binding>(): null;
        while (result.hasMore()) {
            final Binding item = result.next();
            Object o = item.getObject();
            if (o instanceof LinkRef) {
                // Resolve links so that they appear as objects.
                o = initial.lookupLink(startURI + item.getName());
                item.setObject(o);
            } 
            if (o instanceof Context) {
                if (subdirList != null) {
                    subdirList.add(item);
                }
            } else {
                fileList.add(item);
            }
        }
        if (subdirList != null) {
            Collections.sort(subdirList, BindingOrder.INSTANCE);
            getPipelineDictionary().put("Subdirs", PageablePositionableIterator.attach(subdirList));
        } else {
            getPipelineDictionary().remove("Subdirs");
        }
        Collections.sort(fileList, BindingOrder.INSTANCE);
        PageableIterator pageable = PageablePositionableIterator.attach(fileList);
        pageable.setPageSize(val((String)getObject("PageSize")).intValue());
        pageable.setPage(val((String)getObject("PageNumber")).intValue());
        getPipelineDictionary().put("Files", pageable);
    } catch (Exception e1) {
        LoggerFactory.getLogger(getClass()).error("List '" + getObject("ContextURI") + "' failed:", e1);
        
      out.write("<error><message>");
      out.print(e1.getMessage());
      out.write("</message></error>");

        return;
    }

      out.write("\n<collection id=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ContextURI"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {98}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("PageNumber"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",98,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(context.getFormattedValue("#",null) + context.getFormattedValue(getObject("PageNumber"),null),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {98}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("PageSize"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",98,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(context.getFormattedValue(".",null) + context.getFormattedValue(getObject("PageSize"),null),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {98}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } 
 } 
      out.write("\">\n    <uri>");
 {String value = null;try{value=context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ServerBrowser-List",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("ContextURI",null),context.getFormattedValue(getObject("ContextURI"),null)))),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {99}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</uri>\n    <items>\n        <collection>\n            \n            <title>[..]</title>\n        </collection>\n        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("Subdirs") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",105,e);}if (_boolean_result) { 
      out.write("\n            ");
 while (loop("Subdirs","Subdir",null)) { 
      out.write("\n                ");

                    final String name = (String)getObject("Subdir:Name");
                    final String folderUri = startURI + name;
                    if (BUNDLE_PATTERN.matcher(folderUri).matches()) {
                        continue;
                    }
                    getPipelineDictionary().put("SubdirName", stripSlash(name));
                    getPipelineDictionary().put("SubdirURI", folderUri);
                
      out.write("\n        \t\t<collection id=\"isfile://");
 {String value = null;try{value=context.getFormattedValue(getObject("Subdir:Object:SiteName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {116}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('/');
 {String value = null;try{value=context.getFormattedValue(getObject("Subdir:NameInNamespace"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {116}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n        \t\t\t<uri>");
 {String value = null;try{value=context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ServerBrowser-List",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("ContextURI",null),context.getFormattedValue(getObject("SubdirURI"),null))).addURLParameter(context.getFormattedValue("AsLink",null),context.getFormattedValue(getObject("AsLink"),null)).addURLParameter(context.getFormattedValue("LocaleId",null),context.getFormattedValue(getObject("LocaleId"),null)).addURLParameter(context.getFormattedValue("OrganizationDomainId",null),context.getFormattedValue(getObject("OrganizationDomainId"),null))),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {117}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</uri>\n        \t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((context.getFormattedValue(getObject("SiteDomain:DomainName"),null).equals(context.getFormattedValue(getObject("Subdir:Object:SiteName"),null)))) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",118,e);}if (_boolean_result) { 
      out.write("\n        \t\t\t\t<icon>");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/css/ServerBrowser/ic_folder.gif</icon>\n        \t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((disableErrorMessages().isDefined(getObject("Subdir:Object:WritePermission"))))).booleanValue() && ((Boolean) ((((Boolean) getObject("Subdir:Object:WritePermission")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",120,e);}if (_boolean_result) { 
      out.write("\n\t        \t\t\t\t<readonly>true</readonly>\n        \t\t\t\t");
 } 
      out.write("\n        \t\t\t");
 } else { 
      out.write("\n        \t\t\t\t<icon>");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/css/ServerBrowser/icon_shared_folder.gif</icon>\n        \t\t\t\t<readonly>true</readonly>\n        \t\t\t");
 } 
      out.write("\n        \t\t\t<title>");
 {String value = null;try{value=context.getFormattedValue(getObject("SubdirName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {127}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</title>\n        \t\t\t<src>");
 {String value = null;try{value=context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ServerBrowser-List",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("ContextURI",null),context.getFormattedValue(getObject("SubdirURI"),null))).addURLParameter(context.getFormattedValue("AsLink",null),context.getFormattedValue(getObject("AsLink"),null)).addURLParameter(context.getFormattedValue("LocaleId",null),context.getFormattedValue(getObject("LocaleId"),null)).addURLParameter(context.getFormattedValue("OrganizationDomainId",null),context.getFormattedValue(getObject("OrganizationDomainId"),null))),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {128}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</src>\n        \t\t</collection>\n            ");
 } 
      out.write("\n        ");
 } 
      out.write("\n        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("Files") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",132,e);}if (_boolean_result) { 
      out.write("\n            ");
 while (loop("Files","FileBinding",null)) { 
      out.write("\n                ");
 {Object temp_obj = (getObject("FileBinding:Object")); getPipelineDictionary().put("File", temp_obj);} 
      out.write("\n                ");

                    final String fileUri = String.valueOf(getObject("File:ContextURL"));
                    if (BUNDLE_PATTERN.matcher(fileUri).matches()) {
                        continue;
                    }
                
      out.write("\n                <resource id=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("File:ContextURL"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {141}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n                    <title>");
 {String value = null;try{value=context.getFormattedValue(getObject("File:FileName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {142}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</title>\n                    <description>");
 {String value = null;try{value=context.getFormattedValue(getObject("File:ContentDescriptor"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {143}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</description>\n                    <description2>Image</description2>\n                    <size>");
 {String value = null;try{value=context.getFormattedValue(getObject("File:FileSize"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {145}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(" (byte)</size>\n                    <height></height>\n                    <width></width>\n        \t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) ((((context.getFormattedValue(getObject("SiteDomain:DomainName"),null).equals(context.getFormattedValue(getObject("File:SiteDomainName"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",148,e);}if (_boolean_result) { 
      out.write("\n        \t\t\t\t<readonly>true</readonly>\n\t                    <icon>");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/shared_content.gif</icon>\n        \t\t\t");
 } 
      out.write("\n                    <preview>");
 {String value = null;try{value=context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ServerBrowser-Thumbnail",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("URI",null),context.getFormattedValue(getObject("File:ContextURL"),null)))),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {152}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</preview>\n                    ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("AsLink"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",153,e);}if (_boolean_result) { 
      out.write("\n                        <src>");
 {String value = null;try{value=context.getFormattedValue(contentURL(context.getFormattedValue(getObject("File:ContentDescriptor"),null),context.getFormattedValue(getObject("LocaleId"),null)),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {154}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</src>\n                        <encodeduri>https://./?[ismediaobject]isstatic://./?");
 {String value = null;try{value=context.getFormattedValue(getObject("File:ContentDescriptor"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {155}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('|');
 {String value = null;try{value=context.getFormattedValue(getObject("File:StaticURL"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {155}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("[/ismediaobject]</encodeduri>\n                    ");
 } else { 
      out.write("\n                        <uri>");
 {String value = null;try{value=context.getFormattedValue(contentURL(context.getFormattedValue(getObject("File:ContentDescriptor"),null),context.getFormattedValue(getObject("LocaleId"),null)),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {157}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</uri>\n                    ");
 } 
      out.write("\n                </resource>\n            ");
 } 
      out.write("\n        ");
 } 
      out.write("\n        ");
 processOpenTag(response, pageContext, "kupuresourcepaging", new TagParameter[] {
new TagParameter("Pageable",getObject("Files")),
new TagParameter("ResourceIdPrefix",getObject("CollectionID")),
new TagParameter("GetterPipeline","ServerBrowser-SearchStaticContent"),
new TagParameter("GetterValue0",getObject("Query")),
new TagParameter("GetterParam1","PageSize"),
new TagParameter("GetterParam0","Query"),
new TagParameter("GetterValue1",getObject("Files:PageSize"))}, 162); 
      out.write("\n    </items>\n</collection>\n");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
