/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.serverbrowser;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class ServerBrowserLightbox_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n    <head>");
 insertIntershopSignature(request,(com.intershop.beehive.core.capi.request.ServletResponse)response); 

    final String uri = String.valueOf(getObject("URI"));
    getPipelineDictionary().put("Name", uri.substring(uri.lastIndexOf('/') + 1));

      out.write("\n        <title>");
 {String value = null;try{value=context.getFormattedValue(getObject("Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {7}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</title>\n        <script type=\"text/javascript\"><!--\nfunction dismiss() {\n    window.close();\n}\nfunction resizeWindowTo(node) {\n    // Avoid any potential event-looping during resizing.\n    node.onload = \"\";\n    if (node.clientWidth && node.clientHeight) {\n        window.resizeTo(100, 100);\n        if (window.opener.lightBoxPosition) {\n            window.moveTo(window.opener.lightBoxPosition.x, window.opener.lightBoxPosition.y);\n        }\n        var dw = 0;\n        if (window.innerWidth !== undefined && window.outerWidth >= window.innerWidth) {\n            dw = window.outerWidth - window.innerWidth;\n        } else {\n            dw = 28;\n        }\n        var dh = 0;\n        if (window.innerHeight !== undefined && window.outerHeight >= window.innerHeight) {\n            dh = window.outerHeight - window.innerHeight;\n        } else {\n            dh = 82;\n        }\n        var nw = 100;\n        if (node.clientWidth > 0) {\n            nw = node.clientWidth + dw;\n        }\n        var nh = 100;\n        if (node.clientHeight > 0) {\n");
      out.write("            nh = node.clientHeight + dh; // 4px fudge to prevent spurious scrollbars\n        }\n        dw = nw / -2;\n        dh = nh / -2;\n        var sw = window.screen.availWidth ? window.screen.availWidth : window.screen.width ;\n        var sh = window.screen.availHeight ? window.screen.availHeight : window.screen.height;\n        var wx = window.screenX !== undefined ? window.screenX : window.screenLeft;\n        var wy = window.screenY !== undefined ? window.screenY : window.screenTop;\n\n        if (window.screenX + dw + nw > sw) {\n            // Avoid moving off-screen at right.\n            dw = sw - nw - window.screenX;\n        }\n        if (window.screenY + dh + nh > sh) {\n            // Avoid moving off-screen at bottom.\n            dh = sh - nh - window.screenY;\n        }\n        // For screen-constrained environments, we must move the window toward 0,0 or we may not be able to resize\n        // to the full amount available.\n        window.moveBy(dw, dh);\n        window.resizeTo(nw, nh);\n\n        if (window.focus) {\n");
      out.write("            window.focus();\n        }\n    }\n    // window.onblur = dismiss;\n    window.onkeyup = dismiss;\n    window.onclick = dismiss;\n    window.document.body.onkeyup = dismiss;\n}\nfunction moveCrosshair(ev) {\n    ev = ev || window.event;\n    var node = document.getElementById(\"subject\");\n    if (!node) return;\n    var w = node.width;\n    var h = node.height;\n    var x = (ev.layerX || ev.offsetX || 0) + 1;\n    var y = (ev.layerY || ev.offsetY || 0) + 1;\n    var cw = document.getElementById(\"crosshair-width\");\n    cw.innerHTML = String(w);\n    cw.style.display = \"block\";\n    var ch = document.getElementById(\"crosshair-height\");\n    ch.innerHTML = String(h);\n    ch.style.display = \"block\";\n    var ct = document.getElementById(\"crosshair-top\");\n    ct.innerHTML = String(y);\n    ct.style.display = \"block\";\n    var cl = document.getElementById(\"crosshair-left\");\n    cl.innerHTML = String(x);\n    cl.style.display = \"block\";\n    cw.style.top = String(y - 48) + \"px\";\n    cw.style.left = String(x - 16) + \"px\";\n    ch.style.top = String(y - 16) + \"px\";\n");
      out.write("    ch.style.left = String(x - 48) + \"px\";\n    ct.style.top = String(y - 16) + \"px\";\n    ct.style.left = String(x + 16) + \"px\";\n    cl.style.top = String(y + 16) + \"px\";\n    cl.style.left = String(x - 16) + \"px\";\n    if (window.hideCrosshairTimeout) {\n        window.clearTimeout(window.hideCrosshairTimeout);\n    }\n    window.hideCrosshairTimeout = window.setTimeout(hideCrosshair, 4000);\n}\nfunction hideCrosshair() {\n    var cw = document.getElementById(\"crosshair-width\");\n    if (cw) cw.style.display = \"none\";\n    var ch = document.getElementById(\"crosshair-height\");\n    if (ch) ch.style.display = \"none\";\n    var ct = document.getElementById(\"crosshair-top\");\n    if (ct) ct.style.display = \"none\";\n    var cl = document.getElementById(\"crosshair-left\");\n    if (cl) cl.style.display = \"none\";\n}\n//--></script>\n    <style type=\"text/css\">\n        HTML, BODY {\n            width: 100%\n            height: 100%;\n            margin: 0px;\n            padding: 0px;\n          \n        }\n        body {\n            overflow:hidden;\n");
      out.write("        }\n        .subject {\n            border: none;\n            margin: 0px;\n            padding: 0px;\n        }\n        .viewport {\n            margin: 0px;\n            padding: 0px;\n            position: absolute;\n            top: 0px;\n            left: 0px;\n            bottom: 0px;\n            right: 0px;\n            width: 100%;\n            height: 100%; \n            /**\n             background: url(");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/css/ServerBrowser/checkered.png);\n            **/\n        }\n        .viewport img {\n            cursor: crosshair;\n        }\n        .crosshair {\n            z-index: 1;\n            display: none;\n            margin: 0px;\n            padding: 0px;\n            position: absolute;\n            top: 0px;\n            left: 0px;\n            width: 32px;\n            height: 32px;\n            color: white;\n            font-weight: bold;\n            font-family: monospace;\n            font-size: 11px;\n            text-align: center;\n            line-height: 32px;\n        }\n        .arr_width {\n            background: url(");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/css/ServerBrowser/arr_width.png) no-repeat center;\n        }\n        .arr_height {\n            background: url(");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/css/ServerBrowser/arr_height.png) no-repeat center;\n        }\n        .arr_x {\n            background: url(");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/css/ServerBrowser/arr_x.png) no-repeat center;\n        }\n        .arr_y {\n            background: url(");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/css/ServerBrowser/arr_y.png) no-repeat center;\n        }\n    </style>\n    </head>\n    <body>\n        <div onclick=\"dismiss()\" onkeyup=\"dismiss()\" class=\"viewport\">\n            ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("MimeType"),null).equals(context.getFormattedValue("text/html",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",179,e);}if (_boolean_result) { 
      out.write("\n                <iframe id=\"subject\" width=\"1020\" height=\"660\" border=\"0\" onclick=\"dismiss()\" onkeyup=\"dismiss()\"\n                    class=\"subject\" src=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("URI"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {181}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" onload=\"resizeWindowTo(this)\"></iframe>\n            ");
 } else { 
      out.write("\n                <img id=\"subject\" src=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("URI"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {183}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" onload=\"resizeWindowTo(this)\"\n                    onmousemove=\"moveCrosshair(event)\" onmouseout=\"hideCrosshair()\">\n            ");
 } 
      out.write("\n        </div>\n        <div id=\"crosshair-width\" class=\"crosshair arr_width\"></div>\n        <div id=\"crosshair-height\" class=\"crosshair arr_height\"></div>\n        <div id=\"crosshair-top\" class=\"crosshair arr_y\"></div>\n        <div id=\"crosshair-left\" class=\"crosshair arr_x\"></div>\n    </body>\n</html>\n");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
