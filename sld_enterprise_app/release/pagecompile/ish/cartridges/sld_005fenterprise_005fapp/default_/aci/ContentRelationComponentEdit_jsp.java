/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fenterprise_005fapp.default_.aci;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class ContentRelationComponentEdit_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
      out.write("<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" class=\"w e s n\">\n<tr>\n<td>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"100%\">\n<tr>\n<td colspan=\"2\"><img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/space.gif\" width=\"1\" height=\"6\" alt=\"\" border=\"0\"/></td>\n</tr>\n<tr><td colspan=\"2\" class=\"fielditem2\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Document:Root:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {9}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("<td></tr>");
 {Object temp_obj = ("@*"); getPipelineDictionary().put("AttributePathExp", temp_obj);} 
 while (loop("Document:Root:XPathNodes(AttributePathExp)","AttributeNode",null)) { 
 _boolean_result=false;try {_boolean_result=((Boolean)( 
 new Boolean(((String)getObject("AttributeNode:Name")).indexOf(':') == -1)  
 )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",12,e);}if (_boolean_result) { 
      out.write("<tr>\n<td class=\"fielditem2\" nowrap=\"nowrap\">\n@");
 {String value = null;try{value=context.getFormattedValue(getObject("AttributeNode:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {15}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n<td class=\"fielditem2\">\n<input type=\"text\" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("AttributeNode:FormID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {18}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" size=\"40\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("AttributeNode:Value"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {18}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" class=\"inputfield_en\"/>\n</td>\n</tr>");
 } 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("Document:Root:Name"),null).equals(context.getFormattedValue("fcc",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",23,e);}if (_boolean_result) { 
 } 
 while (loop("Document:Root:DescendantNodes","Node",null)) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("Node:MediaContent"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",25,e);}if (_boolean_result) { 
      out.write("<tr>\n<td class=\"fielditem2\" nowrap=\"nowrap\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {28}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n<td class=\"table_detail\">");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("SelectMediaFormID")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("SelectMediaFormID"),null).equals(context.getFormattedValue(getObject("Node:FormID"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) (disableErrorMessages().isDefined(getObject("SelectedMediaObject")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",31,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)( 
 new Boolean(((String)getObject("SelectedMediaObject:MimeType")).startsWith("image")) 
 )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",32,e);}if (_boolean_result) { 
      out.write("<img src=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("SelectedMediaObject:PublicUrl"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {33}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" alt=\"\"/>");
 } else { 
      out.write("<table>\n<tr>\n<td>\n<img alt=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("SelectedMediaObject:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {38}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/../subotnic-client/images/icons/ressources32x32/type_media.gif\" />\n</td>\n<td class=\"table_detail\">");
 {String value = null;try{value=context.getFormattedValue(getObject("SelectedMediaObject:MimeType"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {41}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>\n</table>");
 } 
 } else { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((!(context.getFormattedValue(getObject("Node:IsxmlEmbed"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",47,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)( 
 new Boolean(((String)getObject("Node:IsxmlMimeType")).startsWith("image")) 
 )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",48,e);}if (_boolean_result) { 
      out.write("<img src=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:IsxmlEmbed"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {49}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('/');
      out.write('>');
 } else { 
 {out.write(localizeISText("ContentRelationComponentEdit.MediaObjectOfType",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(':');
      out.write(' ');
 {String value = null;try{value=context.getFormattedValue(getObject("Node:IsxmlMimeType"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {51}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } 
 } else { 
 {out.write(localizeISText("ContentRelationComponentEdit.NoMediaObjectAssigned",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("&nbsp;\n");
 } 
 } 
      out.write("</td>\n</tr>\n<tr>\n<td>\n&nbsp;\n</td>\n<td class=\"table_detail\">\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tr>\n<td>");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("SelectMediaFormID")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("SelectMediaFormID"),null).equals(context.getFormattedValue(getObject("Node:FormID"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) (disableErrorMessages().isDefined(getObject("SelectedMediaPath")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",67,e);}if (_boolean_result) { 
      out.write("<input type=\"text\" name=\"");
 {String value = null;try{value=context.getFormattedValue(context.getFormattedValue(getObject("Node:FormID"),null) + context.getFormattedValue("/isxml:href",null),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {68}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" size=60 value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("SelectedMediaPath"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {68}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" class=\"inputfield_en\"/>");
 } else { 
      out.write("<input type=\"text\" name=\"");
 {String value = null;try{value=context.getFormattedValue(context.getFormattedValue(getObject("Node:FormID"),null) + context.getFormattedValue("/isxml:href",null),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {70}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" size=60 value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:IsxmlHref"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {70}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write(' ');
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("Node:IsxmlHref"),null).equals(context.getFormattedValue("UNDEFINED",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",70,e);}if (_boolean_result) { 
      out.write("disabled=\"disabled\"");
 } 
      out.write(" class=\"inputfield_en\"/>");
 } 
      out.write("</td>\n<td class=\"left\">\n<table border=\"0\" cellspacing=\"4\" cellpadding=\"0\">\n<tr>\n<td class=\"button\">");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("Document:Root:CheckedOut"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",77,e);}if (_boolean_result) { 
      out.write("<input type=\"submit\" name=\"selectMedia\" value=\" ");
      out.print(context.getFormattedValue(localizeText(context.getFormattedValue("ContentRelationComponentEdit.Select.button",null)),null));
      out.write(" \" class=\"button\" onClick=\"document.forms['UpdateCRForm'].elements['SelectMediaFormID'].value ='");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:FormID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {78}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("';document.forms['UpdateCRForm'].elements['SelectedLibraryElementPath'].value =document.forms['UpdateCRForm'].elements['");
 {String value = null;try{value=context.getFormattedValue(context.getFormattedValue(getObject("Node:FormID"),null) + context.getFormattedValue("/isxml:href",null),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {78}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("'].value;return true;\"/>");
 } else { 
      out.write("<input type=\"submit\" name=\"selectMedia\" value=\" ");
      out.print(context.getFormattedValue(localizeText(context.getFormattedValue("ContentRelationComponentEdit.Select.button",null)),null));
      out.write(" \" class=\"button\" disabled=\"disabled\" />");
 } 
      out.write("</td>\n</tr>\n</table>\n</td>\n</tr>\n</table>\n</td>\n</tr>");
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("Node:TextContent"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",91,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("Document:Root:Name"),null).equals(context.getFormattedValue("fcc",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",92,e);}if (_boolean_result) { 
      out.write("<tr>");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("Node:Depth")).doubleValue() >((Number)(new Double(2))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",94,e);}if (_boolean_result) { 
      out.write("<td class=\"fielditem2\" nowrap=\"nowrap\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:ParentNode:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {95}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('/');
 {String value = null;try{value=context.getFormattedValue(getObject("Node:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {95}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>");
 } else { 
      out.write("<td class=\"fielditem2\" nowrap=\"nowrap\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {97}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>");
 } 
      out.write("<td class = \"table_detail\" width = \"90%\"> \n<textarea name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:FormID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {100}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" rows=\"10\" cols=\"50\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:Value"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {100}",e);}if (value==null) value="";out.write(value);} 
      out.write("</textarea>");
 processOpenTag(response, pageContext, "htmleditor", new TagParameter[] {
new TagParameter("ProductLinkSite",getObject("productlinksite")),
new TagParameter("LocaleId",getObject("localeid")),
new TagParameter("CategoryLinkPipeline",getObject("categorylinkpipeline")),
new TagParameter("CategoryLinkSite",getObject("categorylinksite")),
new TagParameter("ProductLinkPipeline",getObject("productlinkpipeline")),
new TagParameter("Enabled",(((context.getFormattedValue(getObject("Document:Root:VersionState"),null).equals(context.getFormattedValue("checkedOut",null)))) ? Boolean.TRUE : Boolean.FALSE)),
new TagParameter("NoRepositoryLinks",getObject("norepositorylinks")),
new TagParameter("RepositoryId",getObject("repositoryid")),
new TagParameter("Name",getObject("Node:FormID"))}, 101); 
      out.write("</td> \n</tr> \n");
 } else { 
      out.write("<tr>");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("Node:Depth")).doubleValue() >((Number)(new Double(2))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",115,e);}if (_boolean_result) { 
      out.write("<td class=\"fielditem2\" nowrap=\"nowrap\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:ParentNode:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {116}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('/');
 {String value = null;try{value=context.getFormattedValue(getObject("Node:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {116}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>");
 } else { 
      out.write("<td class=\"fielditem2\" nowrap=\"nowrap\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {118}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>");
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) (new Double(context.getFormattedValue(getObject("Node:Value"),null).length()))).doubleValue() >((Number)(new Double(50))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",120,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) (new Double(context.getFormattedValue(getObject("Node:Value"),null).length()))).doubleValue() >((Number)(new Double(300))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",121,e);}if (_boolean_result) { 
      out.write("<td class=\"table_detail\"><textarea name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:FormID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {122}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" rows=\"10\" cols=\"69\" class=\"inputfield_en\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:Value"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {122}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</textarea></td>");
 } else { 
      out.write("<td class=\"table_detail\"><textarea name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:FormID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {124}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" rows=\"5\" cols=\"69\" class=\"inputfield_en\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:Value"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {124}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</textarea></td>");
 } 
 } else { 
      out.write("<td class=\"table_detail\"><input type=\"text\" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:FormID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {127}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" size=\"50\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("Node:Value"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {127}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" class=\"inputfield_en\"/></td>");
 } 
      out.write("</tr>");
 } 
 } 
 } 
      out.write("</table>\n</td>\n</tr>\n<tr>\n<td nowrap=\"nowrap\"><img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/space.gif\" width=\"1\" height=\"6\" alt=\"\" border=\"0\"/></td>\n</tr>\n</table>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
