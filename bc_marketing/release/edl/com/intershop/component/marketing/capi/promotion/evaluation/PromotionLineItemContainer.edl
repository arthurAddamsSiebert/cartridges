import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external PromotionShippingLineItem type "com.intershop.component.marketing.capi.promotion.evaluation.PromotionShippingLineItem";
external PromotionProductLineItem type "com.intershop.component.marketing.capi.promotion.evaluation.PromotionProductLineItem";
external PromotionPaymentLineItem type "com.intershop.component.marketing.capi.promotion.evaluation.PromotionPaymentLineItem";
external IDQuantityMapping type "java.util.Map<java.lang.String,java.lang.Integer>";
external ProductLineItemCollection type "java.util.Collection<com.intershop.component.marketing.capi.promotion.evaluation.PromotionProductLineItem>";
external PaymentLineItemCollection type "java.util.Collection<com.intershop.component.marketing.capi.promotion.evaluation.PromotionPaymentLineItem>";
external ShippingLineItemCollection type "java.util.Collection<com.intershop.component.marketing.capi.promotion.evaluation.PromotionShippingLineItem>";
external PromotionProductLineItemIterator type "java.util.Iterator<com.intershop.component.marketing.capi.promotion.evaluation.PromotionProductLineItem>";
external ComputedMoneyItem type "com.intershop.component.calculation.capi.spreadsheet.ComputedMoneyItem";
external BigDecimal type "java.math.BigDecimal";
external StringCollection type "java.util.Collection<java.lang.String>";
external StringMap type "java.util.Map<java.lang.String, java.lang.String>";

namespace com.intershop.component.marketing.capi.promotion.evaluation
{
	/*
	 * Promotion mapping object for the line items.
	 *
	 * @author Marko Langbein 
	 */
	cartridge interface PromotionLineItemContainer 
	{
		/*
		 * id of the line item container
		 */
		attribute id : String required;
		
		/*
		 * map for condition id and quantity mapping
		 */		 
		attribute conditionIDQuantityMapping : IDQuantityMapping required;
						
		/*
		 * promotion types, which are verified and applied to the LineItemContainer
		 * due to their ability to be combined with the already applied promotion types
		 * (for details see @LINK PromotionCombinationEvaluator, method checkPromotionCombinable())
		 */
		attribute appliedPromotionTypes: StringCollection; 
	
		/*
		 * promotion types, which are proved as not applicable to the LineItemContainer
		 * due to their ability to be combined with the already applied promotion types
		 */
		attribute forbiddenPromotionTypes: StringCollection; 

		/*
		 * computed order sub total 
		 */
		attribute computedOrderSubTotal : ComputedMoneyItem required;
		
		/*
		 * computed total shipping amount 
		 */
		attribute computedShippingSubTotal : ComputedMoneyItem required;

	    /*      
	     * PromotionShippingLineItem is mapping from ShippingLineItem
	     */
	    relation promotionShippingLineItem : PromotionShippingLineItem[0..n];
	    
	    /*
	     * PromotionPaymentLineItem is mapping for payment method 
	     */
	    relation promotionPaymentLineItem : PromotionPaymentLineItem [0..n];
	
		/*
		 * get total quantity of all products, dependent from overrideApplicationExclusion
		 */
		operation getTotalQuantity(overrideApplicationExclusion : boolean): int;
		
		/*
		 * get total amount of all products, dependent from overrideApplicationExclusion
		 */
		operation getTotalAmount(overrideApplicationExclusion : boolean): Money;

		/*
		 * get total shipping cost of all products, dependent from overrideApplicationExclusion
		 */
		operation getTotalShippingCost(overrideApplicationExclusion : boolean): Money;

		/*
		 * get discounted total amount of all products, dependent from overrideApplicationExclusion
		 */
		operation getDiscountedTotalAmount(overrideApplicationExclusion : boolean): Money;

		/*
		 * get rounded discounted total amount of all products, dependent from overrideApplicationExclusion
		 */
		operation getRoundedDiscountedTotalAmount(overrideApplicationExclusion : boolean): Money;
		
		/*
		 * check given payment methods for all promotion payment line items
		 * return true, if all promotion payment line items in the methods
		 */
		operation isInPaymentMethods(paymentMethods : StringCollection) : boolean;

		/*
		 * adds a promotion type ID to the applied promotion types
		 * (see @link ActionDescriptor)
		 * 
		 * @param actionDescriptorID - the action descriptor ID
		 */
		operation applyPromotionType(actionDescriptorID: String): void;
		
		/*
		 * returns true, if the promotion type is applied
		 * 
		 * @param actionDescriptorID - the action descriptor ID
		 * 
		 * @return true, if the promotion type is applied 
		 */
		operation isPromotionTypeApplied(actionDescriptorID: String): boolean;

		/*
		 * adds a promotion type ID to the forbidden promotion types
		 * (see @link ActionDescriptor)
		 * 
		 * @param actionDescriptorID - the action descriptor ID
		 */
		operation forbidPromotionType(actionDescriptorID: String): void;

		/*
		 * returns true, if the promotion type is forbidden
		 * 
		 * @param actionDescriptorID - the action descriptor ID
		 * 
		 * @return true, if the promotion type is forbidden 
		 */
		operation isPromotionTypeForbidden(actionDescriptorID: String): boolean;

		/*
		 * adds an applied promotion type id to the existing applied types
		 * 
		 * @param actionDescriptorID - the action descriptor ID
		 */
		operation addAppliedPromotionType(actionDescriptorID: String): void;

		/*
		 * Get collection of promotion product line items, 
		 * dependent from the overrideApplicationExclusion flag. 
		 */
		operation getProductLineItems(overrideApplicationExclusion : boolean) : ProductLineItemCollection;

		/*
		 * get collection of promotion payment line items
		 */
		operation getPaymentLineItems() : PaymentLineItemCollection;

		/*
		 * get collection of promotion shipping line items
		 */
		operation getShippingLineItems(overrideApplicationExclusion : boolean) : ShippingLineItemCollection;
		
		/*
		 * get discounted total shipping order amount 
		 * (sum of all discounted shipping item costs - shipping bucket discounts - shipping order discounts) 
		 */
		operation getDiscountedShippingOrderSubTotal(overrideApplicationExclusion : boolean): Money;
		
		/*
		 * adds a condition id and quantity to the map
		 */
		operation addConditionIDQuantityMapping(conditionID: String, quantity: Integer) : void;

		/*
		 * get promotion shipping line item by his bucket id 
		 */
		operation getPromotionShippingLineItemByID(bucketID : String) : PromotionShippingLineItem;
		
		/*
		 * Add a promotion product line item to line item container. 
		 * 
		 * This function filters the promotion product line items in two lists. The first 
		 * contains all items which are in ApplicationExclusion and the second the rest.  
		 */
		operation addToPromotionProductLineItem(ppli : PromotionProductLineItem, inApplicationExclusion : boolean) : void;
	
		/*
		 * Create promotion product line item iterator, dependent from overrideApplicationExclusion flag.
		 */				
		operation createPromotionProductLineItemIterator(overrideApplicationExclusion : boolean) : PromotionProductLineItemIterator; 

		/*
		 * Get promotion product line item count, dependent from overrideApplicationExclusion flag.
		 */				
		operation getPromotionProductLineItemCount(overrideApplicationExclusion : boolean) : int;
	
		/*
	     * Determine for a given promotion uuid corresponding code if exists, otherwise null is returned.
	     * 
	     * @param promotionUUID
	     * @return code for explicit promotion or null otherwise
	     */
	    operation getCodeForPromotionUUID(promotionUUID : String) : String ;
	
	    /*
	     * The map contains as keys promotion uuids of (explicit) promotions which are triggered by code 
	     * and as value the code itself.
	     * 
	     * @param mapping map of (promotion uuid, code) pairs
	     */
	    operation setPromotionCodeMapping(mapping : StringMap) : void;
		
	}
}
