import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/user/UserGroup.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/capi/rebate/Promotion.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/capi/code/PromotionCode.edl";
 

external PromotionCodeIterator type "java.util.Iterator<com.intershop.component.marketing.capi.code.PromotionCode>";
external UserGroupIterator type "java.util.Iterator<com.intershop.beehive.core.capi.user.UserGroup>";
external AppIDsIterator type "java.util.Iterator<java.lang.String>";


namespace com.intershop.component.marketing.capi.code
{
	/*
	 * PromotionCodeGroup contains (assign) the promotion codes and other attributes, for labeling 
	 * dependencies to assigned promotions.  
	 *
	 * @author kreissmann
	 * @author mlangbein
	 */
	cartridge interface PromotionCodeGroup 
	{
		/**
		 * A readable promotion code group id, entered by the promotion manager.
		 */
		attribute ID : string required;
	
		/***
		 * A readable promotion code group name, entered by the promotion manager. 
		 */
		attribute name : string localized;
		
		/**
		 * A description of the promotion code group. 
		 */
		attribute description: string localized;
		
		/**
		 * use time from the assigned promotion (times setted to null, 
		 * while update promotion code group with usePromotionTime == true)
		 */      
		attribute usePromotionTime : boolean;
	 
	  	/**
	   	* A start date from promotion code group, if use promotion time is false.
	   	*/     	  
		attribute startDate : Date;
		
	  	/**
	   	* A end date from promotion code group, if use promotion time is false.
	   	*/     	  
		attribute endDate : Date;
		
	 	 /**
	   	* Number of total reuses for each promotion code from promotion code group.
	   	* If it is <b>0</b>, it means unlimited. 	   
	   	*/     	  
		attribute numberOfReuses : int;
		
	  	/**
	   	* Number of total reuses from promotion code for each customer.
	   	* If it is <b>0</b>, it means unlimited. 	   
	   	*/     	  
		attribute numberOfReusesPerCustomer : int;
		
	  	/**
	   	* Flag to indicate, if the promotion code group is enabled, and can be applied.
	   	*/     	  
		attribute enabled : boolean;
		
	  	/**
	   	* Use assigned target groups from promotion (all assigned target groups were 
	   	* unassigned, while update promotion code group with usePromotionTargetGroups 
	   	* == true)
	   	*/     	  
		attribute usePromotionTargetGroups : boolean;
		
	  	/**
	   	* Get absolute quantity of codes from promotion code group. 
	   	*/     	  
		operation getCurrentAbsoluteCodeQuantity() : int;
		
	  	/**
	   	* Get current created code quantity from promotion code group.
	   	*/     	  
		operation getCurrentCreatedCodeQuantity() : int;
		
	 	/**
	   	* Get all promotion codes as iterator from promotion code group.
	   	*/     	  
		operation getPromotionCodes() : PromotionCodeIterator;
		
		/**
		 * get total reuse per target group from special target group
		 */
		operation getNumberOfReusesPerUserGroup(userGroup : UserGroup) : int;

		/**
		 * set total reuse per target group for special target group
		 */
		operation setNumberOfReusesPerUserGroup(userGroup : UserGroup, numberOfReuses : int) : void;
		
		/**
		 * get redemption per target group from special target group
		 */
		operation getNumberOfRedemptionsPerUserGroup(userGroup : UserGroup) : int;
		
		/**
		 * Change actual redemption of promotion code group user group assignment.
		 * <P>
		 * If more than one target group assigned, sort the assignments (a+b) and 
		 * increment first hit<BR>
		 * a) unlimited group assignments (first with lowest $numberOfRedemptions)<BR>
		 * b) limited group assignments (first with highest possible $numberOfRedemptions [$numberOfReusesPerUgrp - $numberOfRedemptions])<BR>
		 */
		operation incrementNumberOfRedemptions(currentUserUserGroups: UserGroupIterator) : void;
		
	  	/**
	   	* Relation (0..1) to special domain. 
	   	*/     	  
		relation domain : Domain[0..1];
		
	  	/**
	   	* Relation (0..n) to all assigned channels.
	   	*/     	  
		relation channels : Domain[0..n];
		
	  	/**
	   	* Relation (0..n) to all assigned target groups.
	   	*/     	  
		relation targetGroups : UserGroup[0..n];
		
	  	/**
	   	* Relation (0..n) to all assigned promotion codes.
	   	*/     	  
		relation promotionCodes : PromotionCode[0..n];
		
	  	/**
	   	* Relation (0..n) to all assigned promotions. 
	   	*/     	  
		relation promotions : Promotion[0..n];
		
		/**
	     * use promotion apps or use own app assignment.
	     */
	    attribute usePromotionApps : boolean;
	    
	    /**
		 * Get all assigned apps from the promotion code group.
		 */
		operation createAppIDsIterator() : AppIDsIterator;
		
		/**
		 * Validate assignment from promotion code group to given appID.
		 */
		operation hasAppID(appID : string) : boolean;
		
		/**
		 * Has the promotion code group at least one promotion code.
		 * 
		 * @return <code>true</code> if the promotion code group has at 
		 * least one promotion code, otherwise returns <code>false</code>
		 */
		operation hasPromotionCodes() : boolean;  
	}
}
