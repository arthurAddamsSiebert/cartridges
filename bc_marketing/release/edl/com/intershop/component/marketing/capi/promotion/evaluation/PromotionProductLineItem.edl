import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external BigDecimal type "java.math.BigDecimal";
external Cloneable type "java.lang.Cloneable";
external StringCollection type "java.util.Collection<java.lang.String>";
external StringSet type "java.util.Set<java.lang.String>";
external IntegerList type "java.util.List<java.lang.Integer>";
external PromotionProductList type "java.util.List<com.intershop.component.marketing.capi.promotion.evaluation.PromotionProduct>";
external ProductLineItem type "com.intershop.beehive.bts.capi.orderprocess.ProductLineItem";
external ComputedPLI type "com.intershop.beehive.bts.capi.orderprocess.calculation.ComputedProductLineItem";
external ComputedMoneyItem type "com.intershop.component.calculation.capi.spreadsheet.ComputedMoneyItem";
external IDQuantityMapping type "java.util.Map<java.lang.String,java.lang.Integer>";
external IDProductMapping type "java.util.Map<java.lang.String,java.util.ArrayList<java.lang.Integer>>";
external CloneNotSupportedException type "java.lang.CloneNotSupportedException";

namespace com.intershop.component.marketing.capi.promotion.evaluation
{
	/*
	 * Promotion mapping object for product line item.
	 *
	 * @author Marko Langbein 
	 */
	cartridge interface PromotionProductLineItem extends Cloneable 
	{
		
		/*
		 * shipping region  	
		 */
		attribute shippingRegions : StringSet required;
		
		/*
		 * shipping method 
		 */
		attribute shippingMethod : String required;
		
		/**
		 * computed shipping cost item 
		 */
		attribute computedShippingCostItem : ComputedMoneyItem required; 
		
		/*
		 * map for condition id and items from product
		 */		 
		attribute conditionIDProductMapping : IDProductMapping required;

		/*
		 * list for possible affected product items, if discount based on discounted price
		 */
		attribute possibleAffectedProductItems : IntegerList required;

		/*
		 * map for action id and quantity mapping
		 */		 
		attribute actionIDQuantityMapping : IDQuantityMapping required;
		
		/*
		 * condition id mapping  	
		 */
		attribute conditionIDs : StringCollection required;
		
		/*
		 * computed product line item
		 */
		attribute computedPLI : ComputedPLI required;
		
		/*
		 * computed product line item single price 
		 */
		attribute computedPLISinglePrice : ComputedMoneyItem required;

		/*
		 * computed product line item total price
		 */
		attribute computedPLITotalPrice : ComputedMoneyItem required;

		/*
		 * if promotion product line item is flagged as discounted product 
		 * it is disregarded for each quantity condition
		 */
		attribute discountedProduct : boolean required;
		
		/**
		 * the corresponding promotion product
		 */
		attribute products : PromotionProductList required; 

		/*
		 * get base price
		 */
		operation getBasePrice() : Money;
		
		/*
		 * Get purchase amount from item. 
         * If conditionID is not null, only add base prices from all 
         * items in condition id product mapping for given conditionID.
		 */
		operation getPurchaseAmount(conditionID : string) : Money;

		/*
		 * Get purchase amount from discounted item. 
         * If conditionID is not null, only add discounted prices from all 
         * items in condition id product mapping for given conditionID.
		 */
		operation getDiscountedPurchaseAmount(conditionID : string) : Money;

		/*
		 * Get discounted shipping cost from item 
		 */
		operation getDiscountedShippingItemCost() : Money;

		/*
		 * is product in given product list		
		 */
		operation isInProductList(list : StringCollection) : boolean;
		
		/*
		 * is product in given category or sub category
		 */
		operation isInCategory(list : StringCollection) : boolean;
		
		/*
		 * check the shipping method of line item for given methods 
		 */
		operation isInShippingMethods(shippingMethods : StringCollection) : boolean;
		
		/*
		 * check the shipping region of line item for given methods 
		 */
		operation isInShippingRegions(shippingRegions : StringCollection) : boolean;
		  
		/*
		 * get product line item quantity depends from filter condition id, 
		 * if id is null, the whole size of products returned  
		 */
		operation getQuantity(filterConditionID : String) : int;
		
		/*
		 * clone object
		 */
		operation clone() : Object throws CloneNotSupportedException;
		
		/*
		 * get product line item  
		 */
		operation getProductLineItem() : ProductLineItem;
		
		/*
		 * add condition id to all items from promotion product line item 
		 */
		operation addConditionID(conditionID: String) : void;
		
		/*
		 * add condition id to one item from promotion product line item 
		 */
		operation addConditionID(conditionID: String, promotionProductItemNumber : int) : void;
		
		/*
		 * remove condition id from conditionIDs list, and for all condition id product mappings
		 */		
		operation remConditionID(conditionID: String) : void;

		/*
		 * remove condition id from conditionIDs list, and for one condition id product mapping
		 */		
		operation remConditionID(conditionID: String, promotionProductItemNumber : int) : void;
		
		/*
		 * contains condition id product mapping the condition id for given promototion product item number
		 */
		operation containsConditionID(conditionID : string, promotionProductItemNumber : int) : boolean;
		
		/*
		 * add one item number to possible affected product item list 
		 */
		operation addPossibleAffectedProductItem(itemNumber : int) : void;

		/*
		 * get shipping item discount amount 
		 */
		operation getShippingItemDiscountAmount() : Money;
		
		/*
		 * add discount amount to shipping item discount amount
		 */
		operation addShippingItemDiscountAmount(shippingItemDiscount : BigDecimal) : void;
		
		/*
		 * add rounded discount amount  
		 */
		operation addRoundedDiscountAmount(roundedDiscountAmount : BigDecimal) : void;

		/*
		 * add rounded discount amount and specify if value is a order discount or not  
		 */
		operation addRoundedDiscountAmount(roundedDiscountAmount : BigDecimal, isOrderDiscount : boolean) : void;

		/*
		 * get rounded discounted purchase amount
		 */
		operation getRoundedDiscountedPurchaseAmount() : Money;

		/*
		 * get rounded discounted purchase amount without order discounts
		 */
		operation getRoundedDiscountedPurchaseAmountWithoutOrderDiscounts() : Money;

		/*
		 * get quantity of items, which discounted to action with action id
		 */
		operation getItemQuantityWithActionID(actionID : String) : Integer;
		
		/*						
		 * check, if promotion product is flagged as excluded in application 
		 * <br>1.) custom attribute "ExcludeFromPromotions" on product or master(*)
		 * <br>2.) product or master(*) in excludedProducts
		 * <br>3.) custom attribute "ExcludeFromPromotions" on products:catalogCategories 
		 * <br>4.) catalog in excludedCategories
		 */
		operation isInApplicationExclusion(excludedProducts : StringCollection, excludedCategories : StringCollection) : boolean;
		
	}
}