import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/capi/promotion/evaluation/PromotionConditionEvaluator.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/capi/promotion/evaluation/PromotionEvaluationResult.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/capi/promotion/evaluation/PromotionEvaluationObjects.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external Condition type "com.intershop.component.foundation.capi.condition.Condition";
external PromotionEvaluationContext type "com.intershop.component.marketing.capi.promotion.evaluation.PromotionEvaluationContext";

namespace com.intershop.component.marketing.capi.promotion.evaluation
{
	/*
	 * @deprecated Since 7.6: This interface will remain but should only be used a marker interface for PromotionConditionEvaluators.
	 * The deprecated evaluate methods are now defined in two separate interfaces:
	 * {@link PromotionBaseConditionEvaluator#evaluate(Condition, PromotionEvaluationObjects, int, PromotionEvaluationContext, boolean)}
	 * {@link PromotionFilterConditionEvaluator#evaluate(Condition, PromotionEvaluationObjects, int, PromotionEvaluationContext, String, boolean, boolean)}  
	 * These new interfaces should be implemented based on the type of Condition (depending if it is a FilterCondition or not) 
	 *
	 */
	cartridge interface PromotionConditionEvaluator
	{ 
		/**
		 * Evaluation method for BaseConditionEvaluators
		 * 
		 * @param condition 
		 * @param promotionEvaluationObjects
		 * @param iterationCount 
		 * @param context
		 * @param effectDiscountLevel 
		 * @return PromotionEvaluationResult
		 *  
	     * @deprecated Since 7.6 Use
	     *             {@link PromotionBaseConditionEvaluator#evaluate(Condition, PromotionEvaluationObjects, int, PromotionEvaluationContext, boolean)}
	     *             instead, Use this interface only as marker interface
		 */
		operation evaluate(condition: Condition, promotionEvaluationObjects: PromotionEvaluationObjects, iterationCount:
		int, context: PromotionEvaluationContext, effectDiscountLevel: boolean): PromotionEvaluationResult; 
		
		
		/**
		 * Evaluation method Filter Condition Evaluators
		 * 
		 * @param condition The condition to evaluate
		 * @param promotionEvaluationObjects Container
		 * @param iterationCount 
		 * @param context The Promotion Evaluation Context
		 * @param filterConditionID An optional filter condition ID if this condition is combined with a filter condition   
		 * @param effectDiscountLevel 
		 * @return PromotionEvaluationResult 
	     * @deprecated Since 7.6 Use
     	 *             {@link PromotionFilterConditionEvaluator#evaluate(Condition, PromotionEvaluationObjects, int, PromotionEvaluationContext, String, boolean, boolean)}
     	 *             instead, Use this interface only as marker interface
		 */ 
		operation evaluate(condition: Condition, promotionEvaluationObjects: PromotionEvaluationObjects, iterationCount:
		int, context: PromotionEvaluationContext, filterConditionID: string, effectDiscountLevel: boolean): PromotionEvaluationResult;
	}

}
