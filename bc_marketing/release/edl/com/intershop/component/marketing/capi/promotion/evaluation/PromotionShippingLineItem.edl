import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external StringSet type "java.util.Set<java.lang.String>";
external ComputedMoneyItem type "com.intershop.component.calculation.capi.spreadsheet.ComputedMoneyItem";
external ComputedShippingBucketItem type "com.intershop.component.shipping.capi.shippingchargecalculator.ComputedShippingBucketItem";
external StringCollection type "java.util.Collection<java.lang.String>";
external BigDecimal type "java.math.BigDecimal";
external PromotionProductLineItem type "com.intershop.component.marketing.capi.promotion.evaluation.PromotionProductLineItem";
external PromotionProductLineItemCollection type "java.util.Collection<com.intershop.component.marketing.capi.promotion.evaluation.PromotionProductLineItem>";
 
namespace com.intershop.component.marketing.capi.promotion.evaluation
{
	/*
	 * Promotion mapping for shipping line items, bucket
	 *
	 * @author Marko Langbein 
	 */
	cartridge interface PromotionShippingLineItem  
	{
		/*
		 * computed shipping bucket
		 */
		attribute computedShippingBucket : ComputedShippingBucketItem required;

		/*
		 * computed shipping bucket costs	
		 */
		attribute computedShippingBucketCost : ComputedMoneyItem required;

		/*
		 * shipping region  	
		 */
		attribute regions : StringSet required;
		
		/*
		 * shipping method 
		 */
		attribute method : String required;
		
		/*
		 * condition id mapping  	
		 */
		attribute conditionIDs : StringCollection required;
		
		/*
		 * add an condition id to the product line item
		 */
		operation addConditionID(conditionID: String) : void;
		
		/*
		 * check the shipping region of line item for given methods, dependent from overrideApplicationExclusion flag
		 */
		operation isInShippingRegions(shippingRegions : StringCollection, overrideApplicationExclusion : boolean) : boolean;
		
		/*
		 * Get discounted cost depending from passed override application exclusion flag.  
		 * Sum of all discounted shipping costs of the bucket items.
		 */
		operation getDiscountedCost(overrideApplicationExclusion : boolean) : Money;
		
		/*
		 * Get cost depending from passed override application exclusion flag.  
		 * Sum of all shipping costs of the bucket items.
		 */
		operation getCost(overrideApplicationExclusion : boolean) : Money;
		
		/*
		 * Add a promotion product line item to the bucket, 
		 * to get discounted shipping cost from promotion product line item for calculation 
		 * from discounted shipping cost of bucket.
		 * 
		 * This function filters the promotion product line items in two lists. The first 
		 * contains all items which are in applicationExclusion and the second the rest.  
		 */
		operation addBucketItem(bucketItem : PromotionProductLineItem, inApplicationExclusion : boolean) : void;
		
		/*
		 * Get all bucket items (promotion product line items).
		 * 
		 * The shipping bucket discount values are distributed to the included PLI shipping 
		 * costs. This means single/total shipping discount items have to be created 
		 * during bucket calculation.
		 * 
		 * If OverrideApplicationExclusion is true, the whole bucketItems returned, otherwise the 
		 * promotionProductLineItems which are inApplicationExclusion are not returned.  
		 */
		operation getBucketItems(overrideApplicationExclusion : boolean) : PromotionProductLineItemCollection;
	}
}
