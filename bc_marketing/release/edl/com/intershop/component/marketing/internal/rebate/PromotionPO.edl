import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/capi/rebate/Promotion.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/internal/campaign/CampaignPO.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/capi/rebate/PromotionBudgetSource.edl";
import "enfinity:/bc_organization/edl/com/intershop/component/organization/capi/budget/Budget.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/internal/promotion/assignment/PromotionOrderAssignmentPO.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/internal/promotion/assignment/PageletPromotionAssignmentPO.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/internal/rebate/RebatePO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/internal/promotion/assignment/PromotionAppAssignmentPO.edl";
external ReplicationObject type "com.intershop.beehive.core.capi.replication.ReplicationObject";


namespace com.intershop.component.marketing.internal.rebate
{
	/**
	 * The class holds information about a promotion.
	 */
    orm class PromotionPO extends ExtensibleObjectPO implements Promotion, ReplicationObject
    {
    	
    	/**
    	 * The promotion's name.
    	 */
        attribute displayName : string localized;

		/**
		 * A readable promotion id, entered by the promotion manager.        
		 */
        attribute ID : string required;

		/**
		 * A description of the promotion.
		 */
        attribute description : string localized;

		/**
		 * The date, when the promotion is begins.
		 */
        attribute startDate : datetime required;

		/**
		 * The date, when the promotion is over.
		 */
        attribute endDate : datetime required;
        
        /**
         * The rank of the promotion. The rank defines the priority.
         */
        attribute rank : int;

		/**
		 * Flag to indicate, if the promotion is enabled, and can be applied.
		 */
        attribute enabled : boolean;

		/**
		 * Flag to indicate, if the promotion requires a promotion code (note: the variable name "coupon code" has historical reasons).
		 */
        attribute couponCodeRequired : boolean;

		/**
		 * Flag to indicate, if the promotion is unlimited.
		 * If a budget had been created before, but the promotion was updated
		 * to be unlimited, then setting this flag makes the budget obsolete.
		 */
        attribute unlimited : boolean;

		/**
		 * Flag to indicate, if the promotion has got a custom specific or a default rank.
		 * If set to true, the rank is set per default, depending on the first action of the 
		 * first rebate rule.
		 */
        attribute hasDefaultRank : boolean;

		/**
		 * The user group whose members can participate at the promotion.
		 */
        attribute targetGroupID : string<256>;
		
		/**
		 * The domain of the user group whose members can participate at the promotion.
		 */
        attribute targetGroupDomainID : uuid;

		/**
		 * The type of the promotion
		 * @Deprecated.
		 */
        attribute typeCode : int;
	
		/**
		 * The id of the logged in person, who created the promotion.
		 */
    	attribute creatorID : uuid;
		
        /*
         * Is used to define for which currency this promotion applies.
         */
        attribute currencyCode : string<3>;

		/*
		 * The id of the budget which has been defined to a promotion. If set to null, no budget is applied.
		 */
		attribute budgetID : uuid;
		
		/**
		 * The id of the budget source.<p/>
		 * A budget source means where the budget comes from.
		 */
		attribute budgetSourceID : uuid;

		/**
		 * Defines a threshold to the budget, when to trigger a notification email.
		 */
		attribute budgetNotificationThreshold : double;
		
		/**
		 * The email address where any notification email should send to.
		 */
		attribute budgetNotificationEmail : string<256>;
		 
		/**
		 * Flag to indicate, if the promotion should be disabled automatically, when the budget has been exceeded.
		 */
        attribute disableByBudget : boolean;
        
        /**
         * Flag to indicate, if a notification email should be triggered, when the budget has been exceeded.
         */
        attribute sendMailIfBudgetReached : boolean;
        
        /**
         * Flag to indicate, if a notification email should be triggered, when the budget threshold has been reached.
         */
        attribute sendMailIfThresholdReached : boolean;
        
        /**
         * Flag to indicate, if the promotion uses a single code definition. 
         * (A single promotion code is not associated to any promotion code group.)
         */
        attribute useSingleCode : boolean;
		
		/**
		 * The single promotion code, which does not belong to any promotion code group.
		 */
		attribute singleCode : string<256>;
		
		/**
		 * Sets the limit how often a single code can be reused. If set to maximum integer internally,
		 * the promotion is unlimited.
		 */
		attribute singleCodeTotal : int; 
		
		/**
		 * Flag to indicate, if a customer can use the single code more than one time.
		 * If set to true, the code can be used unlimited times. Otherwise the code can only be
		 * redeemed one time.
		 */
		attribute codeCustomerUnlimited: boolean;
		
		/**
		 * combinable with the action types listed in the multiple-string attribute 
		 * CombinationTypes.<br/>
		 *  - bit 0 = 1: promotion is combinable; = 0 not combinable<br/>
		 *  - bit 1 = 1: other promotions along with this one affecting a product are allowed; 
		 *  = 0: none of them allowed
		 */
		attribute combination : int required;
		
        /**
         * The type of the promotion content activation.
         * ContentActivationTypes.PROMOTIONDATE:
         *    Use promotion start and end date
         * ContentActivationTypes.DEFINEDDATE:
         *    Activate content at the defined start and end time
         * ContentActivationTypes.CONTENTDATE:
         *    Use the publishing start and end date of content
         */
         attribute contentActivationType : int;
         
         /**
          * The date, when the promotion content will activate.
          * This date is null if the contentActivationType is not set to ContentActivationTypes.DEFINEDDATE.
          */
         attribute contentActivationStartDate : datetime;
         
         /**
          * The date, when the promotion content will deactivate.
          * This date is null if the contentActivationType is not set to ContentActivationTypes.DEFINEDDATE.
          */
         attribute contentActivationEndDate : datetime;
         
         /**
		  * Flag to indicate, if the promotion is available, e.g. if the associated products are in stock.
		  */
         attribute available : boolean;
         
                
		/**
		 * Flag to indicate if promotion is assigned to a campaign to use campaign's time frame.<p/>
		 * Only if this flag is NOT set and promotion is assigned to a campaign, promotion manager will be
		 * able to set a special time frame.
		 */
        attribute useCampaignTimeFrame : boolean;
                 
		/**
		 * Flag to indicate if promotion is assigned to a campaign to use campaign's target groups.
		 * Only if this flag is NOT set and promotion is assigned to a campaign, promotion manager will be 
		 * able to set special time frame.
		 */
		attribute useCampaignTargetGroup : boolean;
		
		/**
		 * Specify that a promotion can trigger on the values prior to any other discounting (or not). 
		 * The switch decides whether the promotion takes into account the base price or the discounted price.
		 */
		attribute effectDiscountLevel : boolean;
		
		/**
		 * The UUID of a campaign, the promotion is assigned to.
		 */
		attribute campaignID : uuid;
		
		/**
		 * an alternate key is needed for using the ORM cache when retrieving a PO.
		 */
		alternate key (ID, domainID);
		
		/*
		 * Relation to promotion where the rebate is assigned to 
		 */	
        relation campaignPO : CampaignPO[0..1] inverse promotionPOs implements campaign
        {
            foreign key(campaignID) -> (UUID);
        }
		
		/**
		 * The associated rebates to the promotion.
		 */
        relation rebatePOs : RebatePO[0..n] inverse promotionPO implements rebates;

        /**
         * assignment from order to single code promotions
         */
        relation promotionOrderAssignmentPOs : PromotionOrderAssignmentPO[0..n] inverse promotionPO;
         
        /**
         * The pagelet assignments for the promotion.
         */
        relation promotionPageletAssignmentPOs : PageletPromotionAssignmentPO [0..n] inverse promotionPO;
         
		/**
         * assignment from apps to an promotion  
         */
        relation promotionAppAssignmentPOs : PromotionAppAssignmentPO[0..n] inverse promotionPO;
         
		/**
		 * Associated to budget
		 */
		 dependency budget : Budget handler "com.intershop.component.organization.capi.budget.BudgetMgr"
		 {
		 	foreign key (budgetID);
		 }
		
		/**
		 * where the budget comes from
		 */
		 dependency budgetSource : PromotionBudgetSource handler "com.intershop.component.marketing.capi.rebate.RebateMgr"
		 {
		 	foreign key (budgetSourceID);
		 }
    }
}
