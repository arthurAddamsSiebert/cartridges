import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/capi/rebate/Rebate.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/internal/rebate/RebateFilterGroupAssignmentPO.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/internal/promotion/action/RebateActionPO.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/internal/promotion/condition/RebateConditionPO.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/internal/rebate/RebateRuleAssignmentPO.edl";
import "enfinity:/bc_marketing/edl/com/intershop/component/marketing/internal/rebate/PromotionPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";

import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.component.marketing.internal.rebate
{
	/*
	 * The class holds information about promotion rebates.
	 */
    orm class RebatePO extends ExtensibleObjectPO implements Rebate
    {
        index(promotionUUID);

		/*
		 * ID of promotion where rebate is assigned to 
		 */
        attribute promotionUUID : uuid;

		/*
		 * Currency code 
		 */	
        attribute currencyCode : string<3>;

		/*
		 * the type code 
		 */	
        attribute typeCode : int;
        
        /*
         * the position 
         */
        attribute position : int;

        /*
         * Divides between promotion codes and standard rebates.
         */
        attribute classificationTypeCode : int;
		
		/*
		 * OverrideApplicationExclusion set for conditions. 
		 */
		attribute conditionOverrideApplicationExclusion : boolean column "condOverrideApplExclFlag";
		
		/*
		 * OverrideApplicationExclusion set for actions. 
		 */
		attribute actionOverrideApplicationExclusion : boolean column "actOverrideApplExclFlag";
		
		/*
		 * Relation to promotion where the rebate is assigned to 
		 */	
        relation promotionPO : PromotionPO[0..1] inverse rebatePOs implements promotion
        {
            foreign key(promotionUUID) -> (UUID);
        }

		/*
		 * Relation to assigned rebate rules
		 */	
        relation ruleAssignmentPO : RebateRuleAssignmentPO[0..n] inverse rebatePO;
        
        /*
         * Relation to assigned conditon (can be a root of a condition tree)
         */
		relation rebateConditionPO : RebateConditionPO[0..1] inverse rebatePO implements condition; 
        
        /*
         * Relation to assigned actions
         */
        relation actionPOs : RebateActionPO[0..n] inverse rebatePO implements actions;
        
        /*
         * Relation to assigned rebate filter groups
         */
        relation rebateFilterGroupAssignmentPOs : RebateFilterGroupAssignmentPO[0..n] inverse rebatePO implements rebateFilterGroupAssignments;
    }
}
