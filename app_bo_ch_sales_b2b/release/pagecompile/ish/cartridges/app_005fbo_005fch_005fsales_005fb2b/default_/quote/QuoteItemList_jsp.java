/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-14 11:34:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.app_005fbo_005fch_005fsales_005fb2b.default_.quote;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class QuoteItemList_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"inc/Modules", null, "3");} 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((context.getFormattedValue(getObject("EditMode"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",4,e);}if (_boolean_result) { 
 {Object temp_obj = ("false"); getPipelineDictionary().put("ChangeQuantity", temp_obj);} 
 {Object temp_obj = ("true"); getPipelineDictionary().put("ChangePrice", temp_obj);} 
 } else { 
 {Object temp_obj = ("false"); getPipelineDictionary().put("ChangeQuantity", temp_obj);} 
 {Object temp_obj = ("false"); getPipelineDictionary().put("ChangePrice", temp_obj);} 
 } 
 {Object temp_obj = ("true"); getPipelineDictionary().put("ShowOriginValues", temp_obj);} 
 {Object temp_obj = (new Double(6)); getPipelineDictionary().put("ColSpan", temp_obj);} 
      out.write("<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tr>\n<td class=\"table_header w e s\" nowrap=\"nowrap\">");
 {out.write(localizeISText("quote.QuoteItemList.table_header.quantity",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header e s left\" width=\"40%\" nowrap=\"nowrap\">");
 {out.write(localizeISText("quote.QuoteItemList.table_header.name",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header e s left\" nowrap=\"nowrap\">");
 {out.write(localizeISText("quote.QuoteItemList.table_header.product.id",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header e s left\" nowrap=\"nowrap\">");
 {out.write(localizeISText("quote.QuoteItemList.table_header.cost.price",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header e s center\" nowrap=\"nowrap\">");
 {out.write(localizeISText("quote.QuoteItemList.table_header.list.price",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header e s center\" nowrap=\"nowrap\">");
 {out.write(localizeISText("quote.QuoteItemList.table_header.proposed.price",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header e s center\" nowrap=\"nowrap\">");
 {out.write(localizeISText("quote.QuoteItemList.table_header.margin",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header e s right\" nowrap=\"nowrap\">");
 {out.write(localizeISText("quote.QuoteItemList.table_header.item.total",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n</tr>");
 while (loop("Quote:IndependentItems","PLI",null)) { 
      out.write("<tr class=\"item\" id=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:UUID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {27}",e);}if (value==null) value="";value = encodeString(value,"javascript");out.write(value);} 
      out.write("\">\n<td class=\"table_detail w e s pns\" nowrap=\"nowrap\" valign=\"top\">\n<input type=\"hidden\" name=\"EditMode\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("EditMode"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {30}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"/>\n<input type=\"hidden\" name=\"Items\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:UUID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {31}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('/');
      out.write('>');
 _boolean_result=false;try {_boolean_result=((Boolean)(((!((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("PLI:Product")))).booleanValue() && ((Boolean) getObject("PLI:Product:Online")).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("EditMode"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",32,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("QuantityErrorMap")))).booleanValue() && ((Boolean) (disableErrorMessages().isDefined(getObject("QuantityErrorMap:get(PLI:UUID)")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",33,e);}if (_boolean_result) { 
      out.write("<img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/error.gif\" width=\"16\" height=\"15\" alt=\"\" border=\"0\"/>\n<input type=\"number\" min=\"0\" name=\"");
      out.print(context.getFormattedValue(getObject("PLI:UUID"),null));
      out.write("_Quantity\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("QuantityErrorMap:get(PLI:UUID)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {35}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" size=\"10\" class=\"inputfield_en\"/>");
 } else { 
      out.write("<input type=\"number\" min=\"0\" name=\"");
      out.print(context.getFormattedValue(getObject("PLI:UUID"),null));
      out.write("_Quantity\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:Quantity"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {37}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" size=\"10\" class=\"inputfield_en\"/> \n");
 } 
 {out.write(localizeISText("quote.QuoteItemList.item.product_offline_hint",null,null,null,null,null,null,null,null,null,null,null,null));} 
 } else {_boolean_result=false;try {_boolean_result=((Boolean)(((((context.getFormattedValue(getObject("ChangeQuantity"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",40,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("QuantityErrorMap")))).booleanValue() && ((Boolean) (disableErrorMessages().isDefined(getObject("QuantityErrorMap:get(PLI:UUID)")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",41,e);}if (_boolean_result) { 
      out.write("<img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/error.gif\" width=\"16\" height=\"15\" alt=\"\" border=\"0\"/>\n<input type=\"number\" min=\"1\" name=\"");
      out.print(context.getFormattedValue(getObject("PLI:UUID"),null));
      out.write("_Quantity\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("QuantityErrorMap:get(PLI:UUID)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {43}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" size=\"10\" class=\"inputfield_en\"/>");
 } else { 
      out.write("<input type=\"number\" min=\"1\" name=\"");
      out.print(context.getFormattedValue(getObject("PLI:UUID"),null));
      out.write("_Quantity\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:Quantity"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {45}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" size=\"10\" class=\"inputfield_en\"/> \n");
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) getObject("Quote:Modified")).booleanValue() || ((Boolean) ((((context.getFormattedValue(getObject("EditMode"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",47,e);}if (_boolean_result) { 
      out.write('\n');
      out.write('(');
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:OriginQuantity"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {48}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(')');
      out.write('\n');
 } 
 } else { 
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:Quantity"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {51}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 }} 
      out.write("</td> \n<td class=\"table_detail e s\" >\n<b>");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {57}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</b>");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("PLI:DependentListItemsCount")).doubleValue() >((Number)(new Double(0))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",58,e);}if (_boolean_result) { 
      out.write("<br /><br />\n<table cellspacing=\"8\">");
 while (loop("PLI:DependentListItems","DPLI",null)) { 
      out.write("<tr>\n<td>");
 {String value = null;try{value=context.getFormattedValue(getObject("DPLI:Quantity:Value"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {63}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td> \n<td>\n<b>");
 {String value = null;try{value=context.getFormattedValue(getObject("DPLI:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {65}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</b><br />");
 {String value = null;try{value=context.getFormattedValue(getObject("DPLI:Product:SKU"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {66}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>");
 } 
      out.write("</table>");
 } 
      out.write("\n&nbsp;\n</td>\n<td class=\"table_detail e s\" nowrap=\"nowrap\" valign=\"top\">");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:ProductRef:ProductSKU"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {75}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n<td class=\"table_detail e s right item-cost\" valign=\"top\" data-price=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:Product:CostPrice(PLI:SinglePricePC:CurrencyMnemonic):Amount:Value"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {78}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" nowrap=\"nowrap\">");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("PLI:Product")))).booleanValue() && ((Boolean) (disableErrorMessages().isDefined(getObject("PLI:Product:CostPrice(PLI:SinglePricePC:CurrencyMnemonic)")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",79,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:Product:CostPrice(PLI:SinglePricePC:CurrencyMnemonic):Amount"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {80}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;\n");
 } else { 
      out.write("\n&nbsp;\n");
 } 
      out.write(" \n</td>\n<td class=\"table_detail s e right\" valign=\"top\" nowrap=\"nowrap\">");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:OriginSinglePricePC"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {86}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n<td class=\"table_detail s e right item-price\" valign=\"top\" nowrap=\"nowrap\" data-price=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:SinglePricePC:Value"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {90}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"");
      out.print(context.getFormattedValue(getObject("PLI:UUID"),null));
      out.write("_CurrencyMnemonic\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:SinglePricePC:CurrencyMnemonic"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {91}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" size=\"10\" class=\"inputfield_en\"/>");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("ChangePrice"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",92,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("PriceErrorMap")))).booleanValue() && ((Boolean) (disableErrorMessages().isDefined(getObject("PriceErrorMap:get(PLI:UUID)")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",93,e);}if (_boolean_result) { 
      out.write("<img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/error.gif\" width=\"16\" height=\"15\" alt=\"\" border=\"0\"/>\n<input class=\"item-price-input\" type=\"text\" name=\"");
      out.print(context.getFormattedValue(getObject("PLI:UUID"),null));
      out.write("_SinglePricePC\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PriceErrorMap:get(PLI:UUID)"),"#0.00#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {95}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" size=\"10\" class=\"inputfield_en\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("ChangePrice"),null).equals(context.getFormattedValue("false",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",95,e);}if (_boolean_result) { 
      out.write("disabled=\"disabled\"");
 } 
      out.write('/');
      out.write('>');
 } else { 
      out.write("<input class=\"item-price-input\" type=\"text\" name=\"");
      out.print(context.getFormattedValue(getObject("PLI:UUID"),null));
      out.write("_SinglePricePC\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:SinglePricePC:Value"),"#0.00#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {97}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" size=\"10\" class=\"inputfield_en\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("ChangePrice"),null).equals(context.getFormattedValue("false",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",97,e);}if (_boolean_result) { 
      out.write("disabled=\"disabled\"");
 } 
      out.write('/');
      out.write('>');
 } 
      out.write(' ');
      out.write('\n');
 } else { 
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:SinglePricePC"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {100}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } 
      out.write("</td> \n<td class=\"table_detail s e right item-margin\"></td>\n<td class=\"table_detail e s right\" nowrap=\"nowrap\">");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:NetPricePC"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {104}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n</tr>");
 } 
      out.write("<tr>\n<td class=\"w e s\">&nbsp;</td>\n<td colspan=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ColSpan"),"#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {109}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" class=\"table_detail e s right\">");
 {out.write(localizeISText("quote.QuoteItemList.table_detail.list.price.total",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_detail e s right\" nowrap=\"nowrap\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Quote:OriginTotal"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {110}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>\n<tr>\n<td class=\"w e s\">&nbsp;</td>\n<td colspan=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ColSpan"),"#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {114}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" class=\"table_detail e s right pns\">");
 {out.write(localizeISText("quote.QuoteItemList.table_detail.proposed.total.b",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_detail e s right total-price\" data-price=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("Quote:Total:Value"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {115}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" nowrap=\"nowrap\"><strong>");
 {String value = null;try{value=context.getFormattedValue(getObject("Quote:Total"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {115}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</strong></td>\n</tr> \n<tr>\n<td class=\"w e s\">&nbsp;</td>\n<td colspan=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ColSpan"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {119}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" class=\"table_detail e s right pns\">");
 {out.write(localizeISText("quote.QuoteItemList.table_detail.margin",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_detail e s right total-margin\" nowrap=\"nowrap\"></td>\n</tr> \n</table>\n<script>\n$(document).ready(function() {\nfunction calcMargin(costPrice, price) {\nreturn 0;//Math.round((price/costPrice*100)-100)+ \" %\";\n}\nfunction calcPrice(useInputField) {\nvar totalPrice = 0;\nvar totalCostPrice = 0;\n$(\".item\").each(function(index,item) {\nvar costPriceStr = $(item).find(\".item-cost\").data('price');\nvar priceStr = $(item).find(\".item-price\").data('price');\nif (useInputField) {\npriceStr = $(item).find(\".item-price-input\").val();\n}\nvar costPrice = parseFloat(costPriceStr);\nvar price = parseFloat(priceStr);\ntotalPrice = totalPrice+price;\ntotalCostPrice = totalCostPrice+costPrice;\nvar margin = Math.round((price/costPrice*100)-100)+ \" %\"\nif (!isNaN(costPrice)) {\n$(item).find('.item-margin').text(margin);\n} else {\n$(item).find('.item-margin').text(\"-\");\n}\n});\nif (!isNaN(totalCostPrice)) {\nvar margin = Math.round((totalPrice/totalCostPrice*100)-100)+ \" %\";\n$(\".total-margin\").text(margin);\n} else {\n$(\".total-margin\").text(\"-\");\n");
      out.write("}\n}\n$(\".item-price-input\").keyup(function(e) {\ncalcPrice(true); \n});\ncalcPrice(false);\n});\n</script>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
