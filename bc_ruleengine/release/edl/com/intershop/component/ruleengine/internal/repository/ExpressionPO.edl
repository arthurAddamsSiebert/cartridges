import "enfinity:/bc_ruleengine/edl/com/intershop/component/ruleengine/capi/repository/ComplexRuleExpression.edl";
import "enfinity:/bc_ruleengine/edl/com/intershop/component/ruleengine/internal/repository/RuleExpressionBoundObjectAssignmentPO.edl";
import "enfinity:/bc_ruleengine/edl/com/intershop/component/ruleengine/internal/repository/RulePackageRuleFunctionAssignmentPO.edl";
import "enfinity:/bc_ruleengine/edl/com/intershop/component/ruleengine/internal/repository/RuleFunctionPO.edl";
import "enfinity:/bc_ruleengine/edl/com/intershop/component/ruleengine/internal/repository/BoundObjectPO.edl";
import "enfinity:/bc_ruleengine/edl/com/intershop/component/ruleengine/internal/repository/BindingPO.edl";
import "enfinity:/bc_ruleengine/edl/com/intershop/component/ruleengine/internal/repository/RuleLHSPO.edl";
import "enfinity:/bc_ruleengine/edl/com/intershop/component/ruleengine/capi/repository/EvalExpression.edl";
import "enfinity:/bc_ruleengine/edl/com/intershop/component/ruleengine/capi/repository/RuleExpression.edl";
import "enfinity:/bc_ruleengine/edl/com/intershop/component/ruleengine/capi/repository/SimpleRuleExpression.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.component.ruleengine.internal.repository
{
	/*
	 */
	orm class ExpressionPO 
		extends ExtensibleObjectPO 
		implements RuleExpression, ComplexRuleExpression, SimpleRuleExpression, EvalExpression 
		table "RULE2_EXPRESSION"
	{
		// from Expression
		attribute id : string required;
		alternate key (domainID, id);
		
		// from SimpleRuleExpression
		// from EvalExpression
		// will be set with set/get value
		// both value and type are used for ExpressionValue interface
		attribute _expressionValue : string column "EXPRESSIONVALUE";
		attribute _expressionValueType : string column "EXPRESSIONVALUETYPE";
		
		// from SimpleRuleExpression
		// from EvalExpression
		attribute operator : string;
		
		// from SimpleRuleExpression
		attribute ^attribute : string;
		
		// from ComplexRuleExpression
		attribute conditionType : string;
		
		// from RuleExpression
		attribute ruleLhsId : uuid;
		relation ruleLhsPO : RuleLHSPO[0..1] inverse expressionPOs
		{
			foreign key (ruleLhsId) -> (UUID);
		}
		
		// from SimpleRuleExpression
		attribute bindingId : uuid;
		relation bindingPO : BindingPO [0..1] inverse expressionPO implements binding 
		{
			foreign key (bindingId) -> (UUID);
		}
		
		// for ComplexRuleExpression
		relation boundObjectPO : RuleExpressionBoundObjectAssignmentPO[0..n] inverse ruleExpressionPO;
		
		// for ComplexRuleExpression		
		attribute expressionId : uuid;
		relation expressionPOs : ExpressionPO [0..n] inverse expressionPO implements expressions;
		relation expressionPO : ExpressionPO [0..1] inverse expressionPOs
		{
			foreign key (expressionId) -> (UUID);
		}
		
		// for EvalExpression
		attribute ruleFunctionId : uuid;
		relation ruleFunctionPO : RuleFunctionPO[0..1] inverse expressionPO implements function
		{
			foreign key (ruleFunctionId) -> (UUID);
		}
		
		// for identifiying which type of expression we have
		// should be one of ExpressionConstants.EXPRESSION_TYPE_...
		attribute expressionType : string required;
	}
}
