import "enfinity:/bc_ruleengine/edl/com/intershop/component/ruleengine/capi/repository/RulePackage.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/PersistentObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.component.ruleengine.capi.repository
{
    /*
     * The RuleFunction is a representation of functions, that will be written in the
     * used rule engine's own language. This functions should be kept simple, as it
     * just should be a helper function.
     *
     *
     */
    cartridge interface RuleFunction extends PersistentObject
    {
        /*
         * This is the body of the function.
         */
        attribute body: string;

        /*
         * This is the name of the function.
         */
        attribute name: string required;

        /*
         * This is the return type of the function.
         * If nothing set, it will be "void".
         */
        attribute returnType: string;

        /*
         * The package this function belongs to.
         */
        relation rulePackages: RulePackage[0..n] readonly;

        /*
         * Set the parameter for the called function at the specified position with type and name.
         */
        operation setParameter (position : int, ^type : string, name : string) : void;
        
        /*
         * Get the parameter type at the specified position.
         */
        operation getParameterType (position : int) : string;
        
        /*
         * Get the parameter name at the specified position.
         */
        operation getParameterName (position : int) : string;
        
        /*
         * Checks whether the value of the attribute 'parameterType' at the given position is null.
         */
        operation getParameterTypeNull (position : int) : boolean;
        
        /*
         * Checks whether the value of the attribute 'parameterName' at the given position is null.
         */
        operation getParameterNameNull (position : int) : boolean;
        
        /*
         * Add an additional type needed in the body of the rule function.
         */
        operation addType( ^type : string) : void;
        
        /*
         * Get a list of all additional types needed in the body of the rule function.
         * 
         * @return a (possibly empty) collection of java.lang.String with all types
         */
        operation getTypes() : Collection;
    }

}
