/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-16 22:40:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.app_005fsf_005fresponsive.default_.checkout.common.widgets;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class AddressesBox_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
response.setHeader(TemplateConstants.PERSONALIZED_HEADER, "1");setEncodingType("text/html"); 
 {Object temp_obj = (getObject("CurrentCartBO:Extension(\"ShippingBucket\"):MultipleShipToAddresses")); getPipelineDictionary().put("MultipleShipToAddresses", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("MultipleShipToAddresses"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",4,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("CurrentCartBO:MultipleShipmentsSupported"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",5,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("CurrentCartBO:Extension(\"ShippingBucket\")")); getPipelineDictionary().put("OrderShippingBucket", temp_obj);} 
 {Object temp_obj = (getObject("OrderShippingBucket:SoleShipToAddressBO")); getPipelineDictionary().put("CommonShipToAddress", temp_obj);} 
 } else { 
 {Object temp_obj = (getObject("CurrentCartBO:CommonShipToAddressBO")); getPipelineDictionary().put("CommonShipToAddress", temp_obj);} 
 } 
 } 
      out.write(" \n<div class=\"address-summary\">\n<div class=\"clearfix\">\n<a class=\"pull-right btn-tool\" href = \"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewCheckoutAddressBook-EditAddress",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("AddressID",null),context.getFormattedValue(getObject("CurrentCartBO:InvoiceToAddressBO:URN"),null)))),null));
      out.write("\" title=\"");
 {out.write(localizeISText("checkout.address.update.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"><span class=\"glyphicon glyphicon-pencil\"></span></a> \n<h5 class=\"pull-left\">");
 {out.write(localizeISText("checkout.address.billing.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</h5>\n</div>\n<div data-testing-id=\"address-summary-invoice-to-address\">");
 processOpenTag(response, pageContext, "address", new TagParameter[] {
new TagParameter("showemail",(((Boolean) (getObject("CurrentSession:LoggedIn"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) ),
new TagParameter("address",getObject("CurrentCartBO:InvoiceToAddressBO"))}, 21); 
      out.write("</div>");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (disableErrorMessages().isDefined(getObject("MultipleAddressesForm")))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",25,e);}if (_boolean_result) { 
      out.write("<div class=\"clearfix\">");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("MultipleShipToAddresses"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",27,e);}if (_boolean_result) { 
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"inc/CSRFGuardJSToken", null, "28");} 
      out.write("<a class=\"pull-right btn-tool\" data-csrf-guarded href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewCheckoutMultipleAddresses-SelectMultipleShipToAddresses",null)))),null));
      out.write("\" title=\"");
 {out.write(localizeISText("checkout.address.update.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"><span class=\"glyphicon glyphicon-pencil\"></span></a>");
 } else { 
 _boolean_result=false;try {_boolean_result=((Boolean)((((((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("CommonShipToAddress:Country")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("CommonShipToAddress:Country"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() || ((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("CommonShipToAddress:CountryCode")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("CommonShipToAddress:CountryCode"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() || ((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("CommonShipToAddress:City")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("CommonShipToAddress:City"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() || ((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("CommonShipToAddress:MainDivision")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("CommonShipToAddress:MainDivision"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() || ((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("CommonShipToAddress:AddressLine1")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("CommonShipToAddress:AddressLine1"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",31,e);}if (_boolean_result) { 
      out.write("<a class=\"pull-right btn-tool\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewCheckoutAddressBook-EditAddress",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("AddressID",null),context.getFormattedValue(getObject("CommonShipToAddress:URN"),null)))),null));
      out.write("\" title=\"");
 {out.write(localizeISText("checkout.address.update.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"><span class=\"glyphicon glyphicon-pencil\"></span></a>");
 } 
 } 
      out.write("<h5>");
 {out.write(localizeISText("checkout.address.shipping.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</h5>\n</div> \n<div data-testing-id=\"address-summary-ship-to-address\">");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("MultipleShipToAddresses"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",42,e);}if (_boolean_result) { 
      out.write("<address>");
 {out.write(localizeISText("checkout.multiple_addresses_selected.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</address>");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)(getObject("CurrentCartBO:InvoiceToAddressBO:hasSameAddressData(CommonShipToAddress)"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",44,e);}if (_boolean_result) { 
      out.write("<address>");
 {out.write(localizeISText("checkout.same_as_billing_address.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</address>");
 } else { 
 processOpenTag(response, pageContext, "address", new TagParameter[] {
new TagParameter("showemail",(((context.getFormattedValue(getObject("CurrentCartBO:TotalProductQuantity"),null).equals(context.getFormattedValue(getObject("CurrentCartBO:ShippedByEmailProductsQuantity"),null)))) ? Boolean.TRUE : Boolean.FALSE)),
new TagParameter("address",getObject("CommonShipToAddress"))}, 47); 
 }} 
      out.write("</div>");
 } 
      out.write(" \n</div>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
