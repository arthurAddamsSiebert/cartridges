/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-16 22:40:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.app_005fsf_005fresponsive.default_.checkout.shipping;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class LineItems_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
response.setHeader(TemplateConstants.PERSONALIZED_HEADER, "1");setEncodingType("text/html"); 
 {Object temp_obj = ("false"); getPipelineDictionary().put("hasGiftOption", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("GiftWrap_Switch")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("GiftWrap_Switch"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() || ((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("GiftMessage_Switch")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("GiftMessage_Switch"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",4,e);}if (_boolean_result) { 
 {Object temp_obj = ("true"); getPipelineDictionary().put("hasGiftOption", temp_obj);} 
 } 
      out.write("<div class=\"section\">");
 processOpenTag(response, pageContext, "bucketheader", new TagParameter[] {
new TagParameter("bucket",getObject("Bucket")),
new TagParameter("displaydeliverytime","false"),
new TagParameter("bucketnumber",getObject("CartShippingMethod:BasketShippingMethodSelectionBucketBOs:Size"))}, 10); 
      out.write("<div class=\"list-header\">\n<div class=\"list-header-item ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("hasGiftOption"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",14,e);}if (_boolean_result) { 
      out.write("col-sm-6");
 } else { 
      out.write("col-sm-8");
 } 
      out.write('"');
      out.write('>');
 {out.write(localizeISText("checkout.shipping.pli.description.heading","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</div>\n<div class=\"list-header-item col-sm-1\">");
 {out.write(localizeISText("checkout.shipping.pli.qty.heading","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</div>");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("hasGiftOption"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",16,e);}if (_boolean_result) { 
      out.write("<div class=\"list-header-item col-sm-2\">");
 {out.write(localizeISText("checkout.gifting.shipping.heading","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</div>");
 } 
      out.write("<div class=\"list-header-item col-sm-3\">");
 {out.write(localizeISText("checkout.shipping.pli.availability.heading","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</div>\n</div>");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("CartShippingMethod:BasketShippingMethodSelectionBucketBOs:Size")).doubleValue() <=((Number)(new Double(1))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",21,e);}if (_boolean_result) { 
      out.write("<h3 class=\"visible-xs\">");
 {out.write(localizeISText("checkout.shipping.pli.items.heading","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</h3>");
 } 
      out.write("<div class=\"list-body\">");
 {Object temp_obj = (getObject("CurrentCartBO:Extension(\"Inventory\")")); getPipelineDictionary().put("BasketBOInventoryExtension", temp_obj);} 
 {Object temp_obj = (getObject("BasketBOInventoryExtension:InventoryStatusForProductsInWarehouse")); getPipelineDictionary().put("InventoryMappings", temp_obj);} 
 while (loop("Bucket:ProductLineItemBOs","PLI",null)) { 
 {Object temp_obj = (getObject("PLI:Extension(\"Gifting\")")); getPipelineDictionary().put("PLIGifting", temp_obj);} 
 {Object temp_obj = (getObject("PLI:Extension(\"Warranty\")")); getPipelineDictionary().put("PLIWarranty", temp_obj);} 
      out.write("<div class=\"list-item-row list-item-row-big\">\n<div class=\"");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("hasGiftOption"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",36,e);}if (_boolean_result) { 
      out.write("col-sm-6");
 } else { 
      out.write("col-sm-8");
 } 
      out.write(" list-item\">");
 {Object temp_obj = (getObject("InventoryMappings:get(PLI:ProductRef):InStock")); getPipelineDictionary().put("InventoryStock", temp_obj);} 
 processOpenTag(response, pageContext, "plidescription", new TagParameter[] {
new TagParameter("BasketBOInventoryExtension",getObject("BasketBOInventoryExtension")),
new TagParameter("InventoryMappings",getObject("InventoryStock")),
new TagParameter("variationattributes","horizontal"),
new TagParameter("showimage","false"),
new TagParameter("showwarranty","false"),
new TagParameter("pli",getObject("PLI")),
new TagParameter("owningdomain",getObject("CurrentOrganization:OwningDomain"))}, 39); 
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"checkout/common/PromotionCodeList", null, "40");} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("PLIWarranty:Warranty:Warranty"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",43,e);}if (_boolean_result) { 
      out.write("<div>");
 {String value = null;try{value=context.getFormattedValue(getObject("PLIWarranty:Warranty:Warranty:DisplayName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {45}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("<a href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewWarrantyDetails-Start",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SKU",null),context.getFormattedValue(getObject("PLIWarranty:Warranty:ProductSKU"),null)))),null));
      out.write("\" data-dialog class=\"details-link\">");
 {out.write(localizeISText("shopping_cart.detail.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a>\n</div>");
 } 
      out.write("</div>\n<div class=\"col-sm-1 list-item\">\n<input type=\"hidden\" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("Bucket:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {52}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('_');
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {52}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {52}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" />\n<label class=\"hidden-sm hidden-md hidden-lg control-label\">");
 {out.write(localizeISText("checkout.shipping.pli.qty.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</label>");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:Quantity"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {54}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</div> \n");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("hasGiftOption"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",58,e);}if (_boolean_result) { 
      out.write("<div class=\"col-sm-2 list-item checkbox\">");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((((context.getFormattedValue(getObject("PLIGifting:GiftWrappable"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() || ((Boolean) ((((context.getFormattedValue(getObject("PLIGifting:GiftMessagable"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",60,e);}if (_boolean_result) { 
 processOpenTag(response, pageContext, "getindirectvalue", new TagParameter[] {
new TagParameter("entry","GiftOptionsFromTemplate"),
new TagParameter("print","false"),
new TagParameter("key",context.getFormattedValue("giftOptionsFromTemplate_",null) + context.getFormattedValue(getObject("PLI:ID"),null))}, 61); 
 processOpenTag(response, pageContext, "getindirectvalue", new TagParameter[] {
new TagParameter("entry","GiftOption"),
new TagParameter("print","false"),
new TagParameter("key",context.getFormattedValue("giftOption_",null) + context.getFormattedValue(getObject("PLI:ID"),null))}, 62); 
      out.write("<label for=\"gift_checkbox_");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {64}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input name=\"giftOption_");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {65}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)(((disableErrorMessages().isDefined(getObject("GiftOptionsFromTemplate")))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",66,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("GiftOption"),null).equals(context.getFormattedValue("on",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",67,e);}if (_boolean_result) { 
      out.write(" checked=\"checked\"");
 } 
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((((((Boolean) (disableErrorMessages().isDefined(getObject("PLIGifting:GiftOptionMarked")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("PLIGifting:GiftOptionMarked"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",68,e);}if (_boolean_result) { 
      out.write(" checked=\"checked\"\n");
 }} 
      out.write("\nid=\"gift_checkbox_");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {70}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" type=\"checkbox\" \n/>");
 {out.write(localizeISText("checkout.gifting.shipping.gift_checkbox.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</label>");
 } else { 
      out.write("<span class=\"hidden-xs\">");
 {out.write(localizeISText("checkout.gifting.shipping.gift_notavailable.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</span>\n<span class=\"hidden-sm hidden-md hidden-lg\">");
 {out.write(localizeISText("checkout.gifting.shipping.gift_notavailable.xs.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</span>");
 } 
      out.write("</div>\n<input type=\"hidden\" name=\"");
      out.print(context.getFormattedValue(context.getFormattedValue("giftOptionsFromTemplate_",null) + context.getFormattedValue(getObject("PLI:ID"),null),null));
      out.write("\" value=\"true\" />");
 } 
      out.write("<div class=\"col-sm-3 list-item\">\n<p>");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("PLI:Available"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",85,e);}if (_boolean_result) { 
 {out.write(localizeISText("checkout.shipping.pli.instock.text","",null,null,null,null,null,null,null,null,null,null,null));} 
 } else { 
 {out.write(localizeISText("checkout.shipping.pli.out_of_stock.text","",null,null,null,null,null,null,null,null,null,null,null));} 
 } 
      out.write("</p>");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("ApplicationBO:Configuration:String(\"DesiredDeliveryDate_Switch\")"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",92,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) getObject("RecurringBasket:Recurring")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",93,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) getObject("PLI:FreeGift")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",94,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) getObject("Bucket:SelectedShippingMethod:DigitalDelivery")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",95,e);}if (_boolean_result) { 
      out.write("<div class=\"form-group ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("ERROR_DesiredDeliveryDate")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("ERROR_DesiredDeliveryDateUUID"),null).equals(context.getFormattedValue(getObject("PLI:ID"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",96,e);}if (_boolean_result) { 
      out.write("has-error");
 } 
      out.write("\">\n<label class=\"control-label\" for=\"desiredDeliveryDate_");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {99}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 {out.write(localizeISText("checkout.shipping.pli.dddate.short.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</label>\n<input data-testing-id=\"desiredDeliveryDate\" type=\"text\" maxlength=\"255\" aria-required=\"true\" \nclass=\"desiredDeliveryDateField form-control\" \nvalue=\"\n");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("ERROR_DesiredDeliveryDate")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("ERROR_DesiredDeliveryDateUUID"),null).equals(context.getFormattedValue(getObject("PLI:ID"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",103,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("ERROR_DesiredDeliveryDateValue"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {103}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("DeliveryDate"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",104,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("DeliveryDate"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {104}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } else { 
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:DesiredDeliveryDate"),new Integer(DATE_INPUT),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {105}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 }} 
      out.write("\n\" \nid=\"desiredDeliveryDate_");
 {String value = null;try{value=context.getFormattedValue(getObject("PLI:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {108}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\n/>");
 processOpenTag(response, pageContext, "datepicker", new TagParameter[] {
new TagParameter("end_date",getObject("ExcludedDeliveryDatesCalendar:EndDateJS")),
new TagParameter("days_of_week_disabled",getObject("ExcludedDeliveryDatesCalendar:DaysOfWeekDisabled")),
new TagParameter("locale",getObject("CurrentSession:Locale")),
new TagParameter("dates_disabled",getObject("ExcludedDeliveryDatesCalendar:ExcludedDatesByPLIAsJSON(PLI,CurrentSession:Locale:DefaultRegionalSettings:inputDatePattern)")),
new TagParameter("input_id",context.getFormattedValue("desiredDeliveryDate_",null) + context.getFormattedValue(getObject("PLI:ID"),null)),
new TagParameter("start_date",getObject("ExcludedDeliveryDatesCalendar:StartDateJS"))}, 110); 
      out.write("<small class=\"input-help\">");
 {String value = null;try{value=context.getFormattedValue((context.getFormattedValue(getObject("CurrentSession:Locale:DefaultRegionalSettings:inputDatePattern"),null).toUpperCase()),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {119}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</small>\n</div>");
 } 
 } 
 } 
 } 
      out.write("</div>\n</div>");
 } 
      out.write("</div>\n</div> ");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
