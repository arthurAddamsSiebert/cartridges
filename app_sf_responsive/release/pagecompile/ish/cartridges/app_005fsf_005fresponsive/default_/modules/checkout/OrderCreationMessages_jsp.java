/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-16 22:40:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.app_005fsf_005fresponsive.default_.modules.checkout;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class OrderCreationMessages_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("basketValidationResults"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",4,e);}if (_boolean_result) { 
 {try{executePipeline("ViewCheckout-CalculateCodesNotToBeShown",((java.util.Map)(((new ParameterMap().addParameter(new ParameterEntry("BasketValidationResults",getObject("basketValidationResults"))))))),"dict");}catch(Exception e){Logger.error(this,"ISPIPELINE failed. Line: 5.",e);}} 
 {Object temp_obj = (getObject("dict:CodesNotToBeShown")); getPipelineDictionary().put("codesNotToBeShown", temp_obj);} 
 } 
 {Object temp_obj = (((((Boolean) ((((Boolean) (disableErrorMessages().isDefined(getObject("codesNotToBeShown")))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue() || ((Boolean) ((((Boolean) (hasLoopElements("codesNotToBeShown") ? Boolean.TRUE : Boolean.FALSE)).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue()) ? Boolean.TRUE : Boolean.FALSE)); getPipelineDictionary().put("ShowAllCodes", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("orderCreationResult"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",9,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("orderCreationResult:Failures") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",10,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (getObject("ShowAllCodes"))).booleanValue() || ((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("codesNotToBeShown")))).booleanValue() && ((Boolean) ((((Boolean) getObject("codesNotToBeShown:ContainsAll(orderCreationResult:Failures)")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",11,e);}if (_boolean_result) { 
      out.write("<ul class=\"list-unstyled alert alert-danger\">");
 while (loop("orderCreationResult:Failures","Failure",null)) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (getObject("ShowAllCodes"))).booleanValue() || ((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("codesNotToBeShown")))).booleanValue() && ((Boolean) ((((Boolean) getObject("codesNotToBeShown:Contains(Failure)")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",14,e);}if (_boolean_result) { 
      out.write("<li>");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (getObject("ShowAllCodes"))).booleanValue() || ((Boolean) ((disableErrorMessages().isDefined(getObject("orderCreationResult:HandlerResultByFailureCode(Failure)"))))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",16,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("orderCreationResult:HandlerResultByFailureCode(Failure):Parameter(\"ValidationFailureResults\")") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",17,e);}if (_boolean_result) { 
 while (loop("orderCreationResult:HandlerResultByFailureCode(Failure):Parameter('ValidationFailureResults')","validationResult",null)) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("validationResult:FailureCode"),null).equals(context.getFormattedValue(getObject("Failure"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",19,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("validationResult:getParameter(\"parameter0\")")); getPipelineDictionary().put("parameter0", temp_obj);} 
 {Object temp_obj = (getObject("validationResult:getParameter(\"parameter1\")")); getPipelineDictionary().put("parameter1", temp_obj);} 
      out.write(' ');
      out.write('\n');
 } 
 } 
 } 
 {out.write(localizeISText(context.getFormattedValue(context.getFormattedValue("checkout.error.",null) + context.getFormattedValue(getObject("Failure"),null),null),null,null,getObject("parameter0"),getObject("parameter1"),null,null,null,null,null,null,null,null));} 
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("orderCreationResult:HandlerResultByFailureCode(Failure):Parameter(\"AuthorizationFailed\")") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",28,e);}if (_boolean_result) { 
 while (loop("orderCreationResult:HandlerResultByFailureCode(Failure):Parameter('AuthorizationFailed')","authorizationMessage",null)) { 
      out.write("<br>");
 {String value = null;try{value=context.getFormattedValue(getObject("authorizationMessage:Message"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {31}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } 
 } 
 } 
      out.write("</li>");
 } 
 } 
      out.write("</ul>");
 } 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("orderCreationResult:Warnings") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",42,e);}if (_boolean_result) { 
      out.write(' ');
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (getObject("ShowAllCodes"))).booleanValue() || ((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("codesNotToBeShown")))).booleanValue() && ((Boolean) ((((Boolean) getObject("codesNotToBeShown:ContainsAll(orderCreationResult:Warnings)")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",43,e);}if (_boolean_result) { 
      out.write("<ul class=\"list-unstyled alert alert-warning\">");
 while (loop("orderCreationResult:Warnings","Warning",null)) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (getObject("ShowAllCodes"))).booleanValue() || ((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("codesNotToBeShown")))).booleanValue() && ((Boolean) ((((Boolean) getObject("codesNotToBeShown:Contains(Warning)")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",46,e);}if (_boolean_result) { 
      out.write("<li>");
 {out.write(localizeISText(context.getFormattedValue(context.getFormattedValue("checkout.warning.",null) + context.getFormattedValue(getObject("Warning"),null),null),"",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</li>");
 } 
 } 
      out.write("</ul>");
 } 
 } 
 } 
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
