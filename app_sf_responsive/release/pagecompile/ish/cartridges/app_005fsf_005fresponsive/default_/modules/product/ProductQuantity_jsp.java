/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-16 22:40:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.app_005fsf_005fresponsive.default_.modules.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.core.capi.preference.PreferenceDefinition;
import com.intershop.beehive.bts.capi.orderprocess.basket.BasketConstants;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.preference.PreferenceDefinitionMgr;

public final class ProductQuantity_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write("\n\n\n\n");
 
setEncodingType("text/html"); 
 _boolean_result=false;try {_boolean_result=((Boolean)(((!((Boolean) (getObject("ProductBO:isEndOfLife"))).booleanValue() && !((Boolean) (getObject("ProductBO:isRetailSet"))).booleanValue() && !((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("ProductBO:ServiceType")))).booleanValue() && ((Boolean) getObject("ProductBO:ServiceType:DigitalGiftCard")).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",8,e);}if (_boolean_result) { 
      out.write("<div class=\"product-quantity row\">");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("ProductBO:Available"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",10,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("ProductBO:Extension(\"Pricing\")")); getPipelineDictionary().put("ProductPrice", temp_obj);} 
 processOpenTag(response, pageContext, "currentcustomerbo", new TagParameter[] {
new TagParameter("currentcustomerbo","CustomerBO")}, 13); 
 processOpenTag(response, pageContext, "getproductpricecontext", new TagParameter[] {
new TagParameter("CustomerBO",getObject("CustomerBO")),
new TagParameter("ProductPriceContext","ProductPriceContext")}, 14); 
 {Object temp_obj = (getObject("ProductPrice:Price(\"SalePrice\",Currency,ProductPriceContext)")); getPipelineDictionary().put("salePrice", temp_obj);} 
 {Object temp_obj = (getObject("ProductBO:Extension(\"Inventory\")")); getPipelineDictionary().put("ProductInventory", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("ProductInventory:ServiceEnabled"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",17,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) getObject("InventoryStatus:InStock")).booleanValue() && ((Boolean) getObject("salePrice:Price:Available")).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",18,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("nullQuantity")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("nullQuantity"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",19,e);}if (_boolean_result) { 
 {Object temp_obj = (new Double(0)); getPipelineDictionary().put("initialQuantity", temp_obj);} 
 } else {_boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("initialQuantity")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("initialQuantity"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",21,e);}if (_boolean_result) { 
 {Object temp_obj = ((val(context.getFormattedValue(getObject("initialQuantity"),null)))); getPipelineDictionary().put("initialQuantity", temp_obj);} 
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ProductBO:MinOrderQuantity"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",23,e);}if (_boolean_result) { 
 {Object temp_obj = ((val(context.getFormattedValue(getObject("ProductBO:MinOrderQuantity"),null)))); getPipelineDictionary().put("initialQuantity", temp_obj);} 
 } else { 
 {Object temp_obj = (new Double(1)); getPipelineDictionary().put("initialQuantity", temp_obj);} 
 }}} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ProductLineItemBO"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",29,e);}if (_boolean_result) { 
 {Object temp_obj = ((val(context.getFormattedValue(getObject("ProductLineItemBO:Quantity"),null)))); getPipelineDictionary().put("displayQuantity", temp_obj);} 
 } else {_boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("displayQuantity")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("displayQuantity"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",31,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("displayQuantity")); getPipelineDictionary().put("displayQuantity", temp_obj);} 
 } else { 
 {Object temp_obj = (getObject("initialQuantity")); getPipelineDictionary().put("displayQuantity", temp_obj);} 
 }} 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("maxQuantity")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("maxQuantity"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) ((( ((Number) (val(context.getFormattedValue(getObject("maxQuantity"),null)))).doubleValue() >=((Number)(getObject("initialQuantity"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",37,e);}if (_boolean_result) { 
 {Object temp_obj = ((val(context.getFormattedValue(getObject("maxQuantity"),null)))); getPipelineDictionary().put("maxQuantity", temp_obj);} 
 } else {_boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("ProductBO:MaxOrderQuantity:Value")))).booleanValue() && ((Boolean) ((( ((Number) getObject("ProductBO:MaxOrderQuantity:Value")).doubleValue() !=((Number)(new Double(0))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) ((( ((Number) (val(context.getFormattedValue(context.getFormattedValue(getObject("ProductBO:MaxOrderQuantity:Value"),"0"),null)))).doubleValue() >=((Number)(getObject("initialQuantity"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",39,e);}if (_boolean_result) { 
 {Object temp_obj = ((val(context.getFormattedValue(context.getFormattedValue(getObject("ProductBO:MaxOrderQuantity:Value"),"0"),null)))); getPipelineDictionary().put("maxQuantity", temp_obj);} 
 } else { 
 {try{executePipeline("ViewCart-GetApplicationBasketMaxItemQuantity",java.util.Collections.emptyMap(),"dict");}catch(Exception e){Logger.error(this,"ISPIPELINE failed. Line: 43.",e);}} 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((disableErrorMessages().isDefined(getObject("dict:BasketMaxItemQuantity"))))).booleanValue() && ((Boolean) ((( ((Number) getObject("dict:BasketMaxItemQuantity")).doubleValue() >((Number)(new Double(0))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",44,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("dict:BasketMaxItemQuantity")); getPipelineDictionary().put("maxQuantity", temp_obj);} 
 } else { 

							PreferenceDefinitionMgr prefMgr = (PreferenceDefinitionMgr) NamingMgr.getManager(PreferenceDefinitionMgr.class);
							PreferenceDefinition pref = prefMgr.getPreferenceDefinition(BasketConstants.BASKET_MAX_ITEMQUANTITY);
							java.lang.Double maxBasketQty = java.lang.Double.valueOf(pref.getDefaultValue());
							getPipelineDictionary().put("maxQuantity", maxBasketQty);
						
 } 
 }} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ProductBO:StepQuantity"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",56,e);}if (_boolean_result) { 
 {Object temp_obj = ((val(context.getFormattedValue(getObject("ProductBO:StepQuantity"),null)))); getPipelineDictionary().put("stepQuantity", temp_obj);} 
 } else { 
 {Object temp_obj = (new Double(1)); getPipelineDictionary().put("stepQuantity", temp_obj);} 
 } 
 processOpenTag(response, pageContext, "fielderrormessageplaceholder", new TagParameter[] {
new TagParameter("fieldname",getObject("Quantity")),
new TagParameter("name_override",context.getFormattedValue("Quantity_",null) + context.getFormattedValue(getObject("ProductBO:SKU"),null))}, 62); 
      out.write("<label for=\"Quantity_");
 {String value = null;try{value=context.getFormattedValue(getObject("ProductBO:SKU"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {63}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" class=\"label-quantity col-xs-6 \">");
 {out.write(localizeISText("product.quantity.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</label>\n<div class=\"col-xs-6 form-group ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("customStyle"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",64,e);}if (_boolean_result) { 
      out.print(context.getFormattedValue(getObject("customStyle"),null));
 } 
      out.write('"');
      out.write('>');
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("type"),null).equals(context.getFormattedValue("dropdown",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",65,e);}if (_boolean_result) { 
      out.write("<select class=\"input-quantity form-control\" id=\"Quantity_");
 {String value = null;try{value=context.getFormattedValue(getObject("ProductBO:SKU"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {66}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" name=\"Quantity_");
 {String value = null;try{value=context.getFormattedValue(getObject("ProductBO:SKU"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {66}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"></select>\n<script language=\"javascript\">\n$(document).ready(function() {\nfor(i=");
 {String value = null;try{value=context.getFormattedValue(getObject("initialQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {70}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("; i <= ");
 {String value = null;try{value=context.getFormattedValue(getObject("maxQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {70}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("; i += ");
 {String value = null;try{value=context.getFormattedValue(getObject("stepQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {70}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("){\n$('<option value=\"'+i+'\">'+i+'</option>').appendTo('select.input-quantity');\n}\n});\n</script>");
 } else { 
      out.write("<input type=\"number\" class=\"input-quantity form-control\"\nrequired\nid=\"Quantity_");
 {String value = null;try{value=context.getFormattedValue(getObject("ProductBO:SKU"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {79}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nname=\"Quantity_");
 {String value = null;try{value=context.getFormattedValue(getObject("ProductBO:SKU"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {80}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nvalue=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("displayQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {81}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nstep=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("stepQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {82}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nmin=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("initialQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {83}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nmax=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("maxQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {84}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\ndata-error-position=\"placeholder\"\ndata-bv-notempty-message=\"");
 {out.write(localizeISText("product.quantity.notempty.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"\ndata-bv-lessthan-message=\"");
 {out.write(localizeISText("product.quantity.lessthan.text","",null,getObject("maxQuantity"),null,null,null,null,null,null,null,null,null));} 
      out.write("\"\ndata-bv-greaterthan-message=\"");
 {out.write(localizeISText("product.quantity.greaterthan.text","",null,getObject("initialQuantity"),null,null,null,null,null,null,null,null,null));} 
      out.write("\"\ndata-bv-message=\"");
 {out.write(localizeISText("product.quantity.message.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\" \ndata-bv-integer-message=\"");
 {out.write(localizeISText("product.quantity.integer.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"\n/>");
 } 
      out.write("</div>");
 } 
 } else { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) getObject("ProductBO:InventoryStatus:InStock")).booleanValue() && ((Boolean) getObject("salePrice:Price:Available")).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",96,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("nullQuantity")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("nullQuantity"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",97,e);}if (_boolean_result) { 
 {Object temp_obj = (new Double(0)); getPipelineDictionary().put("initialQuantity", temp_obj);} 
 } else {_boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("initialQuantity")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("initialQuantity"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",99,e);}if (_boolean_result) { 
 {Object temp_obj = ((val(context.getFormattedValue(getObject("initialQuantity"),null)))); getPipelineDictionary().put("initialQuantity", temp_obj);} 
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ProductBO:MinOrderQuantity"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",101,e);}if (_boolean_result) { 
 {Object temp_obj = ((val(context.getFormattedValue(getObject("ProductBO:MinOrderQuantity"),null)))); getPipelineDictionary().put("initialQuantity", temp_obj);} 
 } else { 
 {Object temp_obj = (new Double(1)); getPipelineDictionary().put("initialQuantity", temp_obj);} 
 }}} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ProductLineItemBO"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",107,e);}if (_boolean_result) { 
 {Object temp_obj = ((val(context.getFormattedValue(getObject("ProductLineItemBO:Quantity"),null)))); getPipelineDictionary().put("displayQuantity", temp_obj);} 
 } else {_boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("displayQuantity")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("displayQuantity"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",109,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("displayQuantity")); getPipelineDictionary().put("displayQuantity", temp_obj);} 
 } else { 
 {Object temp_obj = (getObject("initialQuantity")); getPipelineDictionary().put("displayQuantity", temp_obj);} 
 }} 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("maxQuantity")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("maxQuantity"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) ((( ((Number) (val(context.getFormattedValue(getObject("maxQuantity"),null)))).doubleValue() >=((Number)(getObject("initialQuantity"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",115,e);}if (_boolean_result) { 
 {Object temp_obj = ((val(context.getFormattedValue(getObject("maxQuantity"),null)))); getPipelineDictionary().put("maxQuantity", temp_obj);} 
 } else {_boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("ProductBO:MaxOrderQuantity:Value")))).booleanValue() && ((Boolean) ((( ((Number) getObject("ProductBO:MaxOrderQuantity:Value")).doubleValue() !=((Number)(new Double(0))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) ((( ((Number) (val(context.getFormattedValue(context.getFormattedValue(getObject("ProductBO:MaxOrderQuantity:Value"),"0"),null)))).doubleValue() >=((Number)(getObject("initialQuantity"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",117,e);}if (_boolean_result) { 
 {Object temp_obj = ((val(context.getFormattedValue(context.getFormattedValue(getObject("ProductBO:MaxOrderQuantity:Value"),"0"),null)))); getPipelineDictionary().put("maxQuantity", temp_obj);} 
 } else { 
 {try{executePipeline("ViewCart-GetApplicationBasketMaxItemQuantity",java.util.Collections.emptyMap(),"dict");}catch(Exception e){Logger.error(this,"ISPIPELINE failed. Line: 121.",e);}} 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((disableErrorMessages().isDefined(getObject("dict:BasketMaxItemQuantity"))))).booleanValue() && ((Boolean) ((( ((Number) getObject("dict:BasketMaxItemQuantity")).doubleValue() >((Number)(new Double(0))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",122,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("dict:BasketMaxItemQuantity")); getPipelineDictionary().put("maxQuantity", temp_obj);} 
 } else { 

							PreferenceDefinitionMgr prefMgr = (PreferenceDefinitionMgr) NamingMgr.getManager(PreferenceDefinitionMgr.class);
							PreferenceDefinition pref = prefMgr.getPreferenceDefinition(BasketConstants.BASKET_MAX_ITEMQUANTITY);
							java.lang.Double maxBasketQty = java.lang.Double.valueOf(pref.getDefaultValue());
							getPipelineDictionary().put("maxQuantity", maxBasketQty);
						
 } 
 }} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ProductBO:StepQuantity"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",134,e);}if (_boolean_result) { 
 {Object temp_obj = ((val(context.getFormattedValue(getObject("ProductBO:StepQuantity"),null)))); getPipelineDictionary().put("stepQuantity", temp_obj);} 
 } else { 
 {Object temp_obj = (new Double(1)); getPipelineDictionary().put("stepQuantity", temp_obj);} 
 } 
 processOpenTag(response, pageContext, "fielderrormessageplaceholder", new TagParameter[] {
new TagParameter("fieldname",getObject("Quantity")),
new TagParameter("name_override",context.getFormattedValue("Quantity_",null) + context.getFormattedValue(getObject("ProductBO:SKU"),null))}, 140); 
      out.write("<label for=\"Quantity_");
 {String value = null;try{value=context.getFormattedValue(getObject("ProductBO:SKU"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {141}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" class=\"label-quantity col-xs-6 \">");
 {out.write(localizeISText("product.quantity.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</label>\n<div class=\"col-xs-6 form-group ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("customStyle"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",142,e);}if (_boolean_result) { 
      out.print(context.getFormattedValue(getObject("customStyle"),null));
 } 
      out.write('"');
      out.write('>');
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("type"),null).equals(context.getFormattedValue("dropdown",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",143,e);}if (_boolean_result) { 
      out.write("<select class=\"input-quantity form-control\" id=\"Quantity_");
 {String value = null;try{value=context.getFormattedValue(getObject("ProductBO:SKU"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {144}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" name=\"Quantity_");
 {String value = null;try{value=context.getFormattedValue(getObject("ProductBO:SKU"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {144}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"></select>\n<script language=\"javascript\">\n$(document).ready(function() {\nfor(i=");
 {String value = null;try{value=context.getFormattedValue(getObject("initialQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {148}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("; i <= ");
 {String value = null;try{value=context.getFormattedValue(getObject("maxQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {148}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("; i += ");
 {String value = null;try{value=context.getFormattedValue(getObject("stepQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {148}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("){\n$('<option value=\"'+i+'\">'+i+'</option>').appendTo('select.input-quantity');\n}\n});\n</script>");
 } else { 
      out.write("<input type=\"number\" class=\"input-quantity form-control\"\nrequired\nid=\"Quantity_");
 {String value = null;try{value=context.getFormattedValue(getObject("ProductBO:SKU"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {157}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nname=\"Quantity_");
 {String value = null;try{value=context.getFormattedValue(getObject("ProductBO:SKU"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {158}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nvalue=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("displayQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {159}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nstep=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("stepQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {160}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nmin=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("initialQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {161}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nmax=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("maxQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {162}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\ndata-error-position=\"placeholder\"\ndata-bv-notempty-message=\"");
 {out.write(localizeISText("product.quantity.notempty.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"\ndata-bv-lessthan-message=\"");
 {out.write(localizeISText("product.quantity.lessthan.text","",null,getObject("maxQuantity"),null,null,null,null,null,null,null,null,null));} 
      out.write("\"\ndata-bv-greaterthan-message=\"");
 {out.write(localizeISText("product.quantity.greaterthan.text","",null,getObject("initialQuantity"),null,null,null,null,null,null,null,null,null));} 
      out.write("\"\ndata-bv-message=\"");
 {out.write(localizeISText("product.quantity.message.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\" \ndata-bv-integer-message=\"");
 {out.write(localizeISText("product.quantity.integer.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"\n/>");
 } 
      out.write("</div>");
 } 
 } 
 } 
      out.write("</div>");
 } 
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
