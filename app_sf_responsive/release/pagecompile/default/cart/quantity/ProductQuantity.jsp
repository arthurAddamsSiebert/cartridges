<%@  page buffer="none" import="java.util.*,java.io.*,com.intershop.beehive.core.internal.template.*,com.intershop.beehive.core.internal.template.isml.*,com.intershop.beehive.core.capi.log.*,com.intershop.beehive.core.capi.resource.*,com.intershop.beehive.core.capi.util.UUIDMgr,com.intershop.beehive.core.capi.util.XMLHelper,com.intershop.beehive.foundation.util.*,com.intershop.beehive.core.internal.url.*,com.intershop.beehive.core.internal.resource.*,com.intershop.beehive.core.internal.wsrp.*,com.intershop.beehive.core.capi.pipeline.PipelineDictionary,com.intershop.beehive.core.capi.naming.NamingMgr,com.intershop.beehive.core.capi.pagecache.PageCacheMgr,com.intershop.beehive.core.capi.request.SessionMgr,com.intershop.beehive.core.internal.request.SessionMgrImpl,com.intershop.beehive.core.pipelet.PipelineConstants" extends="com.intershop.beehive.core.internal.template.AbstractTemplate" %><% 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 %><% %><%@ page contentType="text/html;charset=utf-8" %><%setEncodingType("text/html"); %><% _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("CartReadonly"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",3,e);}if (_boolean_result) { %><label class="hidden-lg control-label"><% {out.write(localizeISText("shopping_cart.pli.qty.label","",null,null,null,null,null,null,null,null,null,null,null));} %></label><% {String value = null;try{value=context.getFormattedValue(getObject("PLI:Quantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {5}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %><% } else { %><% _boolean_result=false;try {_boolean_result=((Boolean)((getObject("PLI:FreeGift")))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",7,e);}if (_boolean_result) { %><label class="hidden-lg control-label"><% {out.write(localizeISText("shopping_cart.pli.qty.label","",null,null,null,null,null,null,null,null,null,null,null));} %></label><% {String value = null;try{value=context.getFormattedValue(getObject("PLI:Quantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {9}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %><% } else { %><% {Object temp_obj = (getObject("PLI:MinOrderQuantity:Value")); getPipelineDictionary().put("minQuantity", temp_obj);} %><% {Object temp_obj = (getObject("PLI:MaxOrderQuantity:Value")); getPipelineDictionary().put("maxQuantity", temp_obj);} %><% {Object temp_obj = (getObject("PLI:StepQuantity:Value")); getPipelineDictionary().put("stepQuantity", temp_obj);} %><label class="hidden-lg control-label"><% {out.write(localizeISText("shopping_cart.pli.qty.label","",null,null,null,null,null,null,null,null,null,null,null));} %></label>
<input 
data-testing-id="product-count-<% {String value = null;try{value=context.getFormattedValue(getObject("PLI:ProductName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {18}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>-element"
id="quantity_<% {String value = null;try{value=context.getFormattedValue(getObject("PLI:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {19}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>"
name="Quantity_<% {String value = null;try{value=context.getFormattedValue(getObject("PLI:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {20}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>"
type="number" 
class="form-control quantity js-quantity js-product-qty"
<% _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((((context.getFormattedValue(getObject("QUANTITY_FORMAT_PLIUUID"),null).equals(context.getFormattedValue(getObject("PLI:ID"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) (disableErrorMessages().isDefined(getObject("QUANTITY_SUBMITTED_VALUE")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",23,e);}if (_boolean_result) { %>
value="<% {String value = null;try{value=context.getFormattedValue(getObject("QUANTITY_SUBMITTED_VALUE"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {24}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>"
<% } else { %>
value="<% {String value = null;try{value=context.getFormattedValue(getObject("PLI:Quantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {26}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>"
<% } %>
required
min="0" 
max="<% {String value = null;try{value=context.getFormattedValue(getObject("maxQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {30}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>" 
step="<% {String value = null;try{value=context.getFormattedValue(getObject("stepQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {31}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>"
data-bv-integer-message="<% {out.write(localizeISText("shopping_cart.quantity.invalid.error","",null,null,null,null,null,null,null,null,null,null,null));} %>"
data-bv-notempty-message="<% {out.write(localizeISText("shopping_cart.quantity.invalid.error","",null,null,null,null,null,null,null,null,null,null,null));} %>"
data-bv-greaterThan-message="<% {out.write(localizeISText("shopping_cart.quantity.invalid.error","",null,null,null,null,null,null,null,null,null,null,null));} %>"
data-bv-lessThan-message="<% {out.write(localizeISText("shopping_cart.quantity.invalid.error.maxvalue","",null,null,null,null,null,null,null,null,null,null,null));} %>"
<% _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("stepQuantity")).doubleValue() !=((Number)(new Double(1))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",36,e);}if (_boolean_result) { %>
data-bv-step="true"
data-bv-step-step="<% {String value = null;try{value=context.getFormattedValue(getObject("stepQuantity"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {38}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>"
data-bv-step-message="<% {out.write(localizeISText("shopping_cart.quantity.invalid.error.step","",null,getObject("stepQuantity"),null,null,null,null,null,null,null,null,null));} %>"
<% } %> 
/><% } %><% } %><% printFooter(out); %>