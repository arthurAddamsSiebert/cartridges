/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-16 22:40:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.app_005fsf_005fresponsive_005fb2b.default_.account;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class ApprovalDetailsPurchaserBudget_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"modules/B2BModules", null, "2");} 
 {Object temp_obj = (getObject("BasketBO:GrandTotalGross")); getPipelineDictionary().put("BasketTotal", temp_obj);} 
 {Object temp_obj = (getObject("BasketBO:Extension(\"Approval\")")); getPipelineDictionary().put("BasketApprovalExtension", temp_obj);} 
      out.write("<div class=\"section infobox\">\n<h3>");
 {out.write(localizeISText("approval.detailspage.buyer_budget.heading","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</h3>\n<div class=\"row\">\n<div class=\"col-sm-6\">\n<p class=\"row\">\n<strong class=\"col-xs-6\">");
 {out.write(localizeISText("approval.detailspage.purchaser.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":\n</strong>\n<span class=\"col-xs-6\">");
 {String value = null;try{value=context.getFormattedValue(getObject("BasketBO:User:Profile:DataSheet:FirstName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {17}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(' ');
 {String value = null;try{value=context.getFormattedValue(getObject("BasketBO:User:Profile:DataSheet:LastName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {17}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</span>\n</p>\n</div>\n</div>\n<div class=\"row section\">\n<div class=\"col-sm-6\">\n<p class=\"row\">\n<strong class=\"col-xs-6\">");
 {out.write(localizeISText("approval.detailspage.order_spend_limit.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</strong>\n<span class=\"col-xs-6\">");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("UserApproval:SingleOrderThresholdAmount:Available"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",30,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("UserApproval:SingleOrderThresholdAmount"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {31}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } else { 
 {out.write(localizeISText("approval.details.threshold.unlimited","",null,null,null,null,null,null,null,null,null,null,null));} 
 } 
      out.write("</span>\n</p>\n</div>");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("UserApproval:SingleOrderThresholdAmount:Available"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",38,e);}if (_boolean_result) { 
      out.write("<div class=\"col-sm-6\">");
 processOpenTag(response, pageContext, "indicatorbar", new TagParameter[] {
new TagParameter("Comparison",getObject("BasketTotal")),
new TagParameter("Limit",getObject("UserApproval:SingleOrderThresholdAmount"))}, 40); 
      out.write("</div>");
 } 
      out.write("</div>");
 {Object temp_obj = (getObject("UserApproval:BudgetType")); getPipelineDictionary().put("UserApprovalBudgetType", temp_obj);} 
 {Object temp_obj = (getObject("UserApproval:Budget(UserApproval:BudgetType)")); getPipelineDictionary().put("UserApprovalBudgetLimit", temp_obj);} 
      out.write("<div class=\"row\">\n<div class=\"col-sm-6\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) ((((context.getFormattedValue((context.getFormattedValue(getObject("UserApprovalBudgetType"),null).toLowerCase()),null).equals(context.getFormattedValue("none",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",53,e);}if (_boolean_result) { 
      out.write("<p class=\"row\">\n<strong class=\"col-xs-6\">");
 {out.write(localizeISText(context.getFormattedValue(context.getFormattedValue("approval.detailspage.budget.type.",null) + context.getFormattedValue((context.getFormattedValue(getObject("UserApprovalBudgetType"),null).toLowerCase()),null) + context.getFormattedValue(".label",null),null),"",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</strong>\n<span class=\"col-xs-6\">");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("UserApprovalBudgetLimit:Available"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",59,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("UserApprovalBudgetLimit"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {60}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } else { 
 {out.write(localizeISText("approval.details.threshold.unlimited","",null,null,null,null,null,null,null,null,null,null,null));} 
 } 
      out.write("</span>\n</p>");
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("UserApprovalBudgetLimit:Available"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",68,e);}if (_boolean_result) { 
      out.write("<p class=\"row\">\n<strong class=\"col-xs-6\">");
 {out.write(localizeISText("approval.detailspage.budget.already_spent.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</strong>\n<span class=\"col-xs-6\">");
 {Object temp_obj = (getObject("UserApproval:BudgetSpent(UserApprovalBudgetType)")); getPipelineDictionary().put("UserApprovalBudgetSpent", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("UserApprovalBudgetSpent:Available"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",77,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("UserApprovalBudgetSpent"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {78}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 {Object temp_obj = ((new Double( ((Number) getObject("UserApprovalBudgetSpent:Value")).doubleValue() / ((Number) getObject("UserApprovalBudgetLimit:Value")).doubleValue() *((Number) new Double(100)).doubleValue()))); getPipelineDictionary().put("UserApprovalBudgetSpentPercentage", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("UserApprovalBudgetSpentPercentage")).doubleValue() >((Number)(new Double(100))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",80,e);}if (_boolean_result) { 
      out.write("<span class=\"label label-danger pull-right\">");
 } else { 
      out.write("<span class=\"label label-default pull-right\">");
 } 
      out.write('\n');
      out.write('(');
 {String value = null;try{value=context.getFormattedValue(getObject("UserApprovalBudgetSpentPercentage"),"#.#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {85}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(" %)\n</span>");
 } else { 
 processOpenTag(response, pageContext, "moneycalculator", new TagParameter[] {
new TagParameter("result","ZeroAmount"),
new TagParameter("operand1",getObject("BasketTotal")),
new TagParameter("operand2",getObject("BasketTotal")),
new TagParameter("method","subtract")}, 89); 
 {String value = null;try{value=context.getFormattedValue(getObject("ZeroAmount"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {93}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(" \n<span class=\"label label-default pull-right\">\n(0.00 %)\n</span>");
 } 
      out.write("</span>\n</p>");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("BasketApprovalExtension:OverallApprovalStatus:ID"),null).equals(context.getFormattedValue("pending",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",100,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("RecurringBasket:Recurring"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",101,e);}if (_boolean_result) { 
      out.write("<p class=\"row\">\n<strong class=\"col-xs-6\">");
 {out.write(localizeISText("approval.detailspage.budget.including_order.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</strong>\n<span class=\"col-xs-6\">");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("UserApprovalBudgetSpent:Available"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",107,e);}if (_boolean_result) { 
 processOpenTag(response, pageContext, "moneycalculator", new TagParameter[] {
new TagParameter("result","UserApprovalBudgetSpentEstimation"),
new TagParameter("operand1",getObject("UserApprovalBudgetSpent")),
new TagParameter("operand2",getObject("BasketTotal")),
new TagParameter("method","add")}, 108); 
 } else { 
 {Object temp_obj = (getObject("BasketTotal")); getPipelineDictionary().put("UserApprovalBudgetSpentEstimation", temp_obj);} 
 } 
 {String value = null;try{value=context.getFormattedValue(getObject("UserApprovalBudgetSpentEstimation"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {116}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 {Object temp_obj = ((new Double( ((Number) getObject("UserApprovalBudgetSpentEstimation:Value")).doubleValue() / ((Number) getObject("UserApprovalBudgetLimit:Value")).doubleValue() *((Number) new Double(100)).doubleValue()))); getPipelineDictionary().put("UserApprovalBudgetSpentEstimationPercentage", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("UserApprovalBudgetSpentEstimationPercentage")).doubleValue() >((Number)(new Double(100))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",118,e);}if (_boolean_result) { 
      out.write("<span class=\"label label-danger pull-right\">");
 } else { 
      out.write("<span class=\"label label-default pull-right\">");
 } 
      out.write('\n');
      out.write('(');
 {String value = null;try{value=context.getFormattedValue(getObject("UserApprovalBudgetSpentEstimationPercentage"),"#.#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {123}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(" %)\n</span>\n</span>\n</p>");
 } 
 } 
 } 
      out.write("</div>");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("UserApproval:Budget(UserApproval:BudgetType):Available"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",131,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((((context.getFormattedValue(getObject("BasketApprovalExtension:OverallApprovalStatus:ID"),null).equals(context.getFormattedValue("pending",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) ((((Boolean) getObject("RecurringBasket:Recurring")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",132,e);}if (_boolean_result) { 
      out.write("<div class=\"col-sm-6\">");
 processOpenTag(response, pageContext, "indicatorbar", new TagParameter[] {
new TagParameter("Addition",getObject("BasketTotal")),
new TagParameter("Comparison",getObject("UserApprovalBudgetSpent")),
new TagParameter("Limit",getObject("UserApprovalBudgetLimit"))}, 134); 
      out.write("</div>");
 } else { 
      out.write("<div class=\"col-sm-6\">");
 processOpenTag(response, pageContext, "indicatorbar", new TagParameter[] {
new TagParameter("Comparison",getObject("UserApprovalBudgetSpent")),
new TagParameter("Limit",getObject("UserApprovalBudgetLimit"))}, 142); 
      out.write("</div>");
 } 
 } 
      out.write("</div> \n</div>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
