/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-16 22:40:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.app_005fsf_005fresponsive_005fb2b.default_.account;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.component.customer.capi.CustomerBO;
import com.intershop.beehive.core.capi.app.AppContextUtil;
import com.intershop.component.contract.capi.ContractBaseBO;
import com.intershop.component.application.capi.ApplicationBO;

public final class Contracts_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write("\n\n\n\n\n");
 
setEncodingType("text/html"); 
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"modules/B2BModules", null, "7");} 
      out.write("<div class=\"breadcrumbs row\">");
 processOpenTag(response, pageContext, "accountbreadcrumb", new TagParameter[] {
new TagParameter("trailtext",localizeText(context.getFormattedValue("account.contract.contracts.breadcrumb.title",null)))}, 10); 
      out.write("</div>\n<div class=\"marketing-area\">");
 processOpenTag(response, pageContext, "marketingslot", new TagParameter[] {
new TagParameter("id","baseMarketing")}, 15); 
      out.write("</div>\n<div class=\"account-wrapper\" data-testing-id=\"b2b-account-contracts\">\n<div class=\"row account-main\">\n<div class=\"col-md-3 account-nav-box\">");
 processOpenTag(response, pageContext, "accountnavigation", new TagParameter[] {
new TagParameter("selecteditem","CONTRACTS")}, 23); 
      out.write("</div>\n<div class=\"col-md-9\">");
 processOpenTag(response, pageContext, "createmap", new TagParameter[] {
new TagParameter("key0","CustomerBO"),
new TagParameter("value0",getObject("CustomerBO")),
new TagParameter("mapname","PipelineParameters")}, 27); 
 {try{executePipeline("ViewUsers-TemplateCallback",((java.util.Map)(getObject("PipelineParameters"))),"Result");}catch(Exception e){Logger.error(this,"ISPIPELINE failed. Line: 28.",e);}} 
 processOpenTag(response, pageContext, "populatedictionary", new TagParameter[] {
new TagParameter("map",getObject("Result"))}, 29); 
      out.write("<div class=\"marketing-area\">");
 processOpenTag(response, pageContext, "marketingslot", new TagParameter[] {
new TagParameter("id","contentMarketing")}, 33); 
      out.write("</div>\n<h1>");
 {out.write(localizeISText("account.contract.contracts.title","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</h1>\n<div class=\"table-responsive\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("ContractBaseBOsPageable") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",39,e);}if (_boolean_result) { 
      out.write("<table class=\"table\" data-testing-id=\"contractList\">\n<thead>\n<th>");
 {out.write(localizeISText("account.contract.contracts.name","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</th>\n<th>");
 {out.write(localizeISText("account.contract.contracts.contractID","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</th>\n<th>");
 {out.write(localizeISText("account.contract.contracts.type","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</th>\n<th>");
 {out.write(localizeISText("account.contract.contracts.period","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</th>\n<th>");
 {out.write(localizeISText("account.contract.contracts.progress","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</th>\n</thead>\n<tbody>");
 while (loop("ContractBaseBOsPageable","Contract","Counter")) { 
      out.write("<tr>\n<td>\n<a href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewContracts-Show",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("ContractID",null),context.getFormattedValue(getObject("Contract:ID"),null)))),null));
      out.write('"');
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("Contract:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {53}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</a>\n</td>\n<td>");
 {String value = null;try{value=context.getFormattedValue(getObject("Contract:ContractID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {57}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td> \n<td>");
 {out.write(localizeISText(context.getFormattedValue(context.getFormattedValue("account.contract.type.",null) + context.getFormattedValue(getObject("Contract:TypeCode"),null),null),"",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td> \n<td>");
 {String value = null;try{value=context.getFormattedValue(getObject("Contract:StartDate"),new Integer(DATE_SHORT),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {63}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(' ');
      out.write('-');
      out.write(' ');
 {String value = null;try{value=context.getFormattedValue(getObject("Contract:EndDate"),new Integer(DATE_SHORT),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {63}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n<td>");
 {Object temp_obj = ("0"); getPipelineDictionary().put("ContractProgress", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("Contract:SalesTarget")))).booleanValue() && ((Boolean) (disableErrorMessages().isDefined(getObject("Contract:SalesTarget:Actual")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",67,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) ((new Double( ((Number) getObject("Contract:SalesTarget:Actual:Value")).doubleValue() / ((Number) getObject("Contract:SalesTarget:TargetAmount")).doubleValue() *((Number) new Double(100)).doubleValue())))).doubleValue() <((Number)(new Double(100))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",68,e);}if (_boolean_result) { 
 {Object temp_obj = (context.getFormattedValue(((new Double( ((Number) getObject("Contract:SalesTarget:Actual:Value")).doubleValue() / ((Number) getObject("Contract:SalesTarget:TargetAmount")).doubleValue() *((Number) new Double(100)).doubleValue()))),"0")); getPipelineDictionary().put("ContractProgress", temp_obj);} 
 } else { 
 {Object temp_obj = ("100"); getPipelineDictionary().put("ContractProgress", temp_obj);} 
 } 
 } 
 processOpenTag(response, pageContext, "progressbar", new TagParameter[] {
new TagParameter("value",getObject("ContractProgress"))}, 75); 
      out.write("</td>\n</tr>");
 } 
      out.write("</tbody>\n</table>");
 processOpenTag(response, pageContext, "mappagination", new TagParameter[] {
new TagParameter("pipeline",context.getFormattedValue(getObject("ListNavigationVO:HandlerPipeline"),null) + context.getFormattedValue("-Paging",null)),
new TagParameter("pagecount",getObject("ListNavigationVO:PageCount")),
new TagParameter("itemcount",getObject("ListNavigationVO:ElementCount")),
new TagParameter("currentpage",getObject("ListNavigationVO:CurrentPage")),
new TagParameter("params",getObject("ListNavigationVO:GenericHandlerPipelineParams"))}, 82); 
 } else { 
      out.write('<');
      out.write('p');
      out.write('>');
 {out.write(localizeISText("account.contract.contracts.noItems.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</p>");
 } 
      out.write("</div>\n</div>\n</div>\n</div>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
