/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-16 22:40:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.app_005fsf_005fresponsive_005fb2b.default_.punchout.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class OCIConfiguration_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
      out.write("<div class=\"section\">\n<p>");
 {out.write(localizeISText("account.punchout.configuration.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</p>\n</div>");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ShowSuccessMessage"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",7,e);}if (_boolean_result) { 
      out.write("<div class=\"alert alert-success alert-fade\" data-testing-id=\"message-punchout-save-success\">");
 {out.write(localizeISText("account.punchout.configuration.save_success.message","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</div>");
 } 
 {Object temp_obj = (getObject("CustomerBO:Extension(\"PunchoutConfiguration\"):ConfigurationData")); getPipelineDictionary().put("Configuration", temp_obj);} 
 URLPipelineAction action28 = new URLPipelineAction(context.getFormattedValue(url(true,context.getFormattedValue(getObject("SecureURL"),null), context.getFormattedValue("",null), (new URLPipelineAction(context.getFormattedValue("ViewOCIConfiguration-Dispatch",null)))),null));String site28 = null;String serverGroup28 = null;String actionValue28 = context.getFormattedValue(url(true,context.getFormattedValue(getObject("SecureURL"),null), context.getFormattedValue("",null), (new URLPipelineAction(context.getFormattedValue("ViewOCIConfiguration-Dispatch",null)))),null);if (site28 == null){  site28 = action28.getDomain();  if (site28 == null)  {      site28 = com.intershop.beehive.core.capi.request.Request.getCurrent().getRequestSite().getDomainName();  }}if (serverGroup28 == null){  serverGroup28 = action28.getServerGroup();  if (serverGroup28 == null)  {      serverGroup28 = com.intershop.beehive.core.capi.request.Request.getCurrent().getRequestSite().getServerGroup();  }}out.print("<form");out.print(" method=\"");out.print("post");out.print("\"");out.print(" action=\"");out.print(context.getFormattedValue(url(true,context.getFormattedValue(getObject("SecureURL"),null), context.getFormattedValue("",null), (new URLPipelineAction(context.getFormattedValue("ViewOCIConfiguration-Dispatch",null)))),null));out.print("\"");out.print(" class=\"");out.print("form-horizontal bv-form");out.print("\"");out.print(">");out.print(context.prepareWACSRFTag(actionValue28, site28, serverGroup28,true)); 
      out.write("<div class=\"list-header hidden-xs\">\n<div class=\"col-sm-4 list-header-item\">");
 {out.write(localizeISText("account.punchout.configuration.table.attribute",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</div> \n<div class=\"col-sm-4 list-header-item\">");
 {out.write(localizeISText("account.punchout.configuration.table.transform",null,null,null,null,null,null,null,null,null,null,null,null));} 
 {Object temp_obj = (""); getPipelineDictionary().put("PlaceholderIDs", temp_obj);} 
 while (loop("PunchoutPlaceholderFormatterProvider:PlaceholderIds","PlaceholderID",null)) { 
 {Object temp_obj = (context.getFormattedValue(getObject("PlaceholderIDs"),null) + context.getFormattedValue("{",null) + context.getFormattedValue(getObject("PlaceholderID"),null) + context.getFormattedValue("}<br/>",null)); getPipelineDictionary().put("PlaceholderIDs", temp_obj);} 
 } 
 processOpenTag(response, pageContext, "tooltip", new TagParameter[] {
new TagParameter("placement","bottom"),
new TagParameter("linkclass","details-tooltip"),
new TagParameter("headline",localizeText(context.getFormattedValue("account.punchout.configuration.table.available.placeholder",null))),
new TagParameter("content",getObject("PlaceholderIDs")),
new TagParameter("contenttype","html")}, 27); 
      out.write("</div> \n<div class=\"col-sm-4 list-header-item\">");
 {out.write(localizeISText("account.punchout.configuration.table.format",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</div> \n</div>\n<div class=\"list-body\">");
 while (loop("Configuration:ConfigurationFieldsList","Field",null)) { 
 {Object temp_obj = (getObject("Configuration:PunchoutConfigurationDataEntry(Field)")); getPipelineDictionary().put("Entry", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("Entry:Configurable"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",37,e);}if (_boolean_result) { 
 processOpenTag(response, pageContext, "ociconfigurationrow", new TagParameter[] {
new TagParameter("FieldTransform",getObject("Entry:TransformerConfigurationString")),
new TagParameter("FieldFormat",getObject("Entry:FormatterConfigurationString")),
new TagParameter("PunchoutPlaceholderFormatterProvider",getObject("PunchoutPlaceholderFormatterProvider")),
new TagParameter("FieldName",getObject("Entry:PunchoutCatalogAttributeName"))}, 38); 
 } 
 } 
      out.write("</div>\n<div class=\"list-item-row\">\n<div class=\"col-sm-offset-4 col-sm-8\">\n<div class=\"row\">\n<button \nclass=\"btn btn-primary\" type=\"submit\" \nname=\"save\"\nvalue=\"save\" \ntitle=\"");
 {out.write(localizeISText("account.punchout.configuration.button.save","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"\ndata-testing-class=\"button-oci-punchout-configuration-submit\">");
 {out.write(localizeISText("account.punchout.configuration.button.save","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</button>\n<a class=\"btn btn-default\" \ntitle=\"");
 {out.write(localizeISText("account.punchout.configuration.button.cancel","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\"\nhref=\"");
 {String value = null;try{value=context.getFormattedValue(url(true,context.getFormattedValue(getObject("SecureURL"),null), context.getFormattedValue("",null), (new URLPipelineAction(context.getFormattedValue("ViewOCISettings-Start",null)))),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {57}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" \ndata-testing-class=\"button-oci-punchout-configuration-cancel\">");
 {out.write(localizeISText("account.punchout.configuration.button.cancel","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a>\n</div> \n</div>\n</div>");
 out.print("</form>"); 
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
