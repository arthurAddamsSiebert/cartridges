/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-16 22:40:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.app_005fsf_005fresponsive_005fb2b.default_.email.order;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class PurchaseInfo_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 {Object temp_obj = (getObject("BasketBO:Extension(\"BasketBOCostCenterExtension\")")); getPipelineDictionary().put("CostCenter", temp_obj);} 
 {Object temp_obj = (getObject("BasketBO:Extension(\"RecurringBasket\")")); getPipelineDictionary().put("RecurringBasket", temp_obj);} 
 {Object temp_obj = (getObject("RecurringBasket:isRecurring")); getPipelineDictionary().put("IsSubscription", temp_obj);} 
 {Object temp_obj = (getObject("BasketBO:PriceDisplayTypeName")); getPipelineDictionary().put("PriceDisplayTypeName", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("IsSubscription"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",8,e);}if (_boolean_result) { 
 {Object temp_obj = ("email.pending_order_confirmation.id_of_subscription.label"); getPipelineDictionary().put("DocumentNoLabelKey", temp_obj);} 
 {Object temp_obj = (getObject("RecurringBasket:RecurringOrderDocumentNo")); getPipelineDictionary().put("DocumentNo", temp_obj);} 
 } else { 
 {Object temp_obj = ("email.order_approval.id_of_order.label"); getPipelineDictionary().put("DocumentNoLabelKey", temp_obj);} 
 {Object temp_obj = (getObject("BasketBO:RequisitionDocumentNo")); getPipelineDictionary().put("DocumentNo", temp_obj);} 
 } 
      out.write("<table cellpadding=\"10\" cellspacing=\"0\" class=\"pattern\">\n<tr class=\"mobileTable\">\n<td width=\"600\" class=\"orderConfirmationBucketInfo\">\n<table cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" class=\"dataList\">\n<tr>\n<td valign=\"top\">");
 {out.write(localizeISText(context.getFormattedValue(getObject("DocumentNoLabelKey"),null),"",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td valign=\"top\">");
 {String value = null;try{value=context.getFormattedValue(getObject("DocumentNo"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {25}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>\n<tr>\n<td valign=\"top\">");
 {out.write(localizeISText("email.reject_order.order_date.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td valign=\"top\">");
 {String value = null;try{value=context.getFormattedValue(getObject("BasketBO:CreationDate"),"dd-MMM-yyyy",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {33}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>\n<tr>\n<td valign=\"top\">");
 {out.write(localizeISText("email.pending_order_confirmation.order_total.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td valign=\"top\">");
 {String value = null;try{value=context.getFormattedValue(getObject("BasketBO:BasketTotalPriceMinusLimitedTenderGross"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {41}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("ShowBuyer"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",44,e);}if (_boolean_result) { 
      out.write("<tr>\n<td valign=\"top\">");
 {out.write(localizeISText("email.order_approval.purchaser.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td valign=\"top\">");
 {String value = null;try{value=context.getFormattedValue(context.getFormattedValue(getObject("BasketBO:User:Profile:DataSheet:FirstName"),null) + context.getFormattedValue(" ",null) + context.getFormattedValue(getObject("BasketBO:User:Profile:DataSheet:LastName"),null),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {50}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>");
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("CostCenter:CostCenterBO"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",54,e);}if (_boolean_result) { 
      out.write("<tr>\n<td valign=\"top\">");
 {out.write(localizeISText("email.order_approval.cost_center.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td valign=\"top\">");
 {String value = null;try{value=context.getFormattedValue(getObject("CostCenter:CostCenterBO:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {60}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(' ');
      out.write('-');
      out.write(' ');
 {String value = null;try{value=context.getFormattedValue(getObject("CostCenter:CostCenterBO:DisplayName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {60}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>");
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("IsSubscription"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",65,e);}if (_boolean_result) { 
      out.write("<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td valign=\"top\">");
 {out.write(localizeISText("subscription.display.recurrence.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td valign=\"top\">");
 processOpenTag(response, pageContext, "perioddisplay", new TagParameter[] {
new TagParameter("period",getObject("RecurringBasket:RecurrenceInformation:Interval"))}, 75); 
      out.write("</td>\n</tr>\n<tr>\n<td valign=\"top\">");
 {out.write(localizeISText("subscription.display.start_date.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td valign=\"top\">");
 {String value = null;try{value=context.getFormattedValue(getObject("RecurringBasket:RecurrenceInformation:StartDate"),"dd-MMM-yyyy",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {83}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>\n<tr>\n<td valign=\"top\">");
 {out.write(localizeISText("subscription.display.end_date.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td valign=\"top\">");
 {String value = null;try{value=context.getFormattedValue(getObject("RecurringBasket:RecurrenceInformation:EndDate"),"dd-MMM-yyyy",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {91}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>");
 } 
      out.write("</table>\n</td>\n</tr>\n</table>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
