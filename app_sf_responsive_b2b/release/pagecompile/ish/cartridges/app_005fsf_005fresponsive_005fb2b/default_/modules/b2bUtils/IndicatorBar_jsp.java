/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-16 22:40:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.app_005fsf_005fresponsive_005fb2b.default_.modules.b2bUtils;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class IndicatorBar_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("Addition"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",3,e);}if (_boolean_result) { 
 {Object temp_obj = ((new Double( ((Number) getObject("Comparison:Value")).doubleValue() +((Number) getObject("Addition:Value")).doubleValue()))); getPipelineDictionary().put("MAX", temp_obj);} 
 } else { 
 {Object temp_obj = (getObject("Comparison:Value")); getPipelineDictionary().put("MAX", temp_obj);} 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("MAX")).doubleValue() >((Number)(getObject("Limit:Value"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",9,e);}if (_boolean_result) { 
 {Object temp_obj = (new Double(100)); getPipelineDictionary().put("PERCENT", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("Addition"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",13,e);}if (_boolean_result) { 
 {Object temp_obj = (((new Double( ((Number) getObject("Addition:Value")).doubleValue() / ((Number) getObject("MAX")).doubleValue() *((Number) new Double(100)).doubleValue())))); getPipelineDictionary().put("ADDITION_PERCENT", temp_obj);} 
 {Object temp_obj = ((new Double( ((Number) new Double(100)).doubleValue() -((Number) getObject("ADDITION_PERCENT")).doubleValue()))); getPipelineDictionary().put("PERCENT", temp_obj);} 
 } 
 {Object temp_obj = (getObject("PERCENT")); getPipelineDictionary().put("WIDTH", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("Comparison:Value")).doubleValue() >((Number)(getObject("Limit:Value"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",20,e);}if (_boolean_result) { 
 {Object temp_obj = ("progress-bar-danger"); getPipelineDictionary().put("COLOR", temp_obj);} 
 {Object temp_obj = ("opacity: 0.80;"); getPipelineDictionary().put("ADDITION_OPACITY", temp_obj);} 
 } else { 
 {Object temp_obj = ("progress-bar-success"); getPipelineDictionary().put("COLOR", temp_obj);} 
 } 
 {Object temp_obj = ("progress-bar-danger"); getPipelineDictionary().put("ADDITION_COLOR", temp_obj);} 
 {Object temp_obj = (((new Double( ((Number) getObject("Limit:Value")).doubleValue() / ((Number) getObject("MAX")).doubleValue() *((Number) new Double(100)).doubleValue())))); getPipelineDictionary().put("OVERFLOW", temp_obj);} 
 } else { 
 {Object temp_obj = (((new Double( ((Number) getObject("Comparison:Value")).doubleValue() / ((Number) getObject("Limit:Value")).doubleValue() *((Number) new Double(100)).doubleValue())))); getPipelineDictionary().put("PERCENT", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("Addition"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",34,e);}if (_boolean_result) { 
 {Object temp_obj = (((new Double( ((Number) getObject("Addition:Value")).doubleValue() / ((Number) getObject("Limit:Value")).doubleValue() *((Number) new Double(100)).doubleValue())))); getPipelineDictionary().put("ADDITION_PERCENT", temp_obj);} 
 {Object temp_obj = ("progress-bar-warning"); getPipelineDictionary().put("ADDITION_COLOR", temp_obj);} 
 } 
 {Object temp_obj = (getObject("PERCENT")); getPipelineDictionary().put("WIDTH", temp_obj);} 
 {Object temp_obj = ("progress-bar-success"); getPipelineDictionary().put("COLOR", temp_obj);} 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("MAX")).doubleValue() >((Number)(getObject("Limit:Value"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",45,e);}if (_boolean_result) { 
      out.write("<div class=\"progress-overflow\">\n<div class=\"progress-overflow-indicator\" style=\"width: ");
 {String value = null;try{value=context.getFormattedValue(getObject("OVERFLOW"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {47}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("%;\">\n<span class=\"overflow-display\">");
 {String value = null;try{value=context.getFormattedValue(getObject("OVERFLOW"),"#.#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {48}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("%</span>\n</div>\n</div>");
 } 
      out.write("<div class=\"progress\">\n<div class=\"progress-bar ");
 {String value = null;try{value=context.getFormattedValue(getObject("COLOR"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {54}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" role=\"progressbar\"\naria-valuenow=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PERCENT"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {55}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nstyle=\"width: ");
 {String value = null;try{value=context.getFormattedValue(getObject("WIDTH"),null,"DecimalSeparator=.");}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {56}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("%;\"\naria-valuemin=\"0\" aria-valuemax=\"100\"\n>\n<span class=\"progress-display\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Comparison"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {59}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</span>\n</div>");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ADDITION_PERCENT"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",61,e);}if (_boolean_result) { 
      out.write("<div class=\"progress-bar ");
 {String value = null;try{value=context.getFormattedValue(getObject("ADDITION_COLOR"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {62}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" role=\"progressbar\"\naria-valuenow=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ADDITION_PERCENT"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {63}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nstyle=\"width: ");
 {String value = null;try{value=context.getFormattedValue(getObject("ADDITION_PERCENT"),null,"DecimalSeparator=.");}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {64}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('%');
      out.write(';');
 {String value = null;try{value=context.getFormattedValue(getObject("ADDITION_OPACITY"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {64}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\naria-valuemin=\"0\" aria-valuemax=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ADDITION_PERCENT"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {65}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\n>\n<span class=\"progress-display\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Addition"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {67}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</span>\n</div>");
 } 
      out.write("</div>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
