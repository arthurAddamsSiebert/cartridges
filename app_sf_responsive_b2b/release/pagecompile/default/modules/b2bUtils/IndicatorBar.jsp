<%@  page buffer="none" import="java.util.*,java.io.*,com.intershop.beehive.core.internal.template.*,com.intershop.beehive.core.internal.template.isml.*,com.intershop.beehive.core.capi.log.*,com.intershop.beehive.core.capi.resource.*,com.intershop.beehive.core.capi.util.UUIDMgr,com.intershop.beehive.core.capi.util.XMLHelper,com.intershop.beehive.foundation.util.*,com.intershop.beehive.core.internal.url.*,com.intershop.beehive.core.internal.resource.*,com.intershop.beehive.core.internal.wsrp.*,com.intershop.beehive.core.capi.pipeline.PipelineDictionary,com.intershop.beehive.core.capi.naming.NamingMgr,com.intershop.beehive.core.capi.pagecache.PageCacheMgr,com.intershop.beehive.core.capi.request.SessionMgr,com.intershop.beehive.core.internal.request.SessionMgrImpl,com.intershop.beehive.core.pipelet.PipelineConstants" extends="com.intershop.beehive.core.internal.template.AbstractTemplate" %><% 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 %><% %><%@ page contentType="text/html;charset=utf-8" %><%setEncodingType("text/html"); %><% _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("Addition"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",3,e);}if (_boolean_result) { %><% {Object temp_obj = ((new Double( ((Number) getObject("Comparison:Value")).doubleValue() +((Number) getObject("Addition:Value")).doubleValue()))); getPipelineDictionary().put("MAX", temp_obj);} %><% } else { %><% {Object temp_obj = (getObject("Comparison:Value")); getPipelineDictionary().put("MAX", temp_obj);} %><% } %><% _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("MAX")).doubleValue() >((Number)(getObject("Limit:Value"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",9,e);}if (_boolean_result) { %><% {Object temp_obj = (new Double(100)); getPipelineDictionary().put("PERCENT", temp_obj);} %><% _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("Addition"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",13,e);}if (_boolean_result) { %><% {Object temp_obj = (((new Double( ((Number) getObject("Addition:Value")).doubleValue() / ((Number) getObject("MAX")).doubleValue() *((Number) new Double(100)).doubleValue())))); getPipelineDictionary().put("ADDITION_PERCENT", temp_obj);} %><% {Object temp_obj = ((new Double( ((Number) new Double(100)).doubleValue() -((Number) getObject("ADDITION_PERCENT")).doubleValue()))); getPipelineDictionary().put("PERCENT", temp_obj);} %><% } %><% {Object temp_obj = (getObject("PERCENT")); getPipelineDictionary().put("WIDTH", temp_obj);} %><% _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("Comparison:Value")).doubleValue() >((Number)(getObject("Limit:Value"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",20,e);}if (_boolean_result) { %><% {Object temp_obj = ("progress-bar-danger"); getPipelineDictionary().put("COLOR", temp_obj);} %><% {Object temp_obj = ("opacity: 0.80;"); getPipelineDictionary().put("ADDITION_OPACITY", temp_obj);} %><% } else { %><% {Object temp_obj = ("progress-bar-success"); getPipelineDictionary().put("COLOR", temp_obj);} %><% } %><% {Object temp_obj = ("progress-bar-danger"); getPipelineDictionary().put("ADDITION_COLOR", temp_obj);} %><% {Object temp_obj = (((new Double( ((Number) getObject("Limit:Value")).doubleValue() / ((Number) getObject("MAX")).doubleValue() *((Number) new Double(100)).doubleValue())))); getPipelineDictionary().put("OVERFLOW", temp_obj);} %><% } else { %><% {Object temp_obj = (((new Double( ((Number) getObject("Comparison:Value")).doubleValue() / ((Number) getObject("Limit:Value")).doubleValue() *((Number) new Double(100)).doubleValue())))); getPipelineDictionary().put("PERCENT", temp_obj);} %><% _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("Addition"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",34,e);}if (_boolean_result) { %><% {Object temp_obj = (((new Double( ((Number) getObject("Addition:Value")).doubleValue() / ((Number) getObject("Limit:Value")).doubleValue() *((Number) new Double(100)).doubleValue())))); getPipelineDictionary().put("ADDITION_PERCENT", temp_obj);} %><% {Object temp_obj = ("progress-bar-warning"); getPipelineDictionary().put("ADDITION_COLOR", temp_obj);} %><% } %><% {Object temp_obj = (getObject("PERCENT")); getPipelineDictionary().put("WIDTH", temp_obj);} %><% {Object temp_obj = ("progress-bar-success"); getPipelineDictionary().put("COLOR", temp_obj);} %><% } %><% _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("MAX")).doubleValue() >((Number)(getObject("Limit:Value"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",45,e);}if (_boolean_result) { %><div class="progress-overflow">
<div class="progress-overflow-indicator" style="width: <% {String value = null;try{value=context.getFormattedValue(getObject("OVERFLOW"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {47}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>%;">
<span class="overflow-display"><% {String value = null;try{value=context.getFormattedValue(getObject("OVERFLOW"),"#.#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {48}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>%</span>
</div>
</div><% } %><div class="progress">
<div class="progress-bar <% {String value = null;try{value=context.getFormattedValue(getObject("COLOR"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {54}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>" role="progressbar"
aria-valuenow="<% {String value = null;try{value=context.getFormattedValue(getObject("PERCENT"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {55}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>"
style="width: <% {String value = null;try{value=context.getFormattedValue(getObject("WIDTH"),null,"DecimalSeparator=.");}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {56}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>%;"
aria-valuemin="0" aria-valuemax="100"
>
<span class="progress-display"><% {String value = null;try{value=context.getFormattedValue(getObject("Comparison"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {59}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %></span>
</div><% _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ADDITION_PERCENT"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",61,e);}if (_boolean_result) { %><div class="progress-bar <% {String value = null;try{value=context.getFormattedValue(getObject("ADDITION_COLOR"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {62}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>" role="progressbar"
aria-valuenow="<% {String value = null;try{value=context.getFormattedValue(getObject("ADDITION_PERCENT"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {63}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>"
style="width: <% {String value = null;try{value=context.getFormattedValue(getObject("ADDITION_PERCENT"),null,"DecimalSeparator=.");}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {64}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>%;<% {String value = null;try{value=context.getFormattedValue(getObject("ADDITION_OPACITY"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {64}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>"
aria-valuemin="0" aria-valuemax="<% {String value = null;try{value=context.getFormattedValue(getObject("ADDITION_PERCENT"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {65}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %>"
>
<span class="progress-display"><% {String value = null;try{value=context.getFormattedValue(getObject("Addition"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {67}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} %></span>
</div><% } %></div><% printFooter(out); %>