import "enfinity:/btc/edl/com/intershop/beehive/btc/internal/tax/TaxJurisdictionPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.btc.internal.tax
{
    /*
     * TaxJurisdictionMapping (mapping) provides a mapping between country and state to a TaxJurisdiction.
     * 
     * <br>Mappings are domain dependent. The lookup  mechanism occurs on 2 levels:
     * <br>1. State level: Find a mapping for country 'x' and state 'y'
     * <br>2. Country level: if 1. fails, find a mapping for country 'x' and state '-'
     */
    oca timestamp orm class JurisdictionMappingPO
    {
    	/*
    	 * @mssql-hint(NONCLUSTERED)
    	 */
        primary key(country, state, domainID);

        index(taxJurisdictionID);

        index(domainID);

        /*
         * country and state maps to the jurisdiction with taxJurisdictionID
         */
        attribute taxJurisdictionID : uuid required;

        /*
         * the country will be used to map an buyer to a tax jurisdiction (in conjunction  with state, if state is not null) via an address (usually invoice-to-address). If state is NULL the assignment will be processed by country only.
         * Null values will be not allowed.
         */
        attribute country : string<256> required;

        /*
         * the state will be used to map an address to a tax jurisdiction().
         * the state will be used to map an buyer to a tax jurisdiction (in conjunction with country) via an address (usually invoice-to-address). Null values will be allowed. If the state is NULL the cartridge maps by the country only.
         */
        attribute state : string<256> required;

        attribute domainID : uuid required searchable;

        dependency taxJurisdiction : TaxJurisdictionPO
        {
            foreign key(taxJurisdictionID);
        }

        dependency domain : Domain handler "com.intershop.beehive.core.capi.domain.DomainMgr"
        {
            foreign key(domainID);
        }
    }
}
