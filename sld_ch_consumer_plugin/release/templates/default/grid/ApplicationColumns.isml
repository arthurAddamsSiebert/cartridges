<!---isnoloc--->
<iscontent type="text/javascript" charset="UTF-8" compact="true" templatemarker="false">
<!--- get grid parameters from configuration --->
<isif condition="#isDefined(configuration) AND isDefined(currentapplication)#">
	<!--- get column names for this grid --->
	<isset scope="request" name="configColumns" value="#config.'.columns'#">
	<isset scope="request" name="columns" value="#"'".replace(currentapplication:Configuration:String(configColumns), " ", "', '")."'"#">
	<isif condition="#columns EQ '\'\''#"><isset scope="request" name="columns" value=""></isif>
</isif>

(function () {
	var allColumns = {
		<isif condition="#isDefined(params:UserPermissionForEdit)#">
			<!--- select column is only available if the current user has the correct permission --->
			select: {
				type: 'select',
				dataKey: 'uuid',
				selectedItemsName: '<isprint value="#params:SelectedItemsName#">',
				availableItemsName: '<isprint value="#params:AvailableItemsName#">'
			},
		</isif>
			name: {
				type: 'text',
				dataKey: 'name',
				title: '<istext key="ApplicationColumns.Name" encoding="off"/>',
				sortable: true
			},
			typecode: {
				type: 'text',
				dataKey: 'typeCode',
				title: '<istext key="ApplicationColumns.Type" encoding="off"/>',
				sortable: true
			},
			urlidentifier: {
				type: 'text',
				dataKey: 'urlIdentifier',
				title: '<istext key="ApplicationColumns.URLIdentifier" encoding="off"/>',
				sortable: false
			},
			description: {
				type: 'text',
				dataKey: 'description',
				title: '<istext key="ApplicationColumns.Description" encoding="off"/>',
				sortable: false
			},
			enabled: {
				type: 'status',
				dataKey: 'enabled',
				title: '<istext key="Enabled" encoding="off"/>',
				sortable: false,
				width: 120,
				maxWidth: 120,
				render: function render(args) {
					var result = [], row = args.row;

					if (row.isEnabled) {
						result.push('<img src="#WebRoot()#/images/check.png" alt="<istext key="Enabled" encoding="off"/>" title="<istext key="Enabled" encoding="off"/>" border="0" />&nbsp;');
					}

					return result.join('');
				}
			}
		},
		names = [<isprint encoding="off" value="#columns#">],
		useAll = names.length === 0,
		columns = [],
		name, column;
		
		function indexOf(list, element) {
			if (list.indexOf) {
				return list.indexOf(element);
			}
			for (var i = 0, len = list.length; i < len; i++) {
				if (list[i] === element) {
					return i;
				}
			}
			return -1;
		}
		
		for (name in allColumns) {
			if (!allColumns.hasOwnProperty(name)) continue;
			
			var column = allColumns[name];
			column.id = name;
		
			// check if column configuration is provided
			if (useAll) {
				// no column configuration
				columns.push(column);
			} else {
				// check if column is needed
				if (indexOf(names, name) !== -1) {
					columns.push(column);
				}
			}
		}
		
		return columns;

})()
<!---/isnoloc--->