import "enfinity:/bc_foundation/edl/com/intershop/component/foundation/capi/syndication/SyndicationDataDeclarationList.edl";
import "enfinity:/bc_foundation/edl/com/intershop/component/foundation/capi/syndication/SyndicationRuleSet.edl";
import "enfinity:/bc_foundation/edl/com/intershop/component/foundation/capi/syndication/SyndicationTarget.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/job/JobConfiguration.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/user/UserGroup.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external File type "java.io.File";

namespace com.intershop.component.foundation.capi.syndication
{
    /*
     * This interface acts as a central storage and access point for all data relevant to execute an outbound syndication process. It inherits the functionality to realize the time schedule of outbound syndication processes directly from <code>JobConfiguration</code>.
     * 
     * @see com.intershop.component.foundation.capi.syndication.OutboundSyndicationMgr
     * @see com.intershop.beehive.core.capi.job.JobConfiguration
     */
    cartridge interface Syndication extends ExtensibleObject
    {
        attribute displayName : string localized;

        attribute description : string localized;

        attribute ID : string required;

        attribute enabled : boolean;

        attribute targetID : string required;

        relation target : SyndicationTarget[0..1];

        relation jobConfiguration : JobConfiguration[0..1];

        relation dataDeclarationLists : SyndicationDataDeclarationList[0..n] readonly;

        relation ruleSets : SyndicationRuleSet[0..n] readonly;

        relation assignedUserGroups : UserGroup[0..n] readonly;

        operation getSyndicationRuleSet(name : string) : SyndicationRuleSet;

        operation getSyndicationDataDeclarationList(name : string) : SyndicationDataDeclarationList;

        operation getFile() : File;

        operation getFileExists() : boolean;
    }
}
