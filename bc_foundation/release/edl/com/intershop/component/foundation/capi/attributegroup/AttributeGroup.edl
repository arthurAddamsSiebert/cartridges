import "enfinity:/bc_foundation/edl/com/intershop/component/foundation/capi/attributegroup/AttributeDescriptor.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.component.foundation.capi.attributegroup
{
    /*
     * Attribute groups and attribute descriptors allow to define a meta-model for standard and custom object attributes. This meta-model can be used to define localized display names for object attributes or simply group them.
     */
    cartridge interface AttributeGroup extends ExtensibleObject
    {
        /*
         * The type code can be used to distinguish between several types of attribute groups, i.e. product and category attribute groups.
         */
        attribute typeCode : int required;

        /*
         * The domain-specific, unique ID of an attribute group.
         */
        attribute ID : string required;

        /*
         * The fixed flag is used to distinguish between attribute groups that can be deleted and system attribute groups that cannot be deleted.
         */
        attribute fixed : boolean required;

        /*
         * The localized display name mainly used for visualization purposes.
         */
        attribute displayName : string required localized;

        /*
         * The localized description mainly used for visualization purposes.
         */
        attribute description : string required localized;

        /*
         * Each attribute group holds a set of attribute descriptors that describe the attributes contained in this group.
         */
        relation AttributeDescriptors : AttributeDescriptor[0..n] readonly;

        /*
         * Gets an attribute descriptor by ID.
         * 
         * @return the attribute descriptor or null, if no attribute descriptor found for passed ID
         */
        operation getAttributeDescriptor(id : string) : AttributeDescriptor;

        /*
         * Creates a sorted iteration of all associated attribute descriptors. The attribute descriptors are sorted by their position attribute in ascending order.
         * 
         * @return a sorted iteration of attribute descriptors
         */
        operation createSortedAttributeDescriptorsIterator() : Iterator;
    }
}
