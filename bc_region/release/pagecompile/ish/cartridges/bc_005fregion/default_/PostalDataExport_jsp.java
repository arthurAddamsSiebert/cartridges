/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-07 18:10:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.bc_005fregion.default_;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.core.capi.domain.*;
import com.intershop.component.region.capi.geoobject.*;
import com.intershop.beehive.foundation.util.*;
import java.util.*;

public final class PostalDataExport_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

 protected Boolean printTemplateMarker() { return Boolean.FALSE; } 
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 


setEncodingType("text/xml"); 
      out.write("\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\t\n");
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"impex/Modules", null, "8");} 
      out.write('\n');
 context.setCustomTagTemplateName("customattributes","inc/CustomAttributes",false,new String[]{"attributes"},null); 
      out.write("\n\t\n\t\n<enfinity \n\txmlns=\"http://www.intershop.com/xml/ns/enfinity/6.5/bc_region/impex\" \n\txmlns:dt=\"http://www.intershop.com/xml/ns/enfinity/6.5/core/impex-dt\" \n\txmlns:xml=\"http://www.w3.org/XML/1998/namespace\" \n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n\txsi:schemaLocation=\"http://www.intershop.com/xml/ns/enfinity/6.5/bc_region/impex bc_region.xsd \">\n\n\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("AllCountries"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",21,e);}if (_boolean_result) { 
      out.write('\n');
      out.write('	');
      out.write('	');

			Iterator countriesItr = (Iterator)getObject("AllCountries");
						
			if(countriesItr.hasNext())
			{
				while (countriesItr.hasNext())
				{
					Country country = (Country)countriesItr.next();
					getPipelineDictionary().put("country", country);
					getPipelineDictionary().put("countryCustomAttributes", new com.intershop.beehive.core.capi.impex.AttributeValueIterator(country.createCustomAttributesIterator(), country));
					
      out.write("\n\t\t\t\t\t<country>\n\t\t\t\t\t<id>");
 {String value = null;try{value=context.getFormattedValue(getObject("country:Id"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {34}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</id>\n\t\t\t\t\t");
 processOpenTag(response, pageContext, "customattributes", new TagParameter[] {
new TagParameter("attributes",getObject("countryCustomAttributes"))}, 35); 
      out.write("\n\t\t\t\t\t</country>\n\t\t\t\t\t");

				}
			}
		
      out.write('\n');
      out.write('	');
 } 
      out.write("\n\t\n\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("StatesProvinces"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",43,e);}if (_boolean_result) { 
      out.write('\n');
      out.write('	');
      out.write('	');

			Iterator statesProvincesItr = (Iterator)getObject("StatesProvinces");
						
			if(statesProvincesItr.hasNext())
			{
				while (statesProvincesItr.hasNext())
				{
					StateProvince stateProvince = (StateProvince)statesProvincesItr.next();
					getPipelineDictionary().put("stateProvince", stateProvince);
					getPipelineDictionary().put("stateProvinceCustomAttributes", new com.intershop.beehive.core.capi.impex.AttributeValueIterator(stateProvince.createCustomAttributesIterator(), stateProvince));
					
      out.write("\n\t\t\t\t\t<state-province>\n\t\t\t\t\t<id>");
 {String value = null;try{value=context.getFormattedValue(getObject("stateProvince:Id"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {56}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</id>\n\t\t\t\t\t<country-id>");
 {String value = null;try{value=context.getFormattedValue(getObject("stateProvince:Country:Id"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {57}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</country-id>\n\t\t\t\t\t");
 processOpenTag(response, pageContext, "customattributes", new TagParameter[] {
new TagParameter("attributes",getObject("stateProvinceCustomAttributes"))}, 58); 
      out.write("\n\t\t\t\t\t</state-province>\n\t\t\t\t\t");

				}
			}
		
      out.write('\n');
      out.write('	');
 } 
      out.write('\n');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("Locations"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",65,e);}if (_boolean_result) { 
      out.write('\n');
      out.write('	');
      out.write('	');

			Iterator locationsItr = (Iterator)getObject("Locations");
						
			if(locationsItr.hasNext())
			{
				while (locationsItr.hasNext())
				{
					Location location = (Location)locationsItr.next();
					getPipelineDictionary().put("location", location);
					getPipelineDictionary().put("locationCustomAttributes", new com.intershop.beehive.core.capi.impex.AttributeValueIterator(location.createCustomAttributesIterator(), location));
					
      out.write("\n\t\t\t\t\t<location>\n\t\t\t\t\t<id>");
 {String value = null;try{value=context.getFormattedValue(getObject("location:Id"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {78}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</id>\n\t\t\t\t\t<postal-code>");
 {String value = null;try{value=context.getFormattedValue(getObject("location:PostalCode"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {79}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</postal-code>\n\t\t\t\t\t<state-province-id>");
 {String value = null;try{value=context.getFormattedValue(getObject("location:StateProvince:Id"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {80}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</state-province-id>\n\t\t\t\t\t<country-id>");
 {String value = null;try{value=context.getFormattedValue(getObject("location:Country:Id"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {81}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</country-id>\n\t\t\t\t\t");
 processOpenTag(response, pageContext, "customattributes", new TagParameter[] {
new TagParameter("attributes",getObject("locationCustomAttributes"))}, 82); 
      out.write("\n\t\t\t\t\t</location>\t\t\n\t\t\t\t\t");

				}
			}
		
      out.write('\n');
      out.write('	');
 } 
      out.write("\n\t\n\t\n\t\n\t\n\t\n</enfinity>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
