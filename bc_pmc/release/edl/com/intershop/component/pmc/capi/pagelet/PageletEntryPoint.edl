import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/ConfigurationParameterCtnr.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external ContentEntryPoint type "com.intershop.component.pmc.capi.pagelet.ContentEntryPoint<PageletEntryPoint>";
external Describable type "com.intershop.beehive.core.capi.util.Describable";
external Nameable type "com.intershop.beehive.core.capi.util.Nameable";
external PageletEntryPointCollection type "java.util.Collection<? extends PageletEntryPoint>";
external PageletModelRepository type "com.intershop.component.pmc.capi.model.PageletModelRepository";

namespace com.intershop.component.pmc.capi.pagelet
{
    cartridge interface PageletEntryPoint extends ConfigurationParameterCtnr, ContentEntryPoint, Nameable, Describable
    {
        /*
         * The ID of a pagelet entry point instance has to be unique per domain. Both together constitute the semantic key of pagelet entry point instances which is necessary to make them suitable for import and export
         */
        attribute id : string required readonly;

        /*
         * A localizable attribute to provide pagelet entry point instances with a meaningful name in the back office.
         */
        attribute displayName : string localized;

        /*
         * This flag indicates which kind of pagelets can be assigned to a pagelet entry point instance, pages or components. The page flags of both, a pagelet entry point and a pagelet assigned to it, have to have the same value.
         */
        attribute page : boolean readonly;

        /*
         * This flag can be used to designate between static and dynamic content entry points. A static entry point cannot be created in the back office whereas a dynamic entry point are supposed to be manageable by content editors 
         */
        attribute dynamic : boolean readonly;
        
        /*
         * A localizable attribute to provide pagelet entry points with a meaningful description in the back office.
         */
        attribute description : string localized;
        
        /*
         * This flag indicates whether a pagelet entry point instance can be modified in a sharing scenario or not. If set to true it is possible to assign pagelets in a sharing context to the pagelet entry point.
         */
        attribute readOnly : boolean;
        
        /*
         * Indicates whether this pagelet entry point has a parent pagelet entry point in one of the domains being part of 
         * the content sharing path leading up to the given domain.
         * <p>The possible parent of this entry point is filtered by the application context of the caller. If the caller wants 
         * a different filter to be applied, then use operation {@link #hasParent(Domain, PageletModelRepository)} instead of this.
         * @deprecated use {@link #hasParent(Domain, PageletModelRepository)}
         */
        operation hasParent(domain : Domain) : boolean;

        /*
         * Indicates whether this pagelet entry point has a parent pagelet entry point in one of the domains being part of 
         * the content sharing path leading up to the given domain.
         * @param domain the context domain from which to search for parents of this entry point
         * @param pageletModelRepository the parent for this entry point is filtered against this model repository; i.e. the parents definition must be contained
         */
        operation hasParent(domain : Domain, pageletModelRepository : PageletModelRepository) : boolean;
        
        /*
         * Returns the parent pagelet entry point of this entry point residing in one of the domains being part of the
         * content sharing path leading up to the given domain. The path is traversed backwards and the pagelet entry point
         * first found will be returned.
         * <p>The parent of this entry point is filtered by the application context of the caller. If the caller wants a different 
         * filter to be applied, then use operation {@link #getParentPageletEntryPoint(Domain, PageletModelRepository)} instead of this.
         * @deprecated use {@link #getParentPageletEntryPoint(Domain, PageletModelRepository)}
         */
        operation getParentPageletEntryPoint(domain : Domain) : PageletEntryPoint;
        
        /*
         * Returns the parent pagelet entry point of this entry point residing in one of the domains being part of the
         * content sharing path leading up to the given domain. The path is traversed backwards and the pagelet entry point
         * first found will be returned.
         * @param domain the context domain from which to search for parents of this entry point
         * @param pageletModelRepository the parent for this entry point is filtered against this model repository; i.e. the parents definition must be contained
         */
        operation getParentPageletEntryPoint(domain : Domain, pageletModelRepository : PageletModelRepository) : PageletEntryPoint;

        /*
         * Indicates whether this pagelet entry point has any sub pagelet entry points stored in one of the domains being part
         * of the content sharing path leading up to the given domain.
         * <p>All children of this entry point are filtered by the application context of the caller. If the caller wants a different 
         * filter to be applied, then use operation {@link #hasSubPageletEntryPoints(Domain, PageletModelRepository)} instead of this.
         * @deprecated use {@link #hasSubPageletEntryPoints(Domain, PageletModelRepository)}
         */
        operation hasSubPageletEntryPoints(domain : Domain) : boolean;
        
        /*
         * Indicates whether this pagelet entry point has any sub pagelet entry points stored in one of the domains being part
         * of the content sharing path leading up to the given domain.
         * 
         * @param domain the context domain from which to search for children of this entry point
         * @param pageletModelRepository all children found for this entry point are filtered against this model repository; i.e. their definitions must be contained
         */
        operation hasSubPageletEntryPoints(domain : Domain, pageletModelRepository : PageletModelRepository) : boolean;

        /*
         * Returns a collection containing all pagelet entry points that are children of this entry point and are stored in one of the
         * domains being part of the content sharing path leading up to the given domain. The pagelet entry points are grouped according
         * their domains and the groups are sorted according to the content sharing path in reverse order.
         * <p>All children of this entry point are filtered by the application context of the caller. If the caller wants a different 
         * filter to be applied, then use operation {@link #getSubPageletEntryPoints(Domain, PageletModelRepository)} instead of this.
         * @deprecated use {@link #getSubPageletEntryPoints(Domain, PageletModelRepository)}
         */
        operation getSubPageletEntryPoints(domain : Domain) : PageletEntryPointCollection;
        
        /*
         * Returns a collection containing all pagelet entry points that are children of this entry point and are stored in one of the
         * domains being part of the content sharing path leading up to the given domain. The pagelet entry points are grouped according
         * their domains and the groups are sorted according to the content sharing path in reverse order.
         * 
         * @param domain the context domain from which to search for children of this entry point
         * @param pageletModelRepository all children found for this entry point are filtered against this model repository; i.e. their definitions must be contained
         */
        operation getSubPageletEntryPoints(domain : Domain, pageletModelRepository : PageletModelRepository) : PageletEntryPointCollection;
    }
}