import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/Pagelet.edl";
import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/PlaceholderDefinition.edl";
import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/ConfigurationParameterCtnr.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external PersistentObject type "com.intershop.beehive.core.capi.domain.PersistentObject";
external ContentEntryPoint type "com.intershop.component.pmc.capi.pagelet.ContentEntryPoint<Placeholder>";
external OverrideDefinitionCollection type "java.util.Collection<? extends OverrideDefinition>";

namespace com.intershop.component.pmc.capi.pagelet
{
    /*
     * Placeholders are the constituent parts of what is called the interface of a content template.
     * They are usually wired to a certain point at the inner structure of a content template and as such serve as
     * extension points to the outside world where consumers of content templates may plug-in their specific additions.
     */
    cartridge interface Placeholder extends PersistentObject, ContentEntryPoint
    {
        /*
         * If a placeholder is mapped to a slot or another placeholder, this flag indicates whether the pagelets coming
         * with the target placeholder or slot shall be placed above or beneath the ones directly assigned to the 
         * placeholder when it is displayed in the storefront. The default value is false.
         */
        attribute placeTargetContentOnTop : boolean;
        
        /*
         * If the placeholder is mapped to a slot or another placeholder, this flag indicates whether the pagelets coming 
         * with the target placeholder or slot shall be switched off when it is displayed in the storefront. 
         * The default value is false.
         */
        attribute hideTargetContent : boolean;
    
	    /*
	     * A reference to the template instance which owns the placeholder. 
	     */
        relation template : Pagelet[0..1] readonly;
        
        /*
         * A reference to the placeholder definition of which this placeholder is an instance of. 
         */
        relation targetPlaceholderDefinition : PlaceholderDefinition[0..1] readonly;
        
        /*
         * A reference to the placeholder definition which maps the contents of this placeholder
         * to the outside. The owning template of the returned placeholder definition must be  
         * identical to the owning template of this placeholder.
         */
        relation sourcePlaceholderDefinition : PlaceholderDefinition[0..1] readonly;
		
        /*
         * Returns the ID from the PlaceholderDefinition.
         */
		operation getId() : String;

		/*
		 * Returns the DisplayName from the PlaceholderDefinition
		 */
		operation getDisplayName() : String;

		/*
		 * Returns the Description from the PlaceholderDefinition
		 */
		operation getDescription() : String;

		/*
		 * Answers with {@code true} if this placeholder represents a domain specific override 
		 * of some other {@link Slot} or placeholder owned by some other related domain.
		 * @since ICM 7.7, f_content 11.0.0
		 */
		operation isOverride(): boolean;

		/*
		 * Answers with a collection of {@link OverridingDefinition} objects that formally define
		 * all existing (domain) specific overrides of this placeholder here.
		 * @since ICM 7.7, f_content 11.0.0
		 */
		operation getSourceOverridingDefinitions(): OverrideDefinitionCollection;
    }

}
