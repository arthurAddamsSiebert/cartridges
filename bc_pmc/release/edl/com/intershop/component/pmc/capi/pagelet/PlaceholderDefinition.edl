import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/Pagelet.edl";
import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/Slot.edl";
import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/Placeholder.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external Describable type "com.intershop.beehive.core.capi.util.Describable";
external Domain type "com.intershop.beehive.core.capi.domain.Domain";
external Nameable type "com.intershop.beehive.core.capi.util.Nameable";
external Positionable type "com.intershop.beehive.core.capi.util.Positionable";

namespace com.intershop.component.pmc.capi.pagelet
{
    /*
     * The definition for a placeholder.
     */
    cartridge interface PlaceholderDefinition extends ExtensibleObject, Nameable, Describable, Positionable
    {    
        /*
         * The qualified name from the slot.
         */
        attribute definitionQualifiedName : string required readonly;
        
        /*
         * Resource set identifier part of the pagelet definition 
         */
        attribute resourceSetId: string required readonly;

        /*
         * An ID which has to be unique within the scope of the owning template.
         */
        attribute id : string required readonly;
        
        /*
         * The localizable display name of the placeholder to be used in the back office.
         */
        attribute displayName : string localized;
        
        /*
         * The localizable description of the placeholder to be used in the back office.
         */
        attribute description : string localized;
        
        
        attribute position : double required;
        
	    /*
	     * A reference to the template instance which owns the placeholder. 
	     */
        relation template : Pagelet[0..1] readonly;

	    /*
	     * A reference to the target slot instance the placeholder definition refers to. 
	     */
		relation targetSlot : Slot[0..1];

        /*
         * A reference to the target placeholder. 
         * It may be null as long as the placeholder definition is not mapped to any target.
         * <p>
         * Be sure to pass only values of {@link com.intershop.component.pmc.capi.pagelet.template.overriding.NoneOverridingPlaceholder}
         * to {@link #setTargetPlaceholder} 
         */
        relation targetPlaceholder : Placeholder[0..1];

		/*
         * Returns the associated SlotDefinition of this placeholder definition instance.
		 */
		operation getSlotDefinition() : SlotDefinition;

		/*
		 * Returns true when the target placeholder is mapped to another placeholder or a slot and false otherwise.
		 */
		operation isMapped() : boolean;

		/*
		 * Returns true when the target placeholder is mapped to another placeholder or a slot and false otherwise.
		 * 
		 * @since ICM 7.7, f_content 11.0.0
		 */
		operation isMapped(domain : Domain) : boolean;

		/*
		 * This method indicates if a placeholder maps to a slot.
		 */		
		operation isMappedToSlot() : boolean;
		
		/*
		 * This method indicates whether the target placeholder is mapped to a placeholder which is part of the 
		 * outbound interface of its parent template.
		 */
		operation isMappedToParentPlaceholder() : boolean;
		
		/*
		 * This method indicates whether the target placeholder is mapped to a placeholder visible in its context 
		 * by either a slot pagelet assignment or a pagelet placeholder assignment. 
		 * In both cases, the binding target is part of the outbound interface of the object taking up the to role 
		 * within the assignment.
		 */
		operation isMappedToAssignmentPlaceholder() : boolean;
		
		/*
		 * This method indicates whether the target placeholder is mapped to a placeholder which is part of the 
		 * outbound interface of its parent template.
		 */
		operation isMappedToSlotPlaceholder() : boolean;
		
		/*
		 * @since ICM 7.7, f_content 11.0.0
		 */
		operation isMappedToOverridingPlaceholder(domain : Domain) : boolean;
		
        /*
         * Returns <code>true</code> if it is is an overriding placeholder definition in a sharing context.
         * @since ICM 7.7, f_content 11.0.0  
         */
        operation isOverride(): boolean;
        
        /*
         * Returns an overriding placeholder if it exists in the given context domain. 
         * Otherwise it returns the target placeholder from the 'targetPlaceholder' relation. 
         * It may be <code>null</code> if there is no target placeholder.
         * 
         * @since ICM 7.7, f_content 11.0.0
         */
        operation getTargetPlaceholder(domain:Domain) : Placeholder;

        /*
         * 
         * @since ICM 7.7, f_content 11.0.0
         */
        operation getTargetSlot(domain:Domain) : Slot;
        
        /*
         * Same as {@link #setTargetPlaceholder(Placeholder)} except that it stores a member 
         * of 'targetPlaceholder' relation in a domain specific way. Used to express that
         * such a mapping exists only for a specific domain and it therefore overrides any
         * of such mapping existing in the owning domain of this placeholder definition.
         *
         * @since ICM 7.7, f_content 11.0.0
         */
		operation setTargetPlaceholder(placeholder:Placeholder, domain:Domain) : void;
    }

}
