import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/ConfigurationParameterCtnr.edl";
import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/PlaceholderDefinition.edl";
import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/Placeholder.edl";
import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/Slot.edl";
import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/SlotPageletAssignment.edl";
import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/assignment/PageletUserGroupAssignment.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/user/UserGroup.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external PipelineDictionary type "com.intershop.beehive.core.capi.pipeline.PipelineDictionary";
external User type "com.intershop.beehive.core.capi.user.User";
external UserGroup type "com.intershop.beehive.core.capi.user.UserGroup";
external PageletUserGroupAssignment type "com.intershop.component.pmc.capi.pagelet.assignment.PageletUserGroupAssignment";
external PageletDefinition type "com.intershop.component.pmc.capi.definition.pagelet.PageletDefinition";
external ValidityPeriod type "com.intershop.component.foundation.capi.assignment.ValidityPeriod";
external PageletCollection type "java.util.Collection<? extends Pagelet>";
external Describable type "com.intershop.beehive.core.capi.util.Describable";
external Nameable type "com.intershop.beehive.core.capi.util.Nameable";
external UserGroupCollection type "java.util.Collection<? extends UserGroup>";
external UserGroupAssignmentCollection type "java.util.Collection<? extends PageletUserGroupAssignment>";

namespace com.intershop.component.pmc.capi.pagelet
{
    cartridge interface Pagelet extends ConfigurationParameterCtnr, ValidityPeriod, Nameable, Describable
    {
        /*
         * Start date of period where pagelet is valid.
         */
        attribute validTo: datetime;

        /*
         * End date of period where pagelet is valid.
         */
        attribute validFrom: datetime;

        /*
         * Flag to set pagelet online or offline.
         */
        attribute online: boolean;

        /*
         * The display name of the pagelet.
         */
        attribute displayName: string localized;

        /*
         * The description name of the pagelet.
         */
        attribute description: string localized;

        /*
         * Flag to work as a page or not.
         */
        attribute page: boolean readonly;

        /*
         * A flag that marks this pagelet being a template or a plain old pagelet
         */
        attribute template: boolean readonly;

        /*
         * The unique internal id.
         */
        attribute id: string required readonly;

        relation parentSlotPageletAssignments: SlotPageletAssignment[0..n] readonly;
        relation author: User[0..1];
        relation subSlots: Slot[0..n] readonly;
        relation noneOverridingPlaceholders : Placeholder[0..n] readonly;
        relation overridingPlaceholders : Placeholder[0..n] readonly;
        
        /*
         * Returns the outgoing placeholder definitions owned by this pagelet template. 
         * Which in turn &quot;inherit&quot; the contents of their mapped target-slot or 
         * target-placeholder to the outside.
         */
        relation placeholderDefinitions : PlaceholderDefinition[0..n] readonly;
                
        
        /*
         * Returns the maximum value of 'position' attribute held by this pagelet's placeholder definitions.
         */
        operation getPlaceholderDefinitionsMaxPosition() : double;
        operation getPlaceholderDefinitionsMaxPosition(domain : Domain) : double;

        /*
         * Returns the associated PageletDefinition of this pagelet instance.
         */
        operation getPageletDefinition(): PageletDefinition;

        /*
         * Returns a slot by its qualified name or null if slot is not assigned to this pagelet.
         */
        operation getSubSlot(qualifiedName: string): Slot;

        /*
         * Returns true if the given pagelet is in pagelet structure otherwise false.
         */
        operation isInPageletStructure(pagelet: Pagelet): boolean;
        operation createParentSlotPageletAssignmentsIterator(domain: Domain): Iterator;

        /*
         * Returns the parent pagelet of this pagelet if there is one.
         */
        operation getParent(): Pagelet;

        /*
         * Indicates whether this pagelet has a parent pagelet.
         */
        operation hasParent(): boolean;

        /*
         * Indicates whether the passed pagelet is the parent of this pagelet.
         */
        operation isParent(pagelet: Pagelet): boolean;

        /*
         * Returns a collection containing all templates that are children of this template which in turn are templates themselves.
         */
        operation getChildTemplates(): PageletCollection;

        /*
         * Returns a collection containing all templates that are children of this template which in turn are templates themselves
         * and whose domain matches the one passed as input parameter.
         */
        operation getChildTemplates(domain: Domain): PageletCollection;

        /*
         * Returns a collection containing all components or pages that are children of this template and are not templates.
         * Whether these pagelets are pages or components depends on the page flag of the pagelet definition referred by the template.
         */
        operation getChildPagelets(): PageletCollection;

        /*
         * Returns a collection containing all components or pages that are children of this template that are stored in the domain passed as input parameter and are not templates.
         * Whether these pagelets are pages or components depends on the page flag of the pagelet definition referred by the template.
         */
        operation getChildPagelets(domain: Domain): PageletCollection;

        /*
         * Indicates whether a template has any children regardless whether they are pagelets or templates.
         */
        operation hasChildren(): boolean;

        /*
         * Indicates whether a template has any children within a certain domain regardless whether they are pagelets or templates.
         */
        operation hasChildren(domain: Domain): boolean;

        /*
         * Indicates whether a template has any children that are templates.
         */
        operation hasChildTemplates(): boolean;

        /*
         * Indicates whether a template has any children that are templates and stored within a certain domain.
         */
        operation hasChildTemplates(domain: Domain): boolean;

        /*
         * Indicates whether a template has any children that are pagelets.
         */
        operation hasChildPagelets(): boolean;

        /*
         * Indicates whether a template has any children that are pagelets and stored within a certain domain.
         */
        operation hasChildPagelets(domain: Domain): boolean;
        
        /*
         * Returns a collection containing all components or pages that are children of this pagelet 
         * and are templates or not and are stored in the domain passed as input parameter.
         */
        operation getChildren(domain: Domain): PageletCollection;
        
        /*
         * Returns a collection containing all components or pages that are children of this pagelet 
         * and are templates or not.
         */
        operation getChildren(): PageletCollection;
        
		/*
		 * Returns a collection containing all user groups assigned to this pagelet
		 * or an empty collection if there aren't any.
		 */
        operation getUserGroups(): UserGroupCollection;
        
		/*
		 * Returns a collection containing all pagelet user group assignments pointing to this pagelet
		 * or an empty collection if there aren't any.
		 */
        operation getUserGroupAssignments() : UserGroupAssignmentCollection;
    }
}
