import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/capi/pagelet/PlaceholderDefinition.edl";
import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/internal/pagelet/template/overriding/NoneOverridingPlaceholderPO.edl";
import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/internal/pagelet/SlotPO.edl";
import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/internal/pagelet/template/AbstractPlaceholderPO.edl";
import "enfinity:/bc_pmc/edl/com/intershop/component/pmc/internal/pagelet/PageletPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external ResourceSetIdentifiable type "com.intershop.beehive.emf.core.ResourceSetIdentifiable";

namespace com.intershop.component.pmc.internal.pagelet.template
{
    orm class PlaceholderDefinitionPO extends ExtensibleObjectPO implements PlaceholderDefinition, ResourceSetIdentifiable table "PlaceholderDef"
    {
        attribute definitionQualifiedName : string required readonly;
        
        attribute resourceSetId: string<256> required readonly;

        attribute id : string required readonly;
        
        attribute displayName : string localized;
        
        attribute description : string localized;
        
        attribute targetPlaceholderID : uuid;

        attribute targetSlotID : uuid;

        attribute templateID : uuid required;
        
        attribute position : double required;
        
		relation templatePO : PageletPO[1..1] inverse placeholderDefinitionPOs implements template
		{
			foreign key(templateID) -> (UUID);
		}

		/*
		 * Represents the mapping target of this placeholder definition inside of one pagelet.
		 */
		relation targetSlotPO : SlotPO[0..1] inverse placeholderDefinitionPO implements targetSlot
		{
			foreign key(targetSlotID) -> (UUID);
		}

		/*
		 * Represents the mapping target of this placeholder definition inside of one pagelet.
		 */
		relation targetPlaceholderPO : AbstractPlaceholderPO[0..1] inverse sourcePlaceholderDefinitionPO implements targetPlaceholder
		{
			foreign key(targetPlaceholderID) -> (UUID);
		}

		/*
		 * Represents all placeholders that exist only because this placeholder definition
		 * is existing. All placeholders in this relation are distributed over different pagelets and domains
		 */
		relation sourcePlaceholderPOs : NoneOverridingPlaceholderPO[0..n] inverse targetPlaceholderDefinitionPO;
	}
}