/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.smc.default_.monitor;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.core.capi.url.*;

public final class monitor_005fperformance_005fcomparison_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write('\n');
 
setEncodingType("text/html"); 
      out.write("  \n\n<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"w100\">\n\t<!-- Navigation and Content Area -->\n\t<tr>\n\t\t<td class=\"breadcrumb\"><a href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("Monitor-Start",null),context.getFormattedValue("",null),context.getFormattedValue("SMC",null)))),null));
      out.write("\" class=\"breadcrumb\">");
 {out.write(localizeISText("monitor.Monitoring.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a>&nbsp;&gt;&nbsp;<a href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("Monitor-PerformanceMonitoring",null),context.getFormattedValue("",null),context.getFormattedValue("SMC",null)))),null));
      out.write("\" class=\"breadcrumb\">");
 {out.write(localizeISText("monitor.Performance.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a>&nbsp;&gt;&nbsp;");
 {out.write(localizeISText("monitor.ComparePerformanceMonitoringResults.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n\t</tr>\n\t<tr>\n\t\t<td><img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/space.gif\" width=\"1\" height=\"6\" alt=\"\" border=\"0\"/></td>\n\t</tr>\n\t<tr>\n\t\t<td>");
 {out.flush();
URLRewriteHandler handler = getTemplateExecutionConfig().getURLRewriteHandler();
try
{
getTemplateExecutionConfig().setURLRewriteHandler(NullURLRewriteHandler.getInstance());
processRemoteIncludeAutomatic((com.intershop.beehive.core.capi.request.ServletResponse)response,context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewServerSelection-Start",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("TargetPipeline",null),context.getFormattedValue("ViewPerformanceComparison-Start",null))).addURLParameter(context.getFormattedValue("TargetServerID",null),context.getFormattedValue(getObject("TargetServerID"),null))),null), null, null, "13");}
finally
{
    getTemplateExecutionConfig().setURLRewriteHandler(handler);
}} 
      out.write("</td>\n\t</tr>\n\t<tr>\n\t\t<td><img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/spacer.gif\" width=\"1\" height=\"5\" border=\"0\" alt=\"\"/></td> <!-- blank line, separates server select from content -->\n\t</tr>\n\t<!-- Content Area -->\n\t<tr>\n\t\t<td class=\"table_title aldi\">");
 {out.write(localizeISText("monitor.ComparePerformanceMonitoringResults.table_title","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n\t</tr>\n\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ErrorMessage"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",22,e);}if (_boolean_result) { 
      out.write("\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<table border=\"0\" cellspacing=\"0\" cellpadding=\"4\" width=\"100%\" class=\"error_box w e s\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td class=\"error_icon e middle\"><img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/error.gif\" width=\"16\" height=\"15\" alt=\"\" border=\"0\"/></td>\n\t\t\t\t\t\t<td class=\"error\" width=\"100%\">");
 {String value = null;try{value=context.getFormattedValue(getObject("ErrorMessage"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {28}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</td>\n\t\t</tr>\n\t");
 } 
      out.write('\n');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("NoMonitorsSelected"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",34,e);}if (_boolean_result) { 
      out.write("\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<table border=\"0\" cellspacing=\"0\" cellpadding=\"4\" width=\"100%\" class=\"error_box w e s\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td class=\"error_icon e middle\"><img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/error.gif\" width=\"16\" height=\"15\" alt=\"\" border=\"0\"/></td>\n\t\t\t\t\t\t<td class=\"error\" width=\"100%\">");
 {String value = null;try{value=context.getFormattedValue(getObject("NoMonitorsSelected"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {40}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</td>\n\t\t</tr>\n\t");
 } 
      out.write("\n\t\t<tr>\n\t\t\t<td>\n\n\t\t\t");
 URLPipelineAction action64 = new URLPipelineAction(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Dispatch",null)))),null));String site64 = null;String serverGroup64 = null;String actionValue64 = context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Dispatch",null)))),null);if (site64 == null){  site64 = action64.getDomain();  if (site64 == null)  {      site64 = com.intershop.beehive.core.capi.request.Request.getCurrent().getRequestSite().getDomainName();  }}if (serverGroup64 == null){  serverGroup64 = action64.getServerGroup();  if (serverGroup64 == null)  {      serverGroup64 = com.intershop.beehive.core.capi.request.Request.getCurrent().getRequestSite().getServerGroup();  }}out.print("<form");out.print(" method=\"");out.print("post");out.print("\"");out.print(" action=\"");out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Dispatch",null)))),null));out.print("\"");out.print(" name=\"");out.print("CompareForm");out.print("\"");out.print(">");out.print(context.prepareWACSRFTag(actionValue64, site64, serverGroup64,true)); 
      out.write("\t\n\t\t\t\t<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" class=\"w e s performanceCompare\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td colspan=\"3\" class=\"table_title_description s\">\n\t\t\t\t\t\t  ");
 {out.write(localizeISText("monitor_performance_comparison.OnThisPageYouCanCompareTwoSensorLogFiles.table_title_description",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("&quot;.</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td class=\"e s table_detail\" >\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div style=\"width: 420px;\">\n\t\t\t\t\t\t\t\t\t<div style=\"float:left;\">\n\t\t\t\t\t\t\t\t\t<div class=\"infobox_title\">");
 {out.write(localizeISText("monitor_performance_comparison.SelectBaseReport.infobox_title","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</div>\n\t\t\t\t\t\t\t\t\t\t<select style=\"width: 200px; margin-right: 20px;\" name=\"BaseFile\" size=\"10\">\n\t\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("MonitorFiles"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",62,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t\t");
 while (loop("MonitorFiles",null,null)) { 
      out.write("\n\t\t\t\t\t\t\t  \t\t\t\t\t\t<option ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("MonitorFiles"),null).equals(context.getFormattedValue(getObject("BaseFile"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",64,e);}if (_boolean_result) { 
      out.write("selected");
 } 
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("MonitorFiles"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {64}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</option>\n\t\t\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div style=\"float:left;\">\n\t\t\t\t\t\t\t\t\t<div class=\"infobox_title\">");
 {out.write(localizeISText("monitor_performance_comparison.SelectCompareReport.infobox_title","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</div>\n\t\t\t\t\t\t\t\t\t\t<select style=\"width: 200px;\" name=\"CompareFile\" size=\"10\">\n\t\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("MonitorFiles"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",72,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t\t");
 while (loop("MonitorFiles",null,null)) { 
      out.write("\n\t\t\t\t\t\t\t  \t\t\t\t\t\t<option ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("MonitorFiles"),null).equals(context.getFormattedValue(getObject("CompareFile"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("selected");
 } 
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("MonitorFiles"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {74}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</option>\n\t\t\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\t\t\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td class=\"e table_detail s\">\n\t\t\t\t\t\t\t<div style=\"width: 220px;\">\n\t\t\t\t\t\t\t\t<div class=\"infobox_title\">");
 {out.write(localizeISText("monitor_performance_comparison.SelectSensorToCompare.infobox_title","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</div>\n\t\t\t\t\t\t\t\t\t");
 while (loop("SensorTypes","SensorType",null)) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t");
 {Object temp_obj = (getObject("SensorTypesStatus:get(SensorType)")); getPipelineDictionary().put("SensorTypeEnabled", temp_obj);} 
      out.write("\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (((!((Boolean) (disableErrorMessages().isDefined(getObject("SelectedSensors")))).booleanValue() && ((Boolean) getObject("SensorTypeEnabled")).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() || ((Boolean) (disableErrorMessages().isDefined(getObject("SelectedSensors:get(SensorType)")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",86,e);}if (_boolean_result) { 
      out.write("checked=\"checked\"");
 } 
      out.write(" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("SensorType"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {86}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('/');
      out.write('>');
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"monitor/inc/monitor_sensor_type", null, "86");} 
      out.write("<br/>\n\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t<td class=\"table_detail s\" style=\"width: 100%;\">\n\t\t\t\t\t\t\t<div style=\"float:left;\">\n\t\t\t\t\t\t\t\t<div class=\"infobox_title\">");
 {out.write(localizeISText("monitor_performance_comparison.SelectColumnsToView.infobox_title","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(":</div>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"ShowColumns\" value=\"Hits\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((!((Boolean) (disableErrorMessages().isDefined(getObject("SelectedColumns")))).booleanValue() || ((Boolean) (disableErrorMessages().isDefined(getObject("SelectedColumns:Hits")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",94,e);}if (_boolean_result) { 
      out.write("checked=\"checked\"");
 } 
      out.write('>');
      out.write(' ');
 {out.write(localizeISText("monitor.Hits.input","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("<br>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"ShowColumns\" value=\"Total\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((!((Boolean) (disableErrorMessages().isDefined(getObject("SelectedColumns")))).booleanValue() || ((Boolean) (disableErrorMessages().isDefined(getObject("SelectedColumns:Total")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",95,e);}if (_boolean_result) { 
      out.write("checked=\"checked\"");
 } 
      out.write('>');
      out.write(' ');
 {out.write(localizeISText("monitor_performance_comparison.TotalTime.input","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("<br>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"ShowColumns\" value=\"Eff\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((!((Boolean) (disableErrorMessages().isDefined(getObject("SelectedColumns")))).booleanValue() || ((Boolean) (disableErrorMessages().isDefined(getObject("SelectedColumns:Eff")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",96,e);}if (_boolean_result) { 
      out.write("checked=\"checked\"");
 } 
      out.write('>');
      out.write(' ');
 {out.write(localizeISText("monitor_performance_comparison.EffectiveTime.input","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("<br>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"ShowColumns\" value=\"Avg\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Avg"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",97,e);}if (_boolean_result) { 
      out.write("checked=\"checked\"");
 } 
      out.write('>');
      out.write(' ');
 {out.write(localizeISText("monitor_performance_comparison.AverageTime.input","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("<br>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"ShowColumns\" value=\"Min\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Min"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",98,e);}if (_boolean_result) { 
      out.write("checked=\"checked\"");
 } 
      out.write('>');
      out.write(' ');
 {out.write(localizeISText("monitor_performance_comparison.MinimumTime.input","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("<br>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"ShowColumns\" value=\"Max\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Max"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",99,e);}if (_boolean_result) { 
      out.write("checked=\"checked\"");
 } 
      out.write('>');
      out.write(' ');
 {out.write(localizeISText("monitor_performance_comparison.MaximumTime.input","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("<br>\n\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t</td>\t\t\t\t\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td class=\"right\" colspan=\"6\">\n\t\t\t\t\t\t\t<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td align=\"right\">\n\t\t\t\t\t\t\t\t\t\t<table cellpadding=\"0\" cellspacing=\"4\" border=\"0\">\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"button\"><input type=\"submit\" name=\"compare\" value=\"");
      out.print(context.getFormattedValue(localizeText(context.getFormattedValue("monitor.Compare.button",null)),null));
      out.write("\" class=\"button\"/></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"button\"><input type=\"submit\" name=\"newSnapshot\" value=\"");
      out.print(context.getFormattedValue(localizeText(context.getFormattedValue("monitor_performance_comparison.CreateNewReport.button",null)),null));
      out.write("\" class=\"button\"/></td>\n\t\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t\t");
 out.print("</form>"); 
      out.write("\t\n\n\t\t\t</td>\n\t\t</tr>\n\t\n\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ComparisonResults"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",123,e);}if (_boolean_result) { 
      out.write("\n\t\t\t");
 while (loop("SensorTypes","SensorType",null)) { 
      out.write("\n\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedSensors:get(SensorType)"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",125,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"w performanceCompareTable\">\n\t\t\t\t\t\t\t\t<tr><td colspan=\"19\" class=\"e s\"><img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/spacer.gif\" width=\"1\" height=\"2\" border=\"0\" alt=\"\"/></td></tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t   <td colspan=\"19\" class=\"table_subtitle e s\">");
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"monitor/inc/monitor_sensor_type", null, "131");} 
      out.write(' ');
 {out.write(localizeISText("monitor.Performance.table_subtitle","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr><td colspan=\"19\" class=\"e s\"><img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/spacer.gif\" width=\"1\" height=\"2\" border=\"0\" alt=\"\"/></td></tr>\n\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("ComparisonResults:get(SensorType)") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",134,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<td class=\"table_header e s nowrap\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("ClassName",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Name.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Hits"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",137,e);}if (_boolean_result) { 
      out.write("<td class=\"table_header e s nowrap center\" colspan=\"3\">");
 {out.write(localizeISText("monitor.Hits.table_header","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Total"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",138,e);}if (_boolean_result) { 
      out.write("<td class=\"table_header e s nowrap center\" colspan=\"3\">");
 {out.write(localizeISText("monitor.TotalTime.table_header","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Eff"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",139,e);}if (_boolean_result) { 
      out.write("<td class=\"table_header e s nowrap center\" colspan=\"3\">");
 {out.write(localizeISText("monitor.EffectiveTime.table_header","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Avg"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",140,e);}if (_boolean_result) { 
      out.write("<td class=\"table_header e s nowrap center\" colspan=\"3\">");
 {out.write(localizeISText("monitor.AverageTime.table_header","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Min"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",141,e);}if (_boolean_result) { 
      out.write("<td class=\"table_header e s nowrap center\" colspan=\"3\">");
 {out.write(localizeISText("monitor.MinimumTime.table_header","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Max"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",142,e);}if (_boolean_result) { 
      out.write("<td class=\"table_header e s nowrap center\" colspan=\"3\">");
 {out.write(localizeISText("monitor.MaximumTime.table_header","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s\" nowrap=\"nowrap\">&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Hits"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",146,e);}if (_boolean_result) { 
      out.write("\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\" ><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("BaseSensorHits",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Base.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("CompareSensorHits",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Compare.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("DiffHits",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Diff.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Total"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",151,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("BaseSensorTotalTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Base.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("CompareSensorTotalTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Compare.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("DiffTotalTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Diff.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Eff"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",156,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("BaseSensorEffectiveTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Base.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("CompareSensorEffectiveTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Compare.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("DiffEffectiveTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Diff.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Avg"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",161,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("BaseSensorAverageTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Base.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("CompareSensorAverageTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Compare.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("DiffAverageTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Diff.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Min"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",166,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("BaseSensorMinimumTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Base.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("CompareSensorMinimumTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Compare.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("DiffMinimumTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Diff.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Max"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",171,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("BaseSensorMaximumTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Base.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("CompareSensorMaximumTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Compare.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_header sub e s right\"><a class=\"tableheader\" href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPerformanceComparison-Compare",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("SortBy",null),context.getFormattedValue("DiffMaximumTime",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("monitor.Diff.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a></td>\n\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t");
 while (loop("ComparisonResults:get(SensorType)","ComparisonResult",null)) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s\" valign=\"top\">\n\t\t\t\t\t\t\t\t\t\t\t\t");
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:BaseSensorClassName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {180}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Hits"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",182,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("ComparisonResult:BaseSensorHits")).doubleValue() >((Number)(getObject("ComparisonResult:CompareSensorHits"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",183,e);}if (_boolean_result) { 
      out.write("<font color=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("FF0000\">");
 } 
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:BaseSensorHits"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {183}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("ComparisonResult:CompareSensorHits")).doubleValue() >((Number)(getObject("ComparisonResult:BaseSensorHits"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",184,e);}if (_boolean_result) { 
      out.write("<font color=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("FF0000\">");
 } 
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:CompareSensorHits"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {184}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right diff\">");
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:DiffHits"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {185}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n\t\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Total"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",187,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("ComparisonResult:BaseSensorTotalTime")).doubleValue() >((Number)(getObject("ComparisonResult:CompareSensorTotalTime"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",188,e);}if (_boolean_result) { 
      out.write("<font color=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("FF0000\">");
 } 
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:BaseSensorTotalTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {188}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("ComparisonResult:CompareSensorTotalTime")).doubleValue() >((Number)(getObject("ComparisonResult:BaseSensorTotalTime"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",189,e);}if (_boolean_result) { 
      out.write("<font color=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("FF0000\">");
 } 
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:CompareSensorTotalTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {189}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right diff\">");
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:DiffTotalTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {190}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n\t\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Eff"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",192,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("ComparisonResult:BaseSensorEffectiveTime")).doubleValue() >((Number)(getObject("ComparisonResult:CompareSensorEffectiveTime"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",193,e);}if (_boolean_result) { 
      out.write("<font color=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("FF0000\">");
 } 
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:BaseSensorEffectiveTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {193}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("ComparisonResult:CompareSensorEffectiveTime")).doubleValue() >((Number)(getObject("ComparisonResult:BaseSensorEffectiveTime"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",194,e);}if (_boolean_result) { 
      out.write("<font color=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("FF0000\">");
 } 
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:CompareSensorEffectiveTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {194}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right diff\">");
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:DiffEffectiveTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {195}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n\t\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Avg"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",197,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("ComparisonResult:BaseSensorAverageTime")).doubleValue() >((Number)(getObject("ComparisonResult:CompareSensorAverageTime"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",198,e);}if (_boolean_result) { 
      out.write("<font color=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("FF0000\">");
 } 
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:BaseSensorAverageTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {198}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("ComparisonResult:CompareSensorAverageTime")).doubleValue() >((Number)(getObject("ComparisonResult:BaseSensorAverageTime"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",199,e);}if (_boolean_result) { 
      out.write("<font color=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("FF0000\">");
 } 
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:CompareSensorAverageTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {199}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right diff\">");
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:DiffAverageTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {200}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n\t\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Min"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",202,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("ComparisonResult:BaseSensorMinimumTime")).doubleValue() >((Number)(getObject("ComparisonResult:CompareSensorMinimumTime"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",203,e);}if (_boolean_result) { 
      out.write("<font color=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("FF0000\">");
 } 
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:BaseSensorMinimumTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {203}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("ComparisonResult:CompareSensorMinimumTime")).doubleValue() >((Number)(getObject("ComparisonResult:BaseSensorMinimumTime"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",204,e);}if (_boolean_result) { 
      out.write("<font color=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("FF0000\">");
 } 
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:CompareSensorMinimumTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {204}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right diff\">");
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:DiffMinimumTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {205}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n\t\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SelectedColumns:Max"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",207,e);}if (_boolean_result) { 
      out.write("\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("ComparisonResult:BaseSensorMaximumTime")).doubleValue() >((Number)(getObject("ComparisonResult:CompareSensorMaximumTime"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",208,e);}if (_boolean_result) { 
      out.write("<font color=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("FF0000\">");
 } 
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:BaseSensorMaximumTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {208}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("ComparisonResult:CompareSensorMaximumTime")).doubleValue() >((Number)(getObject("ComparisonResult:BaseSensorMaximumTime"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",209,e);}if (_boolean_result) { 
      out.write("<font color=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("FF0000\">");
 } 
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:CompareSensorMaximumTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {209}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td class=\"table_detail e s right diff\">");
 {String value = null;try{value=context.getFormattedValue(getObject("ComparisonResult:DiffMaximumTime"),new Integer(INTEGER),null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {210}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n\t\t\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t\t");
 } else { 
      out.write("\n\t\t\t\t\t\t\t\t\t<tr><td class=\"table_detail w e s\">");
 {out.write(localizeISText("monitor_performance_comparison.ThereAreNoMeasuredValuesAvailable.table_detail","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td></tr>\n\t\t\t\t\t\t\t\t");
 } 
      out.write("\n\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t");
 } 
      out.write("\n\t\t\t");
 } 
      out.write('\n');
      out.write('	');
      out.write('	');
 } else { 
      out.write("\n\t\t\t<tr>\n\t\t\t\t<td class=\"table_detail w e s\">");
 {out.write(localizeISText("monitor_performance_comparison.NoDataAvailableToCompare.table_detail","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n\t\t\t</tr>\n\t\t");
 } 
      out.write("\n</table>\n\n");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
