/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.smc.default_.monitor;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class monitor_005fmini_005fstatus_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
      out.write("<tr>");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ERROR_User"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",3,e);}if (_boolean_result) { 
      out.write("<td class=\"table_detail e error\" valign=\"top\">");
 {String value = null;try{value=context.getFormattedValue(getObject("LocalServer:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {4}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n<td class=\"table_detail e\" valign=\"top\">");
 {out.write(localizeISText("monitor.NA.table_detail","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_detail e\" valign=\"top\" align=\"right\">");
 {out.write(localizeISText("monitor.NA.table_detail","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("&nbsp;</td>\n<td class=\"table_detail e\" valign=\"top\">");
 {out.write(localizeISText("monitor.NA.table_detail","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td> \n<td class=\"table_detail e\" valign=\"top\" align=\"right\">");
 {out.write(localizeISText("monitor.NA.table_detail","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("&nbsp;</td>\n<td class=\"table_detail e\" valign=\"top\">");
 {out.write(localizeISText("monitor.NA.table_detail","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_detail e\" valign=\"top\" align=\"right\">");
 {out.write(localizeISText("monitor.NA.table_detail","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("&nbsp;</td>\n<td class=\"table_detail e\" valign=\"top\" align=\"right\">");
 {out.write(localizeISText("monitor.NA.table_detail","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("&nbsp;</td>\n<td class=\"table_detail e\" valign=\"top\" align=\"right\">");
 {out.write(localizeISText("monitor.NA.table_detail","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("&nbsp;</td>\n<td class=\"table_detail\" valign=\"top\" align=\"right\">");
 {out.write(localizeISText("monitor.NA.table_detail","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("&nbsp;</td>");
 } else { 
      out.write("<td class=\"table_detail e\" valign=\"top\">");
 {String value = null;try{value=context.getFormattedValue(getObject("LocalServer:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {16}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n<td class=\"table_detail e\" valign=\"top\">");
 {String value = null;try{value=context.getFormattedValue(getObject("LocalServer:Host"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {18}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n<td class=\"table_detail e\" valign=\"top\" align=\"right\">");
 {String value = null;try{value=context.getFormattedValue(getObject("LocalServer:Port"),"#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {19}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n<td class=\"table_detail e\" valign=\"top\">");
 {String value = null;try{value=context.getFormattedValue(getObject("LocalServer:InstallationID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {20}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n<td class=\"table_detail e\" valign=\"top\" align=\"right\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Process_PID"),"#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {21}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n<td class=\"table_detail e\" valign=\"top\">");
 {String value = null;try{value=context.getFormattedValue(getObject("LocalServer:StartDate"),"MM/dd/yyyy - HH:mm:ss",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {22}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n<td class=\"table_detail e\" valign=\"top\" align=\"right\">");
 {String value = null;try{value=context.getFormattedValue(getObject("Process_CpuUsage"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {23}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("%&nbsp;</td> \n<td class=\"table_detail e\" valign=\"top\" align=\"right\">");
 {String value = null;try{value=context.getFormattedValue(getObject("JVM_HeapUsage"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {24}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("%&nbsp;</td> \n<td class=\"table_detail e\" valign=\"top\" align=\"right\">");
 {String value = null;try{value=context.getFormattedValue((new Double( ((Number) getObject("Process_TotalSize")).doubleValue() / ((Number) new Double(1024)).doubleValue() /((Number) new Double(1024)).doubleValue())),"#.##",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {25}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(" MB&nbsp;</td>\n<td class=\"table_detail\" valign=\"top\" align=\"right\">");
 {String value = null;try{value=context.getFormattedValue(getObject("ActiveSessionCount"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {26}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>");
 } 
      out.write("</tr>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
