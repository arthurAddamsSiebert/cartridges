import "enfinity:/bc_search/edl/com/intershop/component/search/capi/Attribute.edl";
import "enfinity:/bc_search/edl/com/intershop/component/search/capi/Synonym.edl";
import "enfinity:/bc_search/edl/com/intershop/component/search/capi/FilterGroup.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/localization/LocaleInformation.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external CustomValuesObject type "com.intershop.component.search.capi.CustomValuesObject";

namespace com.intershop.component.search.capi
{
    cartridge interface SearchIndexConfiguration extends CustomValuesObject
    {
    
        relation attributes : Attribute[0..n];

        relation synonyms : Synonym[0..n];

        relation locale : LocaleInformation[0..1];

        relation stopWords : String[0..n] readonly;
        
        relation queryStopWords : String[0..n] readonly;
        
        relation spellCheckWords : String[0..n] readonly;

        /*
         * Gets name for search index
         */
        operation getName() : string;

        /*
         * Gets description for search index
         */
        operation getDescription() : string;

        /*
         * Get online status of search index. The status 'true' says, that the index should be set active for search activities.
         */
        operation isOnline() : boolean;
        
        /*
         * Determines whether separate query stop words list is supported.
         */
        operation isQueryStopWordsEnabled() : boolean;

        /*
         * Sets description of search index
         */
        operation setDescription(description : string) : void;

        /*
         * Sets online status of search index
         */
        operation setOnline(online : boolean) : void;

        /*
         * Sets name of search index
         */
        operation setName(name : string) : void;

        /*
         * Save the index configuration.
         */
        operation save() : boolean;

        /*
         * Replaces the attributes for search index with given values
         */
        operation setAttributes(attributes : Iterator) : void;

        /*
         * Replaces the synonyms with given synonyms.
         */
        operation setSynonyms(synonyms : Iterator) : void;

        /*
         * Replaces the stop words for indexing phase of search index configuration
         */
        operation setStopWords(stopWords : Iterator) : void;
        
        /*
         * Replaces the stop words for query phase of search index configuration
         */
        operation setQueryStopWords(stopWords : Iterator) : void;
        
        /*
         * Replaces the explicitly set words used for spell checking.
         */
        operation setSpellCheckWords(spellCheckWords : Iterator) : void;

        /*
         * Gets a search index attribute by its name
         */
        operation getAttributeByName(name : string) : Attribute;

        operation createFilterAttributesIterator() : Iterator;

        operation createFilterGroupsIterator() : Iterator;
        
        /*
       	 * Gets a filter group by its name
	     */
        operation getFilterGroupByName(name : string) : FilterGroup;
        
        /*
     	 * Adds Associates an object via the relation 'filterGroups'
	     */
	    operation addToFilterGroups(instance : FilterGroup) : void;
    
	    /*
	     * remove filterGroup from Configuration.
	     */
    	operation removeFilterGroup(instance : FilterGroup) : void;
        
        /*
	     * Gets a list of filters that are not assigned to any filter group
	     */
	    operation createUnassignedFiltersIterator() : Iterator;
	    
	    /*
	     * Gets a mixed list of filterentries, sorted by position
	     */
	    operation createFilterEntriesIterator() : Iterator;
	    
	    /*
	     * Get the list of sortable attributes
	     */
	    operation createSortableAttributesIterator() : Iterator;
	    
        /*
         * Gets a synonym by its name from configuration
         */
        operation getSynonymByKeyword(aKeyword : string) : Synonym;

        operation createCategoryAttributesIterator(aCatalogCategoryID : string) : Iterator;

        operation setFeatureID(featureID : string) : void;

        operation getFeatureID() : string;

        operation getLastIndexStartTime() : datetime;

        operation setLastIndexStartTime(aDate : datetime) : void;

        operation createBusinessAttributesIterator() : Iterator;
        
        /*
         * gets a default page size for the search result if
         * a search engine supports page size configuration
         */
        operation getDefaultPageSize() : int;
        
        /*
         * returns an instance of the currently stored configuration. 
         * intended to be used for checking the existing index configuration 
         * against a changed index configuration before saving changes. 
         * The returned instance will be invalid after a call to  {@link #save()} 
         * 
         */
        operation getStoredConfiguration() : SearchIndexConfiguration;
        
		/* 
		 * returns true if an attribute of this search index configuration has 
		 * a data provider with the given name. 
		 * 
		 */
		operation hasDataProviderName(dataProviderName : string) : boolean;
    }
}
