import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external SearchQuery type "com.intershop.component.search.capi.querydefinition.impl.SearchQuery";

namespace com.intershop.component.search.capi.querydefinition
{
	/*
	 * The CAPI for SearchQueryDefinition 
	 *
	 * @author Juergen Nuetzel
	 */
	cartridge interface SearchQueryDefinition 
	{

        constant SEARCH_INDEX_TYPE_PRODUCT : string = "product";         
        constant SEARCH_INDEX_TYPE_CONTENT : string = "content";         

        /*
         * This flag specifies whether the SearchQueryDefinition is globally visible.
         */
         attribute globalVisible : boolean required;

        /*
         * The name of the SearchQueryDefinition. This name should be used to uniquely identify a global SearchQueryDefinition within any given domain. Local SearchQueryDefinition receive an internal name  
         */
        attribute name : string required;
        
        /*
         * The localized name of the SearchQueryDefinition. Intended to be used as the external visible name of the global SearchQueryDefinition.
         */
        attribute displayName : string localized;
        
        /*
         * The localized description of the global SearchQueryDefinition.
         */
        attribute description : string localized;        
         
        /*
         * The type of SearchIndex the SearchQueryDefinition is working with. Possible values are SEARCH_INDEX_TYPE_PRODUCT and SEARCH_INDEX_TYPE_CONTENT 
         */
        attribute ^type : string required;

        /*
         * Indicates the position of the global SearchQueryDefinition in order to other SearchQueryDefinition in the back office.
         */
        attribute position : double;
        
        /*
		 * The part of the SearchQueryDefinition which is sent to the search engine. Persistent as XML CLOB using jaxb.     
     	 */
	    attribute searchQuery : SearchQuery;
	    
		/*
		 * Direct access to the XML representation of the attribute searchQuery.     
		 */
		operation getSearchQueryAsXML() : string;

	    /*
	     * provide an empty SearchQuery
	     */
	    operation createSearchQuery() : SearchQuery;  
	    
	    /*
	     * provide the uuid of the underlying PO
	     */
	    operation getUUID() : string;  
	}
}
