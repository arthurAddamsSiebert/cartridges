import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/bc_search/edl/com/intershop/component/search/capi/querydefinition/SearchQueryDefinition.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";

external SearchQueryDefinitionCollection type "java.util.Collection<SearchQueryDefinition>";

namespace com.intershop.component.search.capi.querydefinition
{
	/*
	 * @author Juergen Nuetzel
	 */
	cartridge interface SearchQueryDefinitionRepository 
	{
        constant REPOSITORY_INSTANCE_NAME : string = "searchQueryDefinitionRepository";         

		relation domain : Domain[0..1];
		
		/*
		 * Creates a SearchQueryDefinition
	     * 
    	 * @param   name     		a string with a unique name, if null uuid is used instead
    	 * @param   globalVisible   is true if the SearchQueryDefinition is global visible
    	 * @param   type     		A string which define the type of search index ("PRODUCT" or "CONTENT")
		 * 
		 * @return	the SearchQueryDefinition 
		 */
		operation create(name : string, globalVisible : boolean, ^type : string) : SearchQueryDefinition;
	
		/*
		 * Removes a SearchQueryDefinition
	     * 
    	 * @param   searchQueryDefinition     the SearchQueryDefinition to remove
		 * 
		 */
		operation ^remove(searchQueryDefinition : SearchQueryDefinition) : void;
		
		/*
		 * get an existing global visible SearchQueryDefinition
	     * 
    	 * @param   name     A string with the name of the SearchQueryDefinition 
		 * 
		 * @return	the SearchQueryDefinition 
		 */
		operation get(name : string) : SearchQueryDefinition;
		
		/*
		 * get an existing SearchQueryDefinition
	     * 
    	 * @param   uuid     a uuid  
		 * 
		 * @return	the SearchQueryDefinition 
		 */
		operation getByUUID(uuid : string) : SearchQueryDefinition;

		/*
		 * get all existing SearchQueryDefinitions
	     * 
		 * @return	Collection<SearchQueryDefinition> 
		 */
		operation getAll() : SearchQueryDefinitionCollection;
	
		/*
		 * get all SearchQueryDefinitions of certain visibility and type ("PRODUCT" or "CONTENT")
		 * 
    	 * @param   globalVisible   is true if the SearchQueryDefinition is global visible
    	 * @param   type     		A string which define the type of search index ("PRODUCT" or "CONTENT")
	     * 
		 * @return	Collection<SearchQueryDefinition> 
		 */
		operation getAll(globalVisible : boolean, ^type : string) : SearchQueryDefinitionCollection;

	}
}
