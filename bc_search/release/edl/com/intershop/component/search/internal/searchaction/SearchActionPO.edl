import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/bc_search/edl/com/intershop/component/search/capi/searchaction/SearchAction.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.component.search.internal.searchaction
{
	/*
     * A search action performs a search specific action. Depended upon the user entered query terms and the current context 
     * (e.g. the current category) of a search the system performs specific actions like redirects, show explicitly specified 
     * items, perform an explicitly defined query (e.g. filtered landing page) or others. The actions may apply during 
     * different phases: prior to search execution, during search execution or after search execution. The conditions for 
     * selecting a specific search action are partial or exact match of the search term.
     *
     * @author jgrabs
	 */
	abstract oca timestamp orm class SearchActionPO implements SearchAction
	{
		/*
    	 * @mssql-hint(NONCLUSTERED)
    	 */
	    primary key (searchIndexID, term, domainID);
	    
	    /*
	     * The ID of the search index this search action applies to.
	     */
	    attribute searchIndexID: string required;
	    
        /*
         * The search term. If the search term matches (exact or partial) to user input then the search action is triggered. 
         */
        attribute term : string required;

        /*
         * This flag specifies whether the search term can match partial. If it is <code>false</code> then the search term
         * must match exactly.
         */
         attribute partialMatch : boolean required;
            
		/*
         * Specifies whether the search action will be applied after the search if it yields no result (<code>true</code>), 
         * or before the search (<code>false</code>).
         * 
         */
         
         attribute noResult : boolean required;
                     
        /*
         * The search action context ID, e.g. a category UUID. Specifies whether the search was triggered using a specific 
         * context. The context is usually an instance of PersistentObject.
         */
        attribute contextID: string;
           
        /*
         * The sorting position of the search action. If multiple search actions match then the action with the lowest
         * position wins.
         */
        attribute position: double required;
        
        /*
         * domain id to scope indexes by its domain
         */
        attribute domainID: uuid required searchable; 
        
        dependency domain : Domain  handler "com.intershop.beehive.core.capi.domain.DomainMgr"
        {
            foreign key(domainID);
        }
        
	}
}
