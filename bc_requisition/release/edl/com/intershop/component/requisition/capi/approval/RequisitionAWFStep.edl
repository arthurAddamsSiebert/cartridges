import "enfinity:/bc_requisition/edl/com/intershop/component/requisition/capi/approval/RequisitionAWFSequence.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/user/UserGroup.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external User type "com.intershop.beehive.core.capi.user.User";

namespace com.intershop.component.requisition.capi.approval
{
    /*
     * A step in a workflow sequence may be assigned to individual users or user roles.
     * <p>Each step in a workflow is either assigned to:
     * <br>- an individual user
     * <br>- a role of a specific department or
     * <br>- a role of a specific cost center or
     * <br>- a role of a relative department
     * <br>- a role of a relative cost center
     * 
     * @see com.intershop.component.requisition.capi.approval.RequisitionAWFConstants
     * @see com.intershop.component.requisition.capi.approval.RequisitionAWFDefinition
     * @see com.intershop.component.requisition.capi.approval.RequisitionAWFSequence
     * @see com.intershop.component.requisition.capi.approval.RequisitionAWFMgr
     */
    cartridge interface RequisitionAWFStep extends ExtensibleObject
    {
        /*
         * Denotes the position in the workflow sequence.
         */
        attribute step : int required;

        /*
         * The type code is used to identify what kind of data is valid. The code is set by setRelative(), setRole() and setUser().
         * <p>Constants are:
         * <br>- STEPTYPE_NONE , no valid data
         * <br>- STEPTYPE_USER , getUser() is valid
         * <br>- STEPTYPE_ROLE , getRole() is valid
         * <br>- STEPTYPE_RELATIVEROLE , getRelativeRoler() and getRelativePath() are valid
         */
        attribute typeCode : int readonly required;

        /*
         * Contains the approval aspect of the task<br>
         * Each AWF step has one aspect. The aspect can be used to consolidate several tasks, if they belong to the same user and aspect. This reduces the count of approvals needed for the whole workflow.
         */
        attribute aspect : string required;

        relation sequence : RequisitionAWFSequence[0..1] readonly;

        operation setRelative(masterRole : UserGroup, relativePath : string) : void;

        operation setRole(role : UserGroup) : void;

        operation setUser(user : User) : void;

        operation getRelativeRole() : UserGroup;

        operation getRelativePath() : string;

        operation getRole() : UserGroup;

        operation getUser() : User;
    }
}
