/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:30:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.ac_005fpayment_005fdemo.default_.payment_005fdemo.ishpay;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class ISHPayFastPayLogin_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
      out.write("<div class=\"ipay-fastpayLogo\"><img src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/images/FastPAY_logo.png\" width=\"107\" height=\"17\" alt=\"");
      out.print(context.getFormattedValue(localizeText(context.getFormattedValue("ISHPayFastPayLogin.ISHPAYLogo.alt",null)),null));
      out.write("\"/></div>");
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"payment_demo/ishpay/inc/ISHPayOrderDetails", null, "4");} 
      out.write("<div>\n<h3>");
 {out.write(localizeISText("ISHPayFastPayLogin.LoginToCheckoutYourOrderViaISHFastPay","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</h3>\n<div class=\"ipay-text-testingPurposes\">");
 {out.write(localizeISText("ISHPayFastPayLogin.ForTestingPurposesUseThe.ipay","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(" \n<a href=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("\" class=\"ipay-js-dialogOpener\">");
 {out.write(localizeISText("ISHPayFastPayLogin.DemoData.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a>\n<div class=\"ui-dialog ui-widget ui-widget-content ui-corner-all\">\n<div class=\"ui-dialog-content\">\n<h3>");
 {out.write(localizeISText("ISHPayFastPayLogin.ISHFastPayDemoData","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</h3>\n<p>");
 {out.write(localizeISText("ISHPayFastPayLogin.PleaseUseOneOfTheFollowingAccountsForTes","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</p>\n<h4>");
 {out.write(localizeISText("ISHPayFastPayLogin.RegularTestAccount.ipay",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</h4>\n<div class=\"ipay-field\">\n<div><span class=\"ipay-label\">");
 {out.write(localizeISText("ISHPayFastPayLogin.Email","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</span><span class=\"ipay-text-data\">payment1@test.intershop.de</span></div>\n<div><span class=\"ipay-label\">");
 {out.write(localizeISText("ISHPayFastPayLogin.Password","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</span><span class=\"ipay-text-data\">!InterShop00!</span></div>\n</div>\n<h4>");
 {out.write(localizeISText("ISHPayFastPayLogin.OverchargedTestAccount.ipay",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</h4>\n<div class=\"ipay-field\">\n<div><span class=\"ipay-label\">");
 {out.write(localizeISText("ISHPayFastPayLogin.Email","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</span><span class=\"ipay-text-data\">payment2@test.intershop.de</span></div>\n<div><span class=\"ipay-label\">");
 {out.write(localizeISText("ISHPayFastPayLogin.Password","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</span><span class=\"ipay-text-data\">!InterShop00!</span></div>\n</div>\n</div>\n</div>.\n</div>");
 URLPipelineAction action8 = new URLPipelineAction(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ISHPayRedirect-FastPayLogin",null)))),null));String site8 = null;String serverGroup8 = null;String actionValue8 = context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ISHPayRedirect-FastPayLogin",null)))),null);if (site8 == null){  site8 = action8.getDomain();  if (site8 == null)  {      site8 = com.intershop.beehive.core.capi.request.Request.getCurrent().getRequestSite().getDomainName();  }}if (serverGroup8 == null){  serverGroup8 = action8.getServerGroup();  if (serverGroup8 == null)  {      serverGroup8 = com.intershop.beehive.core.capi.request.Request.getCurrent().getRequestSite().getServerGroup();  }}out.print("<form");out.print(" method=\"");out.print("post");out.print("\"");out.print(" action=\"");out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ISHPayRedirect-FastPayLogin",null)))),null));out.print("\"");out.print(" name=\"");out.print("FastPayLoginForm");out.print("\"");out.print(" id=\"");out.print("FastPayLoginForm");out.print("\"");out.print(">");out.print(context.prepareWACSRFTag(actionValue8, site8, serverGroup8,true)); 
      out.write("<fieldset>");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("count_out"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",34,e);}if (_boolean_result) { 
      out.write("<p class=\"ipay-error\">");
 {out.write(localizeISText("ISHPayFastPayLogin.PleaseCorrectTheErrorSIndicatedBelow0Att",null,null,context.getFormattedValue(getObject("count_out"),null),null,null,null,null,null,null,null,null,null));} 
      out.write("</p>");
 } 
      out.write("<div class=\"ipay-field ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("count_out"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",37,e);}if (_boolean_result) { 
      out.write("ipay-error-field");
 } 
      out.write("\">\n<label>");
 {out.write(localizeISText("ISHPayFastPayLogin.EmailAddress","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</label><input autocomplete=\"off\" type=\"text\" name=\"login\" value=\"payment1@test.intershop.de\"/>\n</div>\n<div class=\"ipay-field ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("count_out"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",40,e);}if (_boolean_result) { 
      out.write("ipay-error-field");
 } 
      out.write("\">\n<label>");
 {out.write(localizeISText("ISHPayFastPayLogin.Password","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</label><input autocomplete=\"off\" type=\"password\" name=\"password\" value=\"!InterShop00!\"/>\n</div>\n</fieldset>\n<div class=\"ipay-formShift\">\n<button type=\"submit\" name=\"ok\" class=\"ipay-button\">");
 {out.write(localizeISText("ISHPayFastPayLogin.Login.button","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</button>\n<a class=\"ipay-link-cancel\" href=\"");
      out.print(context.getFormattedValue("#",null));
      out.write("\" onclick=\"document.FastPayLoginForm.action='");
      out.print(context.getFormattedValue(encodeString(context.getFormattedValue(getObject("cancelURL"),null)),null));
      out.write("'; document.FastPayLoginForm.submit();\">");
 {out.write(localizeISText("ISHPayFastPayLogin.Cancel.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a>\n</div>");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ita_fname"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",49,e);}if (_boolean_result) { 
      out.write("<input type=\"hidden\" name=\"ita_fname\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ita_fname"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {50}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"ita_lname\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ita_lname"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {51}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"ita_street\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ita_street"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {52}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"ita_pcode\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ita_pcode"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {53}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"ita_city\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ita_city"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {54}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"ita_country\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ita_country"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {55}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"ita_countrycode\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ita_countrycode"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {56}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("sfa_fname"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",58,e);}if (_boolean_result) { 
      out.write("<input type=\"hidden\" name=\"sfa_fname\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("sfa_fname"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {59}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"sfa_lname\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("sfa_lname"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {60}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"sfa_street\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("sfa_street"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {61}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"sfa_pcode\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("sfa_pcode"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {62}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"sfa_city\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("sfa_city"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {63}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"sfa_country\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("sfa_country"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {64}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"sfa_countrycode\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("sfa_countrycode"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {65}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("count_out"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",67,e);}if (_boolean_result) { 
      out.write("<input type=\"hidden\" name=\"count_in\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("count_out"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {68}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 } else { 
      out.write("<input type=\"hidden\" name=\"count_in\" value=\"3\">");
 } 
      out.write("<input type=\"hidden\" name=\"token\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("token"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {72}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"currency\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("currency"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {73}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"amount\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("amount"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {74}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"email\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("email"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {75}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"BasketUUID\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("BasketUUID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {76}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"successURL\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("successURL"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {77}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"failURL\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("failURL"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {78}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n<input type=\"hidden\" name=\"cancelURL\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("cancelURL"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {79}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 out.print("</form>"); 
      out.write("</div>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
