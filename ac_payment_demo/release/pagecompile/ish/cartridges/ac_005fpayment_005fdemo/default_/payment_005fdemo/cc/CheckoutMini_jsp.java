/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:30:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.ac_005fpayment_005fdemo.default_.payment_005fdemo.cc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.core.capi.property.PropertyEngineMgr;
import com.intershop.platform.property.capi.PropertyGroupValue;
import com.intershop.platform.property.capi.PropertyEngine;
import com.intershop.adapter.payment.demo.internal.creditcard.CreditCardInformation;
import com.intershop.component.payment.capi.PaymentInstrumentInfoBO;
import com.intershop.adapter.payment.demo.internal.creditcard.CreditCardConstants;
import com.intershop.beehive.bts.capi.payment.PaymentInstrumentInfo;

public final class CheckoutMini_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write("\n\n\n\n\n\n\n\n");
 
setEncodingType("text/html"); 
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("PII:PaymentService:Delegate:CardSecurityCodeCheckEnabled"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",11,e);}if (_boolean_result) { 
      out.write("<div class=\"ish-section\">\n<div class=\"ish-bar\">\n<h3>");
 {out.write(localizeISText("CheckoutMini.ConfirmPaymentMethod","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</h3>\n</div>\n<div class=\"ish-shiftContent\">\n<div>");
 {out.write(localizeISText("CheckoutMini.PleaseEnterTheSecurityCodeOfYourCreditCa","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(" <a href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewCheckoutPayment-Review",null)))),null));
      out.write('"');
      out.write('>');
 {out.write(localizeISText("CheckoutMini.SelectAnotherFormOfPayment.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a>.</div>\n<div>");
 {out.write(localizeISText("CheckoutMini.ForTestingPurposesUseThe","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(" <a href=\"javascript:void(0)\" class=\"kor-open-as-dialog-without-ajax\">");
 {out.write(localizeISText("CheckoutMini.DemoData.link","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a>.\n<div class=\"kor-dialog-content\">\n<div class=\"kor-content-contents\">\n<h3>");
 {out.write(localizeISText("CheckoutMini.ISHCreditCardDemoData","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</h3>\n<p>");
 {out.write(localizeISText("CheckoutMini.PleaseUseOneOfTheFollowingCreditCardsFor","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</p>");
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"payment_demo/ishpay/inc/CreditCardDemoData", null, "23");} 
      out.write("</div>\n</div>\n</div>\n<p></p>\n<div class=\"ish-field\">");

	PipelineDictionary dict = getPipelineDictionary();
	
	Object piiObject = dict.get("PII");
	if (piiObject instanceof PaymentInstrumentInfoBO)
	{
		PaymentInstrumentInfoBO pii = (PaymentInstrumentInfoBO) piiObject;
		CreditCardInformation info = pii.getConfiguration(pii.getPaymentService().getPaymentParameterDefinitions());
		dict.put("CardNumber", info.getCreditCardNumber());
		dict.put("CardType", info.getCreditCardType());
	}
	else
	{
		PaymentInstrumentInfo pii = (PaymentInstrumentInfo) piiObject;
		PropertyEngine engine = NamingMgr.getManager(PropertyEngineMgr.class).getPropertyEngine();
		PropertyGroupValue piiValues = engine.getConfigurationForOwner(pii, pii.getPaymentService().getPaymentParameterDefinitions());
		
		dict.put("CardNumber", piiValues.getProperty("creditCardNumber"));
		dict.put("CardType", piiValues.getProperty("creditCardType"));
	}

 processOpenTag(response, pageContext, "garblestring", new TagParameter[] {
new TagParameter("output","truncatedCreditCardNumber"),
new TagParameter("character","x"),
new TagParameter("length","4"),
new TagParameter("text",getObject("CardNumber")),
new TagParameter("direction","begin")}, 52); 
      out.write("<label for=\"truncatedCreditCardNumber\" class=\"ish-label-s\">");
 {out.write(localizeISText(context.getFormattedValue(context.getFormattedValue("payment.checkout.cc_type.",null) + context.getFormattedValue(getObject("CardType"),null),null),"",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</label>\n<span id=\"truncatedCreditCardNumber\" class=\"ish-field-text\">");
 {String value = null;try{value=context.getFormattedValue(getObject("truncatedCreditCardNumber"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {54}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</span>\n</div>\n<div class=\"ish-field ish-field-last\">");
 processOpenTag(response, pageContext, "fielderrormessageplaceholder", new TagParameter[] {
new TagParameter("name_override",context.getFormattedValue(getObject("PII:PaymentService:ID"),null) + context.getFormattedValue("_",null) + context.getFormattedValue(getObject("SimpleCCInputFieldUUID"),null)),
new TagParameter("ext_string_prefix","todo"),
new TagParameter("class","ish-formShift-s")}, 58); 
      out.write("<label for=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PII:PaymentService:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {59}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('_');
 {String value = null;try{value=context.getFormattedValue(getObject("SimpleCCInputFieldUUID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {59}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" class=\"ish-label-s\">");
 {out.write(localizeISText("CheckoutMini.SecurityCode.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</label>\n<input type=\"hidden\" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PII:PaymentService:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {60}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("_SimpleCCInputFieldUUID\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("SimpleCCInputFieldUUID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {60}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"/>\n<input type=\"text\" class=\"ish-input-xs \n");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((((context.getFormattedValue(getObject("PIIDataVerificationResult:PaymentService:ID"),null).equals(context.getFormattedValue("BPS_CREDITCARD",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("PIIDataVerificationResult:Valid"),null).equals(context.getFormattedValue("false",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",62,e);}if (_boolean_result) { 
      out.write("\nish-error\n");
 } 
      out.write("\" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PII:PaymentService:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {64}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('_');
 {String value = null;try{value=context.getFormattedValue(getObject("SimpleCCInputFieldUUID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {64}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" id=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PII:PaymentService:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {64}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('_');
 {String value = null;try{value=context.getFormattedValue(getObject("SimpleCCInputFieldUUID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {64}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((((Boolean) getObject("PIIDataVerificationResult:isValid")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("PIIDataVerificationResult:PaymentService:ID"),null).equals(context.getFormattedValue("BPS_CREDITCARD",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",65,e);}if (_boolean_result) { 
      out.write("\nvalue=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PIIDataVerificationResult:Values:get(PIIDataVerificationResult:Values:SimpleCCInputFieldUUID)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {66}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('\n');
 } else { 
      out.write("\nvalue=\"\"\n");
 } 
      out.write("\nmaxlength=\"4\" \ndata-validate=\"required\" \ndata-validate-synchronized=\"true\"\ndata-validate-error-message=\"");
 {out.write(localizeISText("checkout.payment.creditcard.securitycode.invalid.text","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\" \n/>");
 processOpenTag(response, pageContext, "tooltip", new TagParameter[] {
new TagParameter("contentkey","checkout.payment.creditcard.securitycode.tooltip"),
new TagParameter("linktextkey","checkout.detail.text"),
new TagParameter("headlinekey","checkout.payment.creditcard.securitycode.tooltip.headline")}, 76); 
      out.write("</div>\n</div>\n</div>");
 } 
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
