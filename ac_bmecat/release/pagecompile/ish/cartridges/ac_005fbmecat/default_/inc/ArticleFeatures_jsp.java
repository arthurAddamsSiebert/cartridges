/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.ac_005fbmecat.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import java.util.*;
import com.intershop.adapter.bmecat.util.BMEcatExportUtil;
import com.intershop.beehive.core.capi.localization.*;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.xcs.capi.catalog.*;
import com.intershop.beehive.xcs.capi.product.*;
import com.intershop.beehive.xcs.internal.catalog.ProductCategoryAssignment;
import com.intershop.beehive.xcs.capi.producttype.*;
import com.intershop.beehive.core.capi.domain.AttributeValue;
import com.intershop.component.mvc.capi.catalog.Catalog;

public final class ArticleFeatures_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

 protected Boolean printTemplateMarker() { return Boolean.FALSE; } 

	private ProductTypeMgr productTypeMgr = (ProductTypeMgr)NamingMgr.getInstance().
		lookupManager(ProductTypeMgr.REGISTRY_NAME);

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 


setEncodingType("text/xml"); 
      out.write('\n');
      out.write('\n');
      out.write('\n');

	Product product = (Product)getObject("Product");
	LocaleInformation locale = (LocaleInformation)getObject("Locale");
	
	for (Iterator classificationCatalogs = (Iterator)getObject("ClassificationCatalogs");
		 classificationCatalogs.hasNext(); )
	{
		String catalogDomainUUID=null,pcaCatalogCategoryDomainUUID=null,catalogID=null,categoryName=null;
		Catalog catalog = (Catalog)classificationCatalogs.next();
		if(catalog!=null)
	    {
	    	catalogDomainUUID = catalog.getCatalogDomain().getUUID();
	    	catalogID = catalog.getId();
	    }
		
		Iterator<CatalogCategory> cci = product.createCatalogCategoriesIterator();
		while (cci.hasNext())
		{
		    CatalogCategory catalogCategory = cci.next();
		    categoryName = catalogCategory.getName();
		    pcaCatalogCategoryDomainUUID = catalogCategory.getDomain().getUUID(); 

			if (pcaCatalogCategoryDomainUUID!=null && catalogDomainUUID!=null
				&& catalogDomainUUID.equals(pcaCatalogCategoryDomainUUID))
			{
				out.println("<ARTICLE_FEATURES>");
				BMEcatExportUtil.writeElement(out, this, "Catalog:Id", 
					catalogID, "REFERENCE_FEATURE_SYSTEM_NAME", 50, true);
				out.println();
				BMEcatExportUtil.writeElement(out, this, "Category:Name", 
					categoryName, "REFERENCE_FEATURE_GROUP_ID", 60, true);
				out.println();
				
	
				ProductType productType = productTypeMgr.
					getProductTypeByName(categoryName, catalog.getDomain());
	
				if (productType == null)
				{
					productType = productTypeMgr.getProductTypeByName(
						catalogID + "_" + categoryName, catalog.getDomain());
				}
	
				if (productType != null)
				{
					for (Iterator pas = productType.createCustomProductAttributesIterator(); pas.hasNext(); )
					{
						ProductAttribute pa = (ProductAttribute)pas.next();
						String name = pa.getName();
						Object value = null;
	
						if (pa.isLocalized())
						{
							value = product.getLocalizedAttribute(name, locale);
							value = value != null ? value : pa.getDefaultValue(locale);
						}
						else
						{
							value = product.getAttribute(name);
							value = value != null ? value : pa.getDefaultValue();
						}
	
						if (value == null ||
							((value instanceof String) && ((String)value).trim().equals(""))) continue;
						
						out.println("<FEATURE>");
						BMEcatExportUtil.writeElement(out, this, "ProductAttribute:Name", 
							name, "FNAME", 60, false);
						out.println();
						BMEcatExportUtil.writeElement(out, this, "Product:" + name, 
							getFormattedValue(value, null), "FVALUE", 60, false);
						out.println();
						BMEcatExportUtil.writeElement(out, this, "ProductAttribute:Unit",
							pa.getUnit(), "FUNIT", 20, true);
						out.println();
						out.println("</FEATURE>");
					}
				}
	
				out.println("</ARTICLE_FEATURES>");
			} // if (categoryName != null && !categoryName.equals("")) 
		} // for(ProductCategoryAssignment pca:pcas)
	}

	outer:for (int i = 1;;++i)
	{
		out.println("<ARTICLE_FEATURES>");
		
		String classSystemName = product.getString("BME_ARTICLE_FEATURES_" + i + "_FEATURE_SYSTEMNAME");
		if (classSystemName != null)
		{
			BMEcatExportUtil.writeElement(out, this, "Product:BME_ARTICLE_FEATURES_" + i + "_FEATURE_SYSTEMNAME",
				classSystemName, "REFERENCE_FEATURE_SYSTEM_NAME", 50, true);
			out.println();
			String classCodeID = null;
			AttributeValue classCodeName = null;
			
			if ((classCodeID = product.getString("BME_ARTICLE_FEATURES_" + i + "_FEATURE_GROUPID")) != null)
			{
				BMEcatExportUtil.writeElement(out, this, "Product:BME_ARTICLE_FEATURES_" + i + "_FEATURE_GROUPID", 
					classCodeID, "REFERENCE_FEATURE_GROUP_ID", 60, false);
				out.println();
			}
			else if ((classCodeName = product.getAttributeValue("BME_ARTICLE_FEATURES_" + i + "_FEATURE_GROUPID", locale)) != null)
			{
				BMEcatExportUtil.writeElement(out, this, "Produt:BME_ARTICLE_FEATURES_" + i + "_FEATURE_GROUPID", 
					classCodeName.getStringValue(), "REFERENCE_FEATURE_GROUP_NAME", 60, true);
				out.println();
			}
		}

		for (int j = 1;; ++j)
		{
			String key = "BME_ARTICLE_FEATURES_" + i + "_FEATURE_" + j;
			String fname = product.getString(key + "_FNAME");

			if (classSystemName == null && fname == null) 
			{
				out.println("</ARTICLE_FEATURES>");
				break outer;
			}

			if (fname == null) break;	

			out.println("<FEATURE>");
			BMEcatExportUtil.writeElement(out, this, "Product:" + key + "_FNAME", 
				fname, "FNAME", 60, false);
			out.println();

			for (int k = 1;; ++k)
			{
				AttributeValue fvalue = product.getAttributeValue(key + "_FVALUE" + k, locale);

				if (fvalue == null) break;

				out.println("<FVALUE>" + encodeString(fvalue.getStringValue()) + "</FVALUE>");
				BMEcatExportUtil.writeElement(out, this, "Product:" + key + "_FVALUE" + k, 
					fvalue.getStringValue(), "FVALUE", 60, false);
				out.println();	
			}

			BMEcatExportUtil.writeElement(out, this, "Product:" + key + "_FUNIT", 
				product.getString(key + "_FUNIT"), "FUNIT", 0, true);
			out.println();

			BMEcatExportUtil.writeElement(out, this, "Product:" + key + "_FORDER", 
				product.getString(key + "_FORDER"), "FORDER", 10, true);
			out.println();

			AttributeValue fdescr = product.getAttributeValue(key + "_FDESCR", locale);
			if (fdescr != null)
			{
				BMEcatExportUtil.writeElement(out, this, "Product:" + key + "_FDESCR", 
					fdescr.getStringValue(), "FDESCR", 250, false);
				out.println();
			}

			AttributeValue fvalueDetails = product.getAttributeValue(key + "_FVALUE_DETAILS", locale);
			if (fvalueDetails != null)
			{
				BMEcatExportUtil.writeElement(out, this, "Product:" + key + "_FAVALUE_DETAILS", 
					fvalueDetails.getStringValue(), "FVALUE_DETAILS", 250, false);
				out.println();
			}

			out.println("</FEATURE>");	
		}

		out.println("</ARTICLE_FEATURES>");
	}

      out.write('\n');
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
