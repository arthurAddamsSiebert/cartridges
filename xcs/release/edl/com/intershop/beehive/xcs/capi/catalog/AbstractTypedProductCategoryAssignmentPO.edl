import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/catalog/AbstractProductCategoryAssignmentPO.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/catalog/CatalogCategoryPO.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/product/ProductPO.edl";

external TypedProductCategoryAssignment type "com.intershop.beehive.xcs.capi.catalog.TypedProductCategoryAssignment";

namespace com.intershop.beehive.xcs.capi.catalog
{
    /*
     * There are different types of AbstractProductCategoryAssignments.
     * Plain ProductCategoryAssignment is used to assign products to
     * the category tree for catalog browsing, whereas other
     * POs derived from AbstractProductCategoryAssignmentPO
     * (like this AbstractTypedProductCategoryAssignmentPO here)
     * may be used for purposes like defining hot deal products of a category
     * or cross sell products for a category or any other product-category
     * relations which should (by default) not show up in the regular product
     * list of a category when browsing the catalog tree.
     * @see com.intershop.beehive.xcs.capi.catalog.TypedProductCategoryAssignment
     */
    abstract oca timestamp orm class AbstractTypedProductCategoryAssignmentPO implements TypedProductCategoryAssignment
    {
        primary key(catalogCategoryID, productID, domainID, typeCodeInteger);

        index(catalogCategoryID);

        index(productID);

        /*
         * The UUID of the CatalogCategory the assigment points to.
         */
        attribute catalogCategoryID : uuid required searchable;

        /*
         * The UUID of the Product which is bound to a CatalogCategory.
         */
        attribute productID : uuid required;

        /*
         * The UUID of the Domain to which the ProductCategoryAssignment is assigned.
         */
        attribute domainID : uuid;

        /*
         * The integer typeCode of the TypedProductCategoryAssignment.
         * This is a TypeCodeDefinition:TypeCode out of the TypeCodeDefinitions with TypeCodeDefinition:Group equal to constant TypedProductCategoryAssignment:TypeCodeDefinitionGroup.
         * Attention: The CAPI interface TypedProductCategoryAssignment deals only with the string representations of typeCodes (TypeCodeDefinition:Name).
         * @see com.intershop.component.foundation.capi.typecode.TypeCodeDefinition
         * @see com.intershop.component.foundation.capi.typecode.TypeCodeRegistry
         */
        attribute typeCodeInteger : int required column "TYPECODE";

        attribute assignmentOnline : boolean = true;

        attribute position : double;

        dependency productPO : ProductPO
        {
            foreign key(productID);
        }

        dependency catalogCategoryPO : CatalogCategoryPO
        {
            foreign key(catalogCategoryID);
        }
    }
/* here is the original, intendend solution where AbstractTypedProductCategoryAssignmentPO extends AbstractProductCategoryAssignmentPO:
    abstract orm class AbstractTypedProductCategoryAssignmentPO extends AbstractProductCategoryAssignmentPO implements TypedProductCategoryAssignment
    {
        primary key(catalogCategoryID, productID, domainID, typeCodeInteger);

        attribute typeCodeInteger : int required column "TYPECODE";
    }
*/
}
