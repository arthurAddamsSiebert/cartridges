import "enfinity:/core/edl/com/intershop/beehive/core/capi/localization/LocaleInformation.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/product/ProductAttributeEnumeration.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/producttype/ProductType.edl";

external SystemException type "com.intershop.beehive.core.capi.common.SystemException";

namespace com.intershop.beehive.xcs.capi.producttype
{
    /*
     * A ProductAttribute represents a mask for an attribute corresponding to a product attribute.<p>
     * ProductAttributes may have different types such as alphanumeric or numeric (which is stored in the attribute valueType).
     * 
     * <p>
     * A ProductAttribute may have a unit like 'kg' or 'cm'.
     * 
     * @isobject
     */
    cartridge interface ProductAttribute extends ProductAttributeEnumeration
    {
        /*
         * The UUID of the ProductType which hosts this ProductAttribute.
         */
        attribute productTypeID : string required readonly;

        /*
         * Flag indicating whether this ProductAttribute will be required during ordering a product which refers through a ProductType to this ProductAttribute.
         */
        attribute orderRequired : boolean required;

        /*
         * Flag indicating whether the ProductAttribute provides multiple values. The set of values, which is provided by the superclass ProductAttributeEnumeration, can be used as a predefined set of possible values for this ProductAttribute.
         */
        attribute enumeration : boolean required;

        /*
         * The unit of the ProductAttribute. E.g. a unit like "meter" for a ProductAttribute called "lenght".
         */
        attribute unit : string required localized;

        relation productType : ProductType[0..1];

        /*
         * * Set an integer value as default value for this attribute.
         * * The integer is stored <B>non-localized</B>.
         * *
         * * @param attributeValue value for the attribute
         * * @exception java.lang.IllegalArgumentException If there exists already a
         * * default value of another type then Integer or if the previously
         * * value was localized. The old default value must be first removed.
         */
        operation setDefaultIntegerValue(attributeValue : Integer) : void throws SystemException;

        /*
         * * Returns the non-localized default integer value for this attribute.
         * *
         * * @return the default Integer value for this attribute
         * * @isattribute DefaultIntegerValue
         */
        operation getDefaultIntegerValue() : Integer throws SystemException;

        /*
         * * Add a localized integer value as default value for this attribute
         * * for a specific locale.
         * * The integer is stored <B>localized</B>.
         * *
         * * @param attributeValue a integer value for this attribute
         * * @param aLocale the locale for the value
         * * @exception java.lang.IllegalArgumentException If there exists already a
         * * default value of another type then Integer or if the previously
         * * value was not localized. The old default value must be first removed.
         */
        operation setDefaultIntegerValue(attributeValue : Integer, aLocale : LocaleInformation) : void throws SystemException;

        /*
         * * Returns the localized default integer value for this attribute.
         * *
         * * @param aLocale the locale for the value
         * * @return the default Integer value for this attribute
         */
        operation getDefaultIntegerValue(aLocale : LocaleInformation) : Integer throws SystemException;

        /*
         * * Set a String value as default value for this attribute.<BR>
         * * The String is stored <B>non-localized</B>.
         * *
         * * @param attributeValue a string value for the attribute
         * * @exception java.lang.IllegalArgumentException If there exists already a
         * * default value of another type then String or if the previously
         * * value was localized. The old default value must be first removed.
         */
        operation setDefaultStringValue(attributeValue : string) : void throws SystemException;

        /*
         * * Returns the non-localized default string value for this attribute.
         * *
         * * @return the default string value for this attribute
         * * @isattribute DefaultStringValue
         */
        operation getDefaultStringValue() : string throws SystemException;

        /*
         * * Set a String value as default value for this attribute for a specific
         * * locale.
         * * The String is stored <B>localized</B>
         * *
         * * @param attributeValue a string value for the attribute
         * * @param locale a locale for the value
         * * @exception java.lang.IllegalArgumentException If there exists already a
         * * default value of another type then String or if the previously
         * * value was not localized. The old default value must be first removed.
         */
        operation setDefaultStringValue(attributeValue : string, locale : LocaleInformation) : void throws SystemException;

        /*
         * * Returns the localized default string value for this attribute.
         * *
         * * @param aLocale the locale for the value
         * * @return the default String value for this attribute
         */
        operation getDefaultStringValue(aLocale : LocaleInformation) : string throws SystemException;

        /*
         * * Set a Double value as default value for this attribute.
         * * The double is stored <B>non-localized</B>.
         * *
         * * @param attributeValue value for the attribute
         * * @exception java.lang.IllegalArgumentException If there exists already a
         * * default value of another type then Double or if the previously
         * * value was localized. The old default value must be first removed.
         */
        operation setDefaultDoubleValue(attributeValue : Double) : void throws SystemException;

        /*
         * * Returns the non-localized default Double value for this attribute.
         * *
         * * @return the default Double value for this attribute
         * * @isattribute DefaultDoubleValue
         */
        operation getDefaultDoubleValue() : Double throws SystemException;

        /*
         * * Set a Double value as default value for this attribute for a specific
         * * locale.
         * * The double is stored <B>localized</B>.
         * *
         * * @param attributeValue double value for this attribute
         * * @param aLocale a locale for the value
         * * @exception java.lang.IllegalArgumentException If there exists already a
         * * default value of another type then Double or if the previously
         * * value was not localized. The old default value must be first removed.
         */
        operation setDefaultDoubleValue(attributeValue : Double, aLocale : LocaleInformation) : void throws SystemException;

        /*
         * * Returns the localized default Double value for this attribute.
         * *
         * * @param aLocale the locale for the value
         * * @return the default Double value for this attribute
         */
        operation getDefaultDoubleValue(aLocale : LocaleInformation) : Double throws SystemException;

        /*
         * * Returns the not-localized default value for this attribute.
         * *
         * * @return the not-localized default value for this attribute
         */
        operation getDefaultValue() : Object throws SystemException;

        /*
         * * Returns the localized default value for this attribute.
         * *
         * * @param aLocale the locale for the value
         * * @return the default value for this attribute
         */
        operation getDefaultValue(aLocale : LocaleInformation) : Object throws SystemException;

        /*
         * * Removes the default value.
         */
        operation removeDefaultValue() : void throws SystemException;

        operation getProductTypeIDNull() : boolean;

        /*
         * Sets the value of the localized extensible object attribute
         * "unit" for the lead locale.<p>
         * 
         * The unit of the ProductAttribute. E.g. a unit like "meter" for a ProductAttribute called "length".
         */
        operation setUnit(unit : string) : void;
    }
}
