import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/catalog/CatalogCategoryLink.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/product/Product.edl";

external SystemException type "com.intershop.beehive.core.capi.common.SystemException";
external PageableIterator type "com.intershop.beehive.core.capi.paging.PageableIterator";
external AuthorizationObject type "com.intershop.beehive.core.capi.security.AuthorizationObject";
external Positionable type "com.intershop.beehive.core.capi.util.Positionable";
external ImageReferenceHolder type "com.intershop.component.image.capi.common.ImageReferenceHolder";
external Nameable type "com.intershop.beehive.core.capi.util.Nameable";

namespace com.intershop.beehive.xcs.capi.catalog
{
    /*
     * A CatalogCategory is the outside visible part of a catalog which is used to present products and sub-categories in a hierarchical structure.
     * <p>
     * Be aware that a product is bound through a ProductCategoryAssignment into the catalog.
     * <p>
     * The sub-categories are frequently called child CatalogCategories.
     * 
     * @isobject
     */
    cartridge interface CatalogCategory extends ExtensibleObject, AuthorizationObject, Positionable, ImageReferenceHolder, Nameable
    {
        /*
         * The name of the catalog category. This name should be used to uniquely identify a category within any given domain. This category name provides an alternative lookup mechanism for catalog categories frequently used in the storefront.
         */
        attribute name : string required;

        /*
         * The file name of the template used to display the catalog category.
         */
        attribute template : string required;

        /*
         * This attribute is used to assign a serialized catalog query to the catalog category. Queries assigned to catalog categories can be used to automatically assign products to the catalog category. The products assigned are the ones identified by the query.
         */
        attribute productQueryString : string required;

        /*
         * The localized name of the catalog category. Intended to be used as the external visible name of the catalog category.
         */
        attribute displayName : string required localized;

        /*
         * The localized description of the catalog category.
         */
        attribute description : string required localized;

        /*
         * The localized content of the catalog category.
         */
        attribute richContent: string required localized;

        /*
         * The online flag indicates whether the catalog category is set online or offline. Initially, all catalog categories are set online.
         */
        attribute online : boolean required;

        /*
         * The hotdeals flag indicates whether the catalog category is a category that contains hotdeals. Initially, the flag is set to false, indicating that the category is just an ordinary category within the catalog.
         */
        attribute hotDealsCategory : boolean required;

        /*
         * The UUID of the parent catalog category. Note that any given category can only have one parent.
         */
        attribute parentCategoryID : string required readonly;

        /*
         * The UUID of the associated hotdelas category. Special product offers can be assigned to the hotdeals category of the category they are normally assigned to.
         */
        attribute hotDealsCategoryID : string required readonly;

        /*
         * indicates that this CatalogCategory is the root category of the Domain to which this CatalogCategory is assigned
         */
        attribute rootCategory : boolean required;

        /*
         * Indicates the position of the category in order to other categories of the same category level.
         */
        attribute position : double;

        attribute productBindingAttribute : string;

        attribute productBindingValue : string;

        attribute productBindingType : int;
        
        /*
         * The name of the (optional) assigned SearchQueryDefinition (SQD). The SQD is send to a search engine to assign products dynamically based on the query results. 
         */
        attribute searchQueryDefinitionName : string;

        relation incomingCategoryLinks : CatalogCategoryLink[0..n] readonly;

        relation outgoingCategoryLinks : CatalogCategoryLink[0..n] readonly;

        /*
         * * Provides the actions required to initialize a CatalogCategory
         * * correctly.
         */
        operation init() : void throws SystemException;

        /*
         * Set the child CatalogElements recursively online or offline.
         * 
         * @param anOnlineFlag true for online; false for offline
         */
        operation setRecursivelyOnline(anOnlineFlag : boolean) : void throws SystemException;

        /*
         * Creates an iterator on all custom category attribute names of the catalog
         * category.
         * 
         * @return An iterator on the names of custom category attributes.
         * @isiterator CustomCategoryAttributeNames java.lang.String
         */
        operation createCustomCategoryAttributeNamesIterator() : Iterator;

        /*
         * Returns an iterator on all custom category attributes of the catalog
         * category.
         * <p>The current session's locale is used to determine localized attribute value
         * elements.  The locale fallback strategy is used.
         * 
         * @return An iterator on all custom category attributes.
         * @isiterator CustomCategoryAttributes com.intershop.beehive.core.capi.common.AttributeValue
         */
        operation createCustomCategoryAttributesIterator() : Iterator;

        /*
         * Checks whether the catalog category has subcategories (online and
         * offline).
         * 
         * @return true if the catalog category has subcategories, false otherwise.
         */
        operation hasSubCategories() : boolean;

        /*
         * Creates a pageable iterator providing online subcategories of this
         * 
         * catalog category
         * 
         * 
         * 
         * @return A pageable iterator providing online subcategories.
         * 
         * @isiterator OnlineSubCategories com.intershop.beehive.xcs.capi.catalog.CatalogCategory
         */
        operation createOnlineSubCategoriesIterator() : PageableIterator;

        /*
         * Checks whether the catalog category has online subcategories.
         * 
         * @return True if the catalog category has online subcategories, false otherwise.
         */
        operation hasOnlineSubCategories() : boolean;

        /*
         * Creates a pageable iterator providing offline subcategories of this
         * catalog category
         * 
         * @return A pageable iterator providing offline subcategories.
         * @isiterator OfflineSubCategories com.intershop.beehive.xcs.capi.catalog.CatalogCategory
         */
        operation createOfflineSubCategoriesIterator() : PageableIterator;

        
        /*
         * Checks whether this category contains any products (online and offline).
         * 
         * @return true if this category contains products, false otherwise.
         */
        operation hasProducts(domain : Domain) : boolean;
        
        
        /*
         * Checks whether the specified product is bound to this catalog category.
         * 
         * @param product The product to check.
         * @return true if the product is bound to this category, false otherwise.
         */
        operation isInProducts(product : Product) : boolean;

        /*
         * Checks whether this category contains any products that are online.
         * 
         * @return True if the category contains any online products, false otherwise.
         */
        operation hasOnlineProducts(domain : Domain) : boolean;


        /*
         * * Returns the object for the relation 'hotDealsCategory'.<p>
         * *
         * *
         * * @return      the object for the relation 'hotDealsCategory'
         * * @isattribute HotDealsCategory
         */
        operation getHotDealsCategory() : CatalogCategory;

        /*
         * * Sets the object for the relation 'hotDealsCategory'.<p>
         * *
         * *
         * * @param       hotDealsCategory                  the new object for the relation
         */
        operation setHotDealsCategory(hotDealsCategory : CatalogCategory) : void throws SystemException;

        /*
         * Returns the object for the relation 'hotDealsOwner'.<p>
         * 
         * 
         * @return      the object for the relation 'hotDealsOwner'
         * @isattribute HotDealsOwner
         */
        operation getHotDealsOwner() : CatalogCategory;

        /*
         * * Sets the object for the relation 'hotDealsOwner'.<p>
         * *
         * *
         * * @param       hotDealsOwner                  the new object for the relation
         */
        operation setHotDealsOwner(hotDealsOwner : CatalogCategory) : void throws SystemException;

        /*
         * Checks whether the specified element participates in the relationship.<p>
         */
        operation isInSubCategories(anElement : CatalogCategory) : boolean;

        /*
         * Determines the number of elements participating in the relationship.<p>
         */
        operation getSubCategoriesCount() : int;

        /*
         * Creates a pageable iterator containing the elements of the relationship.
         * The pagesize is set to the number of elements in the relationship. Thus,
         * by default, all elements of the relationship will reside on one page.<p>
         */
        operation createSubCategoriesIterator() : PageableIterator;

        /*
         * Associates an object via the relation 'subCategories'.<p>
         */
        operation addToSubCategories(anElement : CatalogCategory) : void;

        /*
         * Removes an associated object from the relation 'subCategories'.<p>
         */
        operation removeFromSubCategories(anElement : CatalogCategory) : void;

        /*
         * Returns the object for the relation 'parent'.<p>
         */
        operation getParent() : CatalogCategory;

        /*
         * Sets the object for the relation 'parent'.<p>
         */
        operation setParent(anElement : CatalogCategory) : void;

        operation getParentCategoryIDNull() : boolean;

        operation getHotDealsCategoryIDNull() : boolean;

        operation getNameNull() : boolean;

        operation setNameNull(aFlag : boolean) : void;

        operation getTemplateNull() : boolean;

        operation setTemplateNull(aFlag : boolean) : void;

        operation getProductQueryStringNull() : boolean;

        operation setProductQueryStringNull(aFlag : boolean) : void;

        /*
         * Returns products for this category sorted by position attribute (ASCENDING).
         * @deprecated use createSortedProductsIterator(aDomain : Domain ) 
         */
        operation createSortedProductsIterator() : Iterator;
        
        /*
         * Returns products for this category and residing in given domain sorted by position attribute (ASCENDING).
         */
        operation createSortedProductsIterator(aDomain : Domain ) : Iterator;
        
        /*
         * Returns products (only online) for this category and residing in given domain sorted by position attribute (ASCENDING).
         */
        operation createOnlineSortedProductsIterator(aDomain : Domain ) : Iterator;
        
        /*
         * Returns products (only offline) for this category and residing in given domain sorted by position attribute (ASCENDING).
         */
        operation createOfflineSortedProductsIterator(aDomain : Domain ) : Iterator;

        /*
         * Returns products for this category optionally sorted by position attribute in the specified direction (-1=sort DESCENDING, 0=no sort, +1=sort ASCENDING)
         * @deprecated use createSortedProductsIterator(aDomain : Domain, direction : int)
         */
        operation createSortedProductsIterator(direction : int) : Iterator;
        
        /*
         * Returns products for this category and residing in given domain optionally sorted by position attribute in the specified direction (-1=sort DESCENDING, 0=no sort, +1=sort ASCENDING)
         */
        operation createSortedProductsIterator(aDomain : Domain, direction : int) : Iterator;
        
        /*
         * Returns products (only online) for this category and residing in given domain optionally sorted by position attribute in the specified direction (-1=sort DESCENDING, 0=no sort, +1=sort ASCENDING)
         */
        operation createOnlineSortedProductsIterator(aDomain : Domain, direction : int) : Iterator;
        
        /*
         * Returns products (only offline) for this category and residing in given domain optionally sorted by position attribute in the specified direction (-1=sort DESCENDING, 0=no sort, +1=sort ASCENDING)
         */
        operation createOfflineSortedProductsIterator(aDomain : Domain, direction : int) : Iterator;

        

        /* 
         * Returns maximum value of 'position' attribute held by this category's products.
         */
        operation getProductsMaxPosition(d: Domain ) : double;

        /*
         * Returns minimum value of 'position' attribute held by this category's  products.
         */
        operation getProductsMinPosition(d: Domain) : double;

        /*
         * Sets the position attribute for the given product.
         */
        operation setProductPosition(product : Product, position : double) : void;

        /*
         * Returns the position attribute for the given product, or -1 if the product is not assigned to this category.
         */
        operation getProductPosition(product : Product) : double;

        /*
         * Returns true if position attribute for the given product is set to null, otherwise false.
         */
        operation getProductPositionNull(product : Product) : boolean;

        /*
         * Sets the 'AssignmentOnline' attribute for the given product.
         */
        operation setProductAssignmentOnline(product : Product, online : boolean) : void;

        /*
         * Returns the 'AssignmentOnline' attribute for the given product.
         */
        operation isProductAssignmentOnline(product : Product) : boolean;

        /*
         * Sets position attribute for the given product (if assigned to this catalog) to null.
         */
        operation setProductPositionNull(product : Product) : void;

        /*
         * Returns subcategories of this category sorted by position attribute (ASCENDING).
         */
        operation createSortedSubCategoriesIterator() : Iterator;

        /*
         * Returns subcategories of this category optionally sorted by position attribute in the specified direction (-1=sort DESCENDING, 0=no sort, +1=sort ASCENDING)
         */
        operation createSortedSubCategoriesIterator(direction : int) : Iterator;

        /*
         * Returns maximum value of 'position' attribute held by this category's subcategories.
         */
        operation getSubCategoriesMaxPosition() : double;

        /*
         * Returns minimum value of 'position' attribute held by this category's subcategories.
         */
        operation getSubCategoriesMinPosition() : double;

        /*
         * Creates an iterator containing all online products
         * assigned to this catalog catagory and residing in given domain.
         * 
         * @param domain The domain of products.
         * @return A pageable iterator of products belonging to given category.
         */
        operation createOnlineProductsIterator(domain : Domain) : PageableIterator;

        /*
         * Creates an iterator containing all products (online and offline) assigned to this catalog catagory and residing in given domain.
         * 
         * 
         * 
         * @return An iterator containing all products of the category.
         * 
         * @isiterator Products com.intershop.beehive.xcs.capi.product.Product
         */
        operation createProductsIterator(domain : Domain) : PageableIterator;
    }
}
