import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/producttype/ProductAttribute.edl";

namespace com.intershop.beehive.xcs.capi.producttype
{
    /*
     * A Product Type is used to group Products with the same characteristics for  their comparison and provides a set of ProductAttributes.
     * <p>
     * Products having the same Product Type can be compared with each other, because they have the same ProductAttributes.
     * <p> Using the ProductTypeMgr the names of the ProductTypes can be keeped unique within a domain.
     * @isobject
     */
    cartridge interface ProductType extends ExtensibleObject
    {
        /*
         * The name of the ProductType used to identify the ProductType by a readable identifier.
         * <p>
         * Uniqueness of the name of a ProductType can be keeped by using the ProductTypeMgr.
         * 
         * @see com.intershop.beehive.xcs.capi.producttype.IProductTypeMgr#isUniqueProductTypeName
         */
        attribute name : string required;

        /*
         * The UUID of the assigned parent ProductType.
         * <p>
         * Each ProductType except the Basic-ProductType has a parent ProductType.
         */
        attribute parentProductTypeID : string required readonly;

        /*
         * The localized name of a ProductType. Can be used to provide a name for a ProductType in different locales.
         */
        attribute displayName : string required localized;

        /*
         * Each domain have one  default product type, this flag indicates if a product type is the default product type
         */
        attribute ^default : boolean required;

        relation productAttributes : ProductAttribute[0..n] readonly;

        relation parentProductType : ProductType[0..1];

        relation childProductTypes : ProductType[0..n];

        /*
         * Returns an VariationType for a given name owned by this ProductType.
         * 
         * @param attributeName name of the ProductAttribute owned by this ProductType
         * @return ProductAttribute that matches the given name
         */
        operation getProductAttribute(attributeName : string) : ProductAttribute;

        /*
         * Returns an iterator on ProductTypes that are child ProductTypes of this ProductType and that are assigned to the given Domain.
         * 
         * @return an iterator on ProductTypes
         * @isiterator ChildProductTypes com.intershop.beehive.xcs.capi.producttype.ProductType
         */
        operation createChildProductTypesIterator(aDomain : Domain) : Iterator;

        /*
         * Returns an iterator on all ProductAttributes for this ProductType (including the ProductAttributes of the parent ProductType(s) ).
         * 
         * @return an iterator over all parents of this ProductType
         * @isiterator AllProductAttributes com.intershop.beehive.xcs.capi.producttype.ProductAttribute
         */
        operation createAllProductAttributesIterator() : Iterator;

        /*
         * Returns an iterator on all custom ProductAttributes (ProductAttributes which are not part of the BasicProductType like the ProductAttribute for the product attribute "name").
         * 
         * @return an iterator on ProductAttributes
         * @see com.intershop.beehive.xcs.capi.producttype.CustomProductAttributesFilterCondition
         * @isiterator CustomProductAttributes com.intershop.beehive.xcs.capi.producttype.ProductAttribute
         */
        operation createCustomProductAttributesIterator() : Iterator;

        /*
         * Returns an iterator of custom attributes (of type AttributeValue).
         * 
         * @return An iterator of custom attributes.
         */
        operation createCustomAttributesIterator() : Iterator;

        operation getParentProductTypeIDNull() : boolean;
    }
}
