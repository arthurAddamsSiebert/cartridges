import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external PriceConstants type "com.intershop.beehive.xcs.capi.price.PriceConstants";

namespace com.intershop.beehive.xcs.capi.price
{
    /*
     * Stores scaled product prices for a given product, usergroup and currency.
     * The prices are stored as pairs of FromQuantity and Value attributes, accessed through methods <code>getValue(int position)</code> and <code>getFromQuantity(int position)</code>.
     * <p>
     * Example for a ScaledPrice defined for a given Product, UserGroup and Currency 'USD', where the price is reduced from $10 when 1 to 9 items are purchased to $9 when between 10 and 24 items are purchased and to $8 when 25  or more items are purchased:
     * <table>
     * <tr><td>Position</td><td>FromQuantity</td><td>Value</td></tr>
     * <tr><td>0</td>       <td>1</td>           <td>10</td></tr>
     * <tr><td>1</td>       <td>10</td>          <td>9</td></tr>
     * <tr><td>2</td>       <td>25</td>          <td>8</td></tr>
     * </table>
     * 
     * <p>Note: Any number of FromQuantity-Price pairs can be defined.
     * 
     * @isobject ScaledPrice
     */
    cartridge interface ScaledPrice extends PriceConstants
    {
        /*
         * The product sku.
         */
        attribute productRefSKU : string readonly required;

        /*
         * The product domain name.
         */
        attribute productRefDomainName : string readonly required;

        /*
         * The user group name.
         */
        attribute userGroupID : string readonly required;

        /*
         * The user group domain uuid.
         */
        attribute userGroupDomainID : string readonly required;

        /*
         * The currency of the price.
         */
        attribute currency : string readonly required;

        /*
         * Flag, indicating whether this is a net price or not.
         */
        attribute netPrice : boolean required;

        /*
         * The uuid of the related domain.
         */
        attribute domainID : string required;

        /*
         * Returns the value of attribute 'value' for the given 'quantity'. The method first checks to see if a price is defined for exactly the given quantity. If not the preis for the applicable quantity is returned, otherwise null is returned.
         * 
         * <p>Example,
         * <br>if a price '$105' is defined from quantity '5' and
         * <br>a price '$102' from quantity '10' then this method would return:
         * <br>'102' for parameter '10', '105' for a parameter '7' and null for a parameter '4'.
         * 
         * @param     quantity Quantity to lookup price for
         * @return      the price or null if none defined
         * @isattribute Value
         */
        operation getValue(quantity : decimal) : decimal;

        /*
         * Sets the value of the attribute 'value' for given 'from quantity', i.e. this price should be charged for quantities greater or equal to the given quantity..<p>
         * 
         * @param     fromQuantity the quantity
         * @param       value        the new value of the attribute
         */
        operation setValue(quantity : decimal, value : decimal) : void;

        /*
         * Checks whether the value is null for the given quantity. See method <code>getQuantity</code><p>
         * 
         * @param     quantity Quantity to check
         * @return      true if no price defined for the given quantity
         * @isattribute ValueNull
         */
        operation getValueNull(quantity : decimal) : boolean;

        /*
         * Returns the value of attribute 'value' for the given 'quantity'. The method first checks to see if a price is defined for exactly the given quantity. If not the preis for the applicable quantity is returned, otherwise null is returned.
         * 
         * <p>Example,
         * <br>if a price '$105' is defined from quantity '5' and
         * <br>a price '$102' from quantity '10' then this method would return:
         * <br>'102' for parameter '10', '105' for a parameter '7' and null for a parameter '4'.
         * 
         * @param     quantity Quantity to lookup price for
         * @return      the price or null if none defined
         * @isattribute Value
         */
        operation getPriceEntry(quantity : decimal) : Money;

        /*
         * Returns the quantity from which the value at given position is charged.<p>
         * 
         * @return      the defined from quantities as an iterator
         */
        operation createQuantitiesIterator() : Iterator;

        /*
         * Returns the lowest price entry defined or null if none defined
         * 
         * @return      the lowest price or null if none defined
         * @isattribute LowestPriceEntry
         */
        operation getLowestPriceEntry() : Money;

        /*
         * Returns the highest price entry defined or null if none defined
         * 
         * @return      the highest price or null if none defined
         * @isattribute HighestPriceEntry
         */
        operation getHighestPriceEntry() : Money;

        /*
         * Returns the lowest quantity defined or null if none defined
         * 
         * @return      the lowest quantity or null if none defined
         * @isattribute LowestQuantity
         */
        operation getLowestQuantity() : decimal;

        /*
         * Returns the highest quantity defined or null if none defined
         * 
         * @return      the highest quantity or null if none defined
         * @isattribute HighestQuantity
         */
        operation getHighestQuantity() : decimal;

        /*
         * This field contains the timestamp the objects was written to the database.
         */
        operation getLastModified() : datetime;

        /*
         * This field contains the timestamp the objects was written to the database.
         */
        operation setLastModified(aDate : datetime) : void;
    }
}
