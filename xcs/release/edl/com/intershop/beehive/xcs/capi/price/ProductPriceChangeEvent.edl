import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/profile/Credentials.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/PersistentObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/profile/Profile.edl";


namespace com.intershop.beehive.xcs.capi.price
{
	/*
	 * @author Marcus Lenzner
	 */
	cartridge interface ProductPriceChangeEvent
	{
        /*
         * The domain the object belongs to.
         */
        attribute domainID : string required readonly;

		/*
		 * The date the event happens.
		 */
		attribute eventDate : datetime required readonly;
			
		/*
		 * The date this event was created.
		 */
		attribute creationDate : datetime required;
			
		/*
		 * Type of the event.
		 */
		attribute reasonCode : string required readonly;
		
		/*
		 * The user responsible for this event.
		 * 
		 * @deprecated User shouldn't be used anymore for tracking product price change events. Use Auditing framework to track user changes.
		 */
		relation user : Profile[0..1];
		
		/*
		 * Returns the UUID of the "user".
		 * 
		 * @return the UUID of the "user".
		 *
		 * @deprecated User shouldn't be used anymore for tracking product price change events. Use Auditing framework to track user changes.
		 */
		operation getUserID() : String;
		
		/*
		 * Type of container the object is.
		 */
		attribute objectType : string required readonly;
		
		/*
		 * Product of the event.
		 */
		relation object : PersistentObject[0..1] readonly;
		
		/*
		 * Returns the UUID of the "object".
		 * 
		 * @return the UUID of the "object".
		 */
		operation getObjectID() : String;
		
		/*
         * Returns the Domain associated with this object.
         * The associated Domain is accessed through
         * a weak relation.<p>
         * 
         * This relation references the domain of the object.
         * 
         * @return      the associated object, or null if no instance is associated
         */
        operation getDomain() : Domain;
	}
}