import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/localization/LocaleInformation.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external SystemException type "com.intershop.beehive.core.capi.common.SystemException";

namespace com.intershop.beehive.xcs.capi.product
{
    /*
     * A ProductAttributeEnumeration provides multiple values for an attribute
     * and can be used for a selection of a value from a predefined set of
     * values.
     * 
     * @isobject
     */
    cartridge interface ProductAttributeEnumeration extends ExtensibleObject
    {
        /*
         * A flag indicating whether the values of the ProductAttributeEnumeration are localized.
         */
        attribute ^localized : boolean required;

        /*
         * The name of the attribute for which multiple values are available.
         */
        attribute name : string required;

        /*
         * The type of the values.
         * <p>
         * @see com.intershop.beehive.xcs.capi.product.ProductAttributeEnumerationConstants for the supported typeCodes
         */
        attribute valueType : int required;

        /*
         * The localized name for the ProductAttributeEnumeration.
         */
        attribute displayName : string required localized;

        /*
         * Returns an iterator on a set of string values for this ProductAttributeEnumeration.
         * The set is used to provide multiple possible values for a
         * ProductAttributeEnumeration.
         * 
         * @return an iterator on string values
         * @isiterator StringValues java.lang.String
         */
        operation createStringValuesIterator() : Iterator;

        /*
         * Set string values for this ProductAttributeEnumeration. The set is used to provide
         * multiple possible values for a ProductAttributeEnumeration.
         * 
         * @param anIterator an iterator on a set of string values
         * @exception java.lang.IllegalArgumentException If there is an element in
         * the collection the iterator is working on that has a type different to
         * java.lang.String OR if there exists already a enumeration values of
         * another type then java.lang.String OR if the previously enumeration
         * value was localized. The old enumeration value must be removed first.
         */
        operation setStringValues(anIterator : Iterator) : void;

        /*
         * Returns an iterator on a set of string values for this ProductAttributeEnumeration
         * for a specific locale. The set is used to provide multiple possible values for a
         * ProductAttributeEnumeration.
         * 
         * @param aLocale the locale for the string values
         * @return an iterator on string values
         */
        operation createStringValuesIterator(aLocale : LocaleInformation) : Iterator;

        /*
         * Set string values for this ProductAttributeEnumeration. The set is used to provide
         * multiple possible values for a ProductAttributeEnumeration.
         * 
         * @param anIterator an iterator on the set of string values
         * @param aLocale the locale for the string values
         * @exception java.lang.IllegalArgumentException If there is an element in
         * the collection the iterator is working on that has a type different to
         * java.lang.String OR if there exists already a enumeration values of
         * another type then java.lang.String OR if the previously enumeration
         * value was not localized. The old enumeration value must be removed
         * first.
         */
        operation setStringValues(anIterator : Iterator, aLocale : LocaleInformation) : void;

        /*
         * Returns an iterator on a set of integer values for this ProductAttributeEnumeration.
         * The set is used to provide multiple possible values for a ProductAttributeEnumeration.
         * 
         * @return an iterator on integer values
         * @isiterator IntegerValues java.lang.Integer
         */
        operation createIntegerValuesIterator() : Iterator;

        /*
         * Set integer values for this ProductAttributeEnumeration. The set is used to
         * provide multiple possible values for a ProductAttributeEnumeration.
         * 
         * @param anIterator an iterator on a set of integer values
         * @exception java.lang.IllegalArgumentException If there is an element in
         * the collection the iterator is working on that has a type different to
         * java.lang.Integer OR if there exists already a enumeration values of
         * another type then java.lang.Integer OR if the previously enumeration
         * value was localized. The old enumeration value must be removed first.
         */
        operation setIntegerValues(anIterator : Iterator) : void;

        /*
         * Returns an iterator on a set of integer values for this ProductAttributeEnumeration
         * for a specific locale. The set is used to provide multiple possible values
         * for a ProductAttributeEnumeration.
         * 
         * @param aLocale the locale for the integer values
         * @return an iterator on integer values
         */
        operation createIntegerValuesIterator(aLocale : LocaleInformation) : Iterator;

        /*
         * Set integer values for this ProductAttributeEnumeration. The set is used to
         * provide multiple possible values for a ProductAttributeEnumeration.
         * 
         * @param anIterator an iterator on the set of integer values
         * @param aLocale the locale for the integer values
         * @exception java.lang.IllegalArgumentException If there is an element in
         * the collection the iterator is working on that has a type different to
         * java.lang.Integer OR if there exists already a enumeration values of
         * another type then java.lang.Integer OR if the previously enumeration
         * value was not localized. The old enumeration value must be removed
         * first.
         */
        operation setIntegerValues(anIterator : Iterator, aLocale : LocaleInformation) : void;

        /*
         * Returns an iterator on a set of double values for this ProductAttributeEnumeration.
         * The set is used to provide multiple possible values for a ProductAttributeEnumeration.
         * 
         * @return an iterator on double values
         * @isiterator DoubleValues java.lang.Double
         */
        operation createDoubleValuesIterator() : Iterator;

        /*
         * Set double values for this ProductAttributeEnumeration. The set is used to provide
         * multiple possible values for a ProductAttributeEnumeration.
         * 
         * @param anIterator an iterator on a set of double values
         * @exception java.lang.IllegalArgumentException If there is an element in
         * the collection the iterator is working on that has a type different to
         * java.lang.Double OR if there exists already a enumeration values of
         * another type then java.lang.Double OR if the previously enumeration
         * value was localized. The old enumeration value must be removed first.
         */
        operation setDoubleValues(anIterator : Iterator) : void;

        /*
         * Returns an iterator on a set of double values for this ProductAttributeEnumeration
         * for a specific locale. The set is used to provide multiple possible values
         * for a ProductAttributeEnumeration.
         * 
         * @param aLocale the locale for the double values
         * @return an iterator on double values
         */
        operation createDoubleValuesIterator(aLocale : LocaleInformation) : Iterator throws SystemException;

        /*
         * Set double values for this ProductAttributeEnumeration. The set is used to provide
         * multiple possible values for a ProductAttributeEnumeration.
         * 
         * @param anIterator an iterator on the set of double values
         * @param aLocale the locale for the double values
         * @exception java.lang.IllegalArgumentException If there is an element in
         * the collection the iterator is working on that has a type different to
         * java.lang.Double OR if there exists already a enumeration values of
         * another type then java.lang.Double OR if the previously enumeration
         * value was not localized. The old enumeration value must be removed
         * first.
         */
        operation setDoubleValues(anIterator : Iterator, aLocale : LocaleInformation) : void;

        /*
         * Returns an iterator on the set of not-localized values.
         * 
         * @return an iterator on object values
         */
        operation createObjectValuesIterator() : Iterator;

        /*
         * Returns an iterator on the set of values for a specific locale.
         * 
         * @param aLocale the locale for the values
         * @return an iterator on object values
         */
        operation createObjectValuesIterator(aLocale : LocaleInformation) : Iterator;

        /*
         * Returns the count of values of this ProductAttributeEnumeration.
         * 
         * @return count of values
         * @isattribute ValuesCount
         */
        operation getValuesCount() : int;

        /*
         * Returns the count of values of this ProductAttributeEnumeration for a
         * given Locale.
         * 
         * @param aLocale the locale of the values
         * @return count of values
         */
        operation getValuesCount(aLocale : LocaleInformation) : int;

        /*
         * Removes the enumeration values.
         */
        operation removeEnumerationValues() : void;
    }
}
