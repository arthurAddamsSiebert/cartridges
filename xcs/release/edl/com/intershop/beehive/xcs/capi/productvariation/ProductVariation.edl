import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/product/Product.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/productvariation/ProductVariationValue.edl";

namespace com.intershop.beehive.xcs.capi.productvariation
{
    /*
     * A product master hosts a set of mastered product items (e.g. a set of concret sellable shirts) and a variation model. The variation model contains of a set of variable variation attributes as well as a set of values for each of the variable variation attribute. For each combination of the values one product can be available and will be represented by this class ProductVariation.
     * <p>
     * E.g. the product master could be T-Shirt. VariableVariationAttributes are the "size" and "color" of a T-Shirt. The seller provides T-Shirts in the sizes S,M,L,XL,XXL (5 values) and each in the colors red, blue, green, yellow (4 values). Since the seller provides for each possible combination a concret T-Shirt - 20 mastered Products and 20 corresponding ProductVariations are available.
     * <p>
     * In case the seller removes T-Shirts in the combinations size=S/color=red and size=S/color=blue from the product master, only 18 mastered Products and 18 Productvariations are left.
     */
    cartridge interface ProductVariation extends ExtensibleObject
    {
        /*
         * The UUID of the product master to which the ProductVariation is assigned.
         */
        attribute productMasterID : string required readonly;

        /*
         * The UUID of the mastered product which is represented through this ProductVariation.
         */
        attribute productID : string required readonly;

        relation productVariationValues : ProductVariationValue[0..n];

        relation productMaster : Product[0..1];

        /*
         * Is the given ProductVariationValue contained in the ProductVariation?
         * 
         * @return true if the ProductVariationValue is present, otherwise false.
         */
        operation containsProductVariationValue(pvv : ProductVariationValue) : boolean;

        operation getMasteredProduct() : Product;

        operation setMasteredProduct(aMasteredProduct : Product) : void;

        /*
         * 
         */
        operation containsProductVariationValues(productVariationValues : Vector) : boolean;

        operation getProductIDNull() : boolean;

        operation getProductMasterIDNull() : boolean;
    }
}
