import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/catalog/CatalogCategory.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/product/Product.edl";

external Positionable type "com.intershop.beehive.core.capi.util.Positionable";

namespace com.intershop.beehive.xcs.capi.product
{
    /*
     * A ProductLink represents a relation between two Products which are linked
     * together. The ProductLink logically points from a source Product to a
     * target Product.
     * Each ProductLink has a typeCode. All the typeCodes used by ProductLinks need to be defined by TypeCodeDefinitions.
     * The TypeCodeDefinitions must have a TypeCodeDefinition:Group equal to constant ProductLink:TypeCodeDefinitionGroup.
     * To ensure uniqueness of the TypeCodeDefinition:Name the following naming convention should be used: Use the project name as a prefix for the type code name, followed by an underscore. Standard Enfinity will have to use "ES_" as prefix for its type code names.
     * @see com.intershop.component.foundation.capi.typecode.TypeCodeDefinition
     * @see com.intershop.component.foundation.capi.typecode.TypeCodeRegistry
     * 
     * @isobject
     */
    cartridge interface ProductLink extends ExtensibleObject, Positionable
    {
        /*
         * The UUID of the source Product. This is the Product from which the ProductLink comes.
         */
        attribute sourceID : string readonly required;

        /*
         * The UUID of the target Product. This is the Product where the ProductLink points to.
         */
        attribute targetID : string readonly required;

        attribute domainID : string readonly required;

        /*
         * Used to group ProductLinks based on the UUID of a CatalogCategory which contains the linked (target) Products.
         */
        attribute linkedCatalogCategoryID : string required;

        /*
         * Constant defining the TypeCodeDefinition group used for ProductLinks.
         * All typeCodes used for ProductLinks must to be defined by TypeCodeDefinitions with a TypeCodeDefinition:Group equal to this constant.
         * @see com.intershop.component.foundation.capi.typecode.TypeCodeDefinition
         * @see com.intershop.component.foundation.capi.typecode.TypeCodeRegistry
         */
        constant TypeCodeDefinitionGroup : string = "ProductLink";

        /*
         * The typeCode of a ProductLink.
         * This is a TypeCodeDefinition:Name out of the TypeCodeDefinitions with TypeCodeDefinition:Group equal to constant ProductLink:TypeCodeDefinitionGroup.
         * @see com.intershop.component.foundation.capi.typecode.TypeCodeDefinition
         * @see com.intershop.component.foundation.capi.typecode.TypeCodeRegistry
         */
        attribute typeCode : String readonly required;

        /*
         * The quantity of the linked product.
         */
        attribute quantity : decimal;

        /*
         * The localizable unit of the linked product.
         */
        attribute unit : string localized;

        /*
         * The localizable description of the product link.
         */
        attribute description : string localized;

        relation targetProduct : Product[0..1] readonly;

        relation source : Product[0..1] readonly;

        relation linkedCatalogCategory : CatalogCategory[0..1];

        /*
         * Checks whether the value of the attribute 'linkedCatalogCategoryID' is null.<p>
         * 
         * Used to group ProductLinks based on the UUID of a CatalogCategory which contains the linked (target) Products.
         * 
         * @return true if the value of attribute 'linkedCatalogCategoryID' is null, false otherwise
         */
        operation getLinkedCatalogCategoryIDNull() : boolean;

        /*
         * Sets the value of the attribute 'linkedCatalogCategoryID' to null.<p>
         * 
         * Used to group ProductLinks based on the UUID of a CatalogCategory which contains the linked (target) Products.
         */
        operation setLinkedCatalogCategoryIDNull(aFlag : boolean) : void;

        operation getLastModified() : datetime;

        operation setLastModified(aDate : datetime) : void;

        operation getLastModifiedNull() : boolean;

        operation setLastModifiedNull(aFlag : boolean) : void;

        /*
         * Returns the value of attribute 'position' in the
         * 'ProductLinkPosition' for this 'ProductLink'.
         * 
         * @return the associated object, or null if no instance is associated
         */
        operation getPosition() : double;

        /*
         * Checks whether an entry in 'ProductLinkPosition' for this 
         * 'ProductLink' exists and the value of the attribute 'position' in 
         * this table is null.
         * 
         * @return true if the value of attribute 'position' of 'ProductLinkPosition' is null or no one exists, false otherwise
         */
        operation getPositionNull() : boolean;

        /*
         * Sets the value of the attribute 'position' in the 
         * 'ProductLinkPosition' for this 'ProductLink'.
         * 
         * @param aValue the new value of the attribute
         */
        operation setPosition(aValue : double) : void;

        /*
         * Sets the value of the attribute 'position' in the 
         * 'ProductLinkPosition' for this 'ProductLink' to null.
         * 
         * @param aFlag meaningless
         */
        operation setPositionNull(aFlag : boolean) : void;
        
        /*
         * Returns true if the product link is derived from a base product link.
         */
        operation isDerivedProductLink() : boolean;
    }
}
