import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/catalog/CatalogCategoryPO.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/product/ProductPO.edl";

external Positionable type "com.intershop.beehive.core.capi.util.Positionable";
external AbstractProductCategoryAssignment type "com.intershop.beehive.xcs.capi.catalog.AbstractProductCategoryAssignment";

namespace com.intershop.beehive.xcs.capi.catalog
{
    /*
     * A ProductCategoryAssignment is used to bind a product to a catalog
     * category. Note that a product can have any number of
     * ProductCategoryAssignments. This means that a product can be bound to
     * several catalog categories at the same time.
     * <p>
     * There are different types of ProductCategoryAssignments.
     * ProductCategoryAssignment is used to assign products to
     * the category tree for catalog browsing, whereas other
     * interfaces/classes derived from AbstractProductCategoryAssignment
     * may be used for purposes like defining hot deal products of a category
     * or cross sell products for a category.
     */
    abstract oca timestamp orm class AbstractProductCategoryAssignmentPO implements AbstractProductCategoryAssignment, Positionable
    {
        primary key(catalogCategoryID, productID, domainID);

        index(catalogCategoryID);

        index(productID);

        /*
         * The UUID of the CatalogCategory the assigment points to.
         */
        attribute catalogCategoryID : uuid required searchable;

        /*
         * The UUID of the Product which is bound to a CatalogCategory.
         */
        attribute productID : uuid required;

        /*
         * The UUID of the Domain to which the ProductCategoryAssignment is assigned.
         */
        attribute domainID : uuid;

        attribute assignmentOnline : boolean = true;

        attribute position : double;

        relation productPO : ProductPO[1..1] inverse productCategoryAssignments
        {
            foreign key(productID) -> (UUID);
        }

        dependency catalogCategoryPO : CatalogCategoryPO
        {
            foreign key(catalogCategoryID);
        }
    }
}
