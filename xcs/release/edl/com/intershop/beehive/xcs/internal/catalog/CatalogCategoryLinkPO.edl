import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/catalog/CatalogCategoryLink.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/catalog/CatalogCategoryPO.edl";

namespace com.intershop.beehive.xcs.internal.catalog
{
    /*
     * A CatalogCategoryLink is used to establish cross-relations between CatalogCategories (in opposite to the parent-child relations on which the catalog structure is based).
     * <p>
     * A CatalogCategoryLink points from a so called source CatalogCategory to a target CatalogCategory.
     * <p>
     * A CatalogCategoryLink requires for creation the UUID of the source and the target CatalogCategory.
     */
    orm class CatalogCategoryLinkPO extends ExtensibleObjectPO implements CatalogCategoryLink table "CatalogCategoryLink"
    {
        alternate key(sourceCategoryID, targetCategoryID, domainID, typeCodeInteger);

        index(typeCodeInteger);

        /*
         * The UUID of the CatalogCategory the link originates from.
         */
        attribute sourceCategoryID : uuid required;

        /*
         * The UUID of the CatalogCategory the link points to.
         */
        attribute targetCategoryID : uuid required;

        /*
         * The integer typeCode of the CatalogCategoryLink.
         * This is a TypeCodeDefinition:TypeCode out of the TypeCodeDefinitions with TypeCodeDefinition:Group equal to constant CatalogCategoryLink:TypeCodeDefinitionGroup.
         * Attention: The CAPI interface CatalogCategoryLink deals only with the string representations of typeCodes (TypeCodeDefinition:Name).
         * @see com.intershop.component.foundation.capi.typecode.TypeCodeDefinition
         * @see com.intershop.component.foundation.capi.typecode.TypeCodeRegistry
         */
        attribute typeCodeInteger : int required column "TYPECODE";

        /*
         * The localized name of the link.
         */
        attribute displayName : string localized;

        /*
         * The localized description of the link.
         */
        attribute description : string localized;

        attribute position : double;

        relation targetCategoryPO : CatalogCategoryPO[1..1] inverse incomingCategoryLinkPOs
        {
            foreign key(targetCategoryID) -> (UUID);
        }

        relation sourceCategoryPO : CatalogCategoryPO[1..1] inverse outgoingCategoryLinkPOs
        {
            foreign key(sourceCategoryID) -> (UUID);
        }
    }
}
