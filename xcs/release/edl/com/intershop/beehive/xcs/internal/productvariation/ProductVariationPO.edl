import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/productvariation/ProductVariation.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/product/ProductPO.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/productvariation/ProductVariationAssignmentPO.edl";

namespace com.intershop.beehive.xcs.internal.productvariation
{
    /*
     * A product master hosts a set of mastered product items (e.g. a set of concret sellable shirts) and a variation model. The variation model contains of a set of variable variation attributes as well as a set of values for each of the variable variation attribute. For each combination of the values one product can be available and will be represented by this class ProductVariation.
     * <p>
     * E.g. the product master could be T-Shirt. VariableVariationAttributes are the "size" and "color" of a T-Shirt. The seller provides T-Shirts in the sizes S,M,L,XL,XXL (5 values) and each in the colors red, blue, green, yellow (4 values). Since the seller provides for each possible combination a concret T-Shirt - 20 mastered Products and 20 corresponding ProductVariations are available.
     * <p>
     * In case the seller removes T-Shirts in the combinations size=S/color=red and size=S/color=blue from the product master, only 18 mastered Products and 18 Productvariations are left.
     */
    partitionable orm class ProductVariationPO extends ExtensibleObjectPO implements ProductVariation table "ProductVariation"
    {
        unique index(productMasterID, productID);

        index(productMasterID);

        index(productID);

        /*
         * The UUID of the product master to which the ProductVariation is assigned.
         */
        attribute productMasterID : uuid;

        /*
         * The UUID of the mastered product which is represented through this ProductVariation.
         */
        attribute productID : uuid;

        relation productMasterPO : ProductPO[1..1] inverse productVariationPOs
        {
            foreign key(productMasterID) -> (UUID);
        }

        relation productVariationAssignments : ProductVariationAssignmentPO[0..n] inverse productVariationPO;

        relation masteredProductPO : ProductPO[1..1] inverse productVariationPO
        {
            foreign key(productID) -> (UUID);
        }
    }
}
