import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/price/ProductCostPrice.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/product/ProductPO.edl";

namespace com.intershop.beehive.xcs.internal.price
{
    /*
     * The cost price of the product. The cost price can be used for cost-plus pricing. Cost-plus pricing is a pricing method commonly used by firms. It is used primarily because it is easy to calculate and requires little information. There are several varieties, but the common thread in all of them is that you first calculate the cost of the product, then include an additional amount to represent profit. There are several ways of determining cost, and the profit can be added as either a percentage markup or an absolute amount. To make things simpler, some firms, particularly retailers, ignore fixed costs and just use the purchase price paid to their suppliers as the cost term.
     */
    oca timestamp orm class ProductCostPricePO implements ProductCostPrice table "ProductCostPrice"
    {
        primary key(productID, currency);

        index(productID);

        /*
         * The UUID of the assigned Product.
         */
        attribute productID : uuid required;

        /*
         * The currency of the ProductCostPrice.
         */
        attribute currency : string<3> required;

        /*
         * The monetary value of the ProductCostPrice.
         */
        attribute value : decimal required;

        /*
         * Flag indicating that the ProductCostPrice represents a net price (true = net price). The net price is the price excluding tax.
         */
        attribute netPrice : boolean = true;

		/*
		 * If partitioning is disabled, the domain id might be null. In such case refer the product's domain id.
		 */
        attribute domainID : uuid;

        relation ProductPO : ProductPO[1..1] inverse costPricePOs
        {
            foreign key(productID) -> (UUID);
        }
    }
}
