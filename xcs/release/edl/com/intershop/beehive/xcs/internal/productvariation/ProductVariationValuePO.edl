import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/productvariation/ProductVariationValue.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/productvariation/ProductVariationAssignmentPO.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/productvariation/VariableVariationAttributePO.edl";

namespace com.intershop.beehive.xcs.internal.productvariation
{
    /*
     * A product master hosts a set of mastered product items (e.g. a set of concret sellable shirts) and a variation model. The variation model contains of a set of variable variation attributes (instances of type VariableVariationAttribute) as well as a set of values for each of the variable variation attribute. These values are represented by this class ProductVariationValue.
     * <p>
     * E.g. the product master could be T-Shirt. VariableVariationAttributes are "size" and "color" of a T-Shirt. The seller provide T-Shirts in the size S,M,L,XL,XXL and each in the colors red, blue and green. Each value (S,M,L,XL,XXL,red,blue and green) is represented by a single instance of a ProductVariationValue.
     * <p>
     * The values can be localized too. This means for the variable attribute "color" the values can be in english red, blue und yellow, whereas in german the values are rot, blau und gelb. In that case for each color (red, rot);(blue, blau) and (yellow,gelb) one instance of a ProductVariationValue is provided by the variation model.
     */
    partitionable orm class ProductVariationValuePO extends ExtensibleObjectPO implements ProductVariationValue table "ProductVariationValue"
    {
        index(variableVariationAttributeID);

        /*
         * The UUID of the VariableVariationAttribute.
         */
        attribute variableVariationAttributeID : uuid;

        relation variableVariationAttributePO : VariableVariationAttributePO[1..1] inverse productVariationValuePOs
        {
            foreign key(variableVariationAttributeID) -> (UUID);
        }

        relation productVariationAssignments : ProductVariationAssignmentPO[0..n] inverse productVariationValuePO;
    }
}
