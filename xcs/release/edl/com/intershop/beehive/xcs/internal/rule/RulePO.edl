import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/rule/RuleActionPO.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/rule/RuleConditionPO.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/rule/RuleSetPO.edl";

namespace com.intershop.beehive.xcs.internal.rule
{
    /*
     * This class represents a business rule. A rule defines an action that shall be performed when all rule conditions are satisfied and no exceptional condition is satisfied.
     * <p>
     * A rule has a name, a description and can be disabled. Rules are defined by a seller. They are stored in a seller-specific rule table.
     * 
     * @see         com.intershop.beehive.bts.promotion.rule.RuleCondition
     * @see         com.intershop.beehive.bts.promotion.rule.RuleAction
     * @see         com.intershop.beehive.bts.promotion.rule.RuleSet
     */
    orm class RulePO extends RuleConditionPO table "BusinessRule"
    {
        index(ruleSetID);

        /*
         * This attribute controls whether a rule is enabled of disabled. If set to false, the rule will not be applied.
         */
        attribute enabled : boolean;

        /*
         * This attribute contains the name of the rule as displayed in client applications. The name is not localized.
         */
        attribute name : string<255> required;

        /*
         * This attribute contains the description of the rule as displayed in client applications. The description is not localized.
         */
        attribute description : string<255> required;

        /*
         * This attribute contains the UUID of the rule set the rule belongs to.
         */
        attribute ruleSetID : uuid;

        relation actions : RuleActionPO[0..n] inverse rule;

        relation ruleSet : RuleSetPO[1..1] inverse rules
        {
            foreign key(ruleSetID) -> (UUID);
        }

        relation exceptions : RuleConditionPO[0..n] inverse exceptionRule;

        relation conditions : RuleConditionPO[0..n] inverse conditionRule;
    }
}
