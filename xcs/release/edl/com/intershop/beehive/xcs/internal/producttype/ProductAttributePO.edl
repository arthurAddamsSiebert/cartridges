import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/producttype/ProductAttribute.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/product/ProductAttributeEnumerationPO.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/producttype/ProductTypePO.edl";

external ProductAttributeConstants type "com.intershop.beehive.xcs.capi.producttype.ProductAttributeConstants";

namespace com.intershop.beehive.xcs.internal.producttype
{
    /*
     * A ProductAttribute represents a mask for an attribute corresponding to a product attribute.
     * <p>
     * ProductAttributes may have different types such as alphanumeric or numeric (which is stored in the attribute valueType).  @see com.intershop.beehive.core.common.AttributeDefinitionConstants for the supported typeCodes
     * <p>
     * A ProductAttribute may have a unit like 'kg' or 'cm'.
     */
    partitionable orm class ProductAttributePO extends ProductAttributeEnumerationPO implements ProductAttribute, ProductAttributeConstants table "ProductAttribute"
    {
        index(productTypeID);

        /*
         * The UUID of the ProductType which hosts this ProductAttribute.
         */
        attribute productTypeID : uuid;

        /*
         * Flag indicating whether this ProductAttribute will be required during ordering a product which refers through a ProductType to this ProductAttribute.
         */
        attribute orderRequired : boolean;

        /*
         * Flag indicating whether the ProductAttribute provides multiple values. The set of values, which is provided by the superclass ProductAttributeEnumeration, can be used as a predefined set of possible values for this ProductAttribute.
         */
        attribute enumeration : boolean;

        /*
         * The unit of the ProductAttribute. E.g. a unit like "meter" for a ProductAttribute called "lenght".
         */
        attribute unit : string localized;

        relation productTypePO : ProductTypePO[1..1] inverse productAttributePOs
        {
            foreign key(productTypeID) -> (UUID);
        }
    }
}
