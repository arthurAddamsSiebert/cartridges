import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/catalog/CatalogCategory.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/catalog/CatalogCategoryLinkPO.edl";

namespace com.intershop.beehive.xcs.internal.catalog
{
    /*
     * A CatalogCategory is the outside visible part of a catalog which is used to present products and subcategories in a hierarchical structure.
     * <p>
     * Be aware that a product is bound through a ProductCategoryAssignment into the catalog.
     * <p>
     * The subcategories are frequently called child CatalogCategories.
     */
    partitionable orm class CatalogCategoryPO extends ExtensibleObjectPO implements CatalogCategory table "CatalogCategory"
    {
        index(parentCategoryID);

        index(hotDealsCategoryID);

        index(name);

        index(rootCategory);

        index(productBindingAttribute, productBindingValue);
        
        alternate key (name, domainID);

        /*
         * The name of the catalog category. This name should be used to uniquely identify a category within any given domain. This category name provides an alternative lookup mechanism for catalog categories frequently used in the storefront.
         */
        attribute name : string<256> searchable;

        /*
         * The file name of the template used to display the catalog category.
         */
        attribute template : string<256>;

        /*
         * This attribute is used to assign a serialized catalog query to the catalog category. Queries assigned to catalog categories can be used to automatically assign products to the catalog category. The products assigned are the ones identified by the query.
         */
        attribute productQueryString : string<4000>;

        /*
         * The localized name of the catalog category. Intended to be used as the external visible name of the catalog category.
         */
        attribute displayName : string localized;

        /*
         * The localized description of the catalog category.
         */
        attribute description : string localized;

        /*
         * The localized rich Content of the catalog category.
         */
        attribute richContent : string localized;

        /*
         * The online flag indicates whether the catalog category is set online or offline. Initially, all catalog categories are set online.
         */
        attribute online : boolean = true;

        /*
         * The hotdeals flag indicates whether the catalog category is a category that contains hotdeals. Initially, the flag is set to false, indicating that the category is just an ordinary category within the catalog.
         */
        attribute hotDealsCategory : boolean;

        /*
         * The UUID of the parent catalog category. Note that any given category can only have one parent.
         */
        attribute parentCategoryID : uuid;

        /*
         * The UUID of the associated hotdelas category. Special product offers can be assigned to the hotdeals category of the category they are normally assigned to.
         */
        attribute hotDealsCategoryID : uuid;

        /*
         * indicates that this CatalogCategory is the root category of the Domain to which this CatalogCategory is assigned
         */
        attribute rootCategory : boolean;

        attribute position : double;

        attribute productBindingAttribute : string<30>;

        attribute productBindingValue : string<4000>;

        attribute productBindingType : int;
        
        /*
         * The name of the (optional) assigned SearchQueryDefinition (SQD). The SQD is send to a search engine to assign products dynamically based on the query results. 
         */
        attribute searchQueryDefinitionName : string<256>;
        
        relation subCategories : CatalogCategoryPO[0..n] pageable inverse parentPO;

        relation parentPO : CatalogCategoryPO[0..1] inverse subCategories
        {
            foreign key(parentCategoryID) -> (UUID);
        }

        relation incomingCategoryLinkPOs : CatalogCategoryLinkPO[0..n] inverse targetCategoryPO implements incomingCategoryLinks;

        relation outgoingCategoryLinkPOs : CatalogCategoryLinkPO[0..n] inverse sourceCategoryPO implements outgoingCategoryLinks;

        relation hotDealsOwnerPO : CatalogCategoryPO[0..1] inverse hotDealsCategoryPO;

        relation hotDealsCategoryPO : CatalogCategoryPO[0..1] inverse hotDealsOwnerPO
        {
            foreign key(hotDealsCategoryID) -> (UUID);
        }
    }
}
