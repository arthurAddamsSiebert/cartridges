import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObjectPO.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/producttype/ProductType.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/internal/producttype/ProductAttributePO.edl";

namespace com.intershop.beehive.xcs.internal.producttype
{
    /*
     * A Product Type is used to group Products with the same characteristics for  their comparison and provides a set of ProductAttributes.
     * <p>
     * Products having the same Product Type can be compared with each other, because they have the same ProductAttributes.
     * <p> Using the ProductTypeMgr the names of the ProductTypes can be keeped unique within a domain.
     * @see com.intershop.beehive.xcs.capi.producttype.IProductTypeMgr
     */
    partitionable orm class ProductTypePO extends ExtensibleObjectPO implements ProductType table "ProductType"
    {
        index(parentProductTypeID);
 		
 		alternate key (name, domainID);

        /*
         * The name of the ProductType used to identify the ProductType by a readable identifier.
         * <p>
         * Uniqueness of the name of a ProductType can be keeped by using the ProductTypeMgr.
         */
        attribute name : string<256> required;

        /*
         * The UUID of the assigned parent ProductType.
         * <p>
         * Each ProductTypes except the Basic-ProductType have a parent ProductType.
         */
        attribute parentProductTypeID : uuid;

        /*
         * The localized name of a ProductType. Can be used to provide a name for a ProductType in different locales.
         */
        attribute displayName : string localized;

        /*
         * each domain have one  default product type, this flag indicates if a product type is the default product type
         */
        attribute ^default : boolean;

        relation productAttributePOs : ProductAttributePO[0..n] inverse productTypePO implements productAttributes;

        relation childProductTypePOs : ProductTypePO[0..n] inverse parentProductTypePO implements childProductTypes;

        relation parentProductTypePO : ProductTypePO[0..1] inverse childProductTypePOs
        {
            foreign key(parentProductTypeID) -> (UUID);
        }
    }
}
