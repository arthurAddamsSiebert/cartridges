<?xml version="1.0" encoding="UTF-8"?>
<components xmlns="http://www.intershop.de/component/2010">
	<!-- Collector to resolve objects of ProductPriceChangeEvent -->
	<implementation name="ProductObjectCollector" class="com.intershop.beehive.xcs.internal.price.ProductObjectCollector">
		<implements contract="ProductPriceChangeEventObjectCollector" />
	</implementation>
	
	
	<!-- Handler that processes ProductPriceChangeEvent -->
	<implementation name="ProductPriceChangeEventHandler" class="com.intershop.beehive.xcs.capi.price.ProductPriceChangeEventHandler">
		<!-- listeners that are notified upon event firing -->
		<requires name="listener" contract="ProductChangeListener" cardinality="0..n"/>
		
		<!-- collectors that fetches the products bound to the events -->
		<requires name="productCollector" contract="ProductPriceChangeEventObjectCollector" cardinality="0..n"/>
	</implementation>
	
	<!-- Handler that processes ProductChangeEvent -->
	<implementation name="ProductChangeEventHandler" class="com.intershop.beehive.xcs.capi.product.ProductChangeEventHandler">
		<!-- listeners that are notified upon event firing -->
		<requires name="listener" contract="ProductChangeListener" cardinality="0..n"/>
	</implementation>
	
	
	<!-- Listeners reacting on ProductPriceChangeEvent -->
	<implementation name="PriceProviderProductPriceChangeListener" class="com.intershop.beehive.xcs.internal.price.PriceProviderProductPriceChangeListener">
		<implements contract="ProductChangeListener" />
		
		<!-- strategy name used for price provider selection -->
		<requires name="productPriceSelectionStrategy" contract="String" cardinality="0..1"/>
		
		<!-- position with execution sequence of the ProductChangeListener objects -->
		<requires name="priority" contract="Integer" />
	</implementation>
	
	<implementation name="PageCacheProductChangeListener" class="com.intershop.beehive.xcs.internal.product.PageCacheProductChangeListener">
		<implements contract="ProductChangeListener" />
		
		<!-- position with execution sequence of the ProductChangeListener objects -->
		<requires name="priority" contract="Integer" />
		
		<!-- number of concurrent threads used to process the changed products -->
		<requires name="numberOfWorkers" contract="Integer" cardinality="0..1"/>
		
		<!-- worker's batch size -->
		<requires name="workerBatchSize" contract="Integer" cardinality="0..1"/>
	</implementation>
		
	<!--  -->
	<implementation name="InventoryContextToSeverityMapper" class="com.intershop.beehive.xcs.internal.inventory.InventoryContextToSeverityMapperImpl">
		<implements contract="InventoryContextToSeverityMapper" />
	</implementation>
	
	<!-- price types -->
	<implementation name="PriceTypeRegistry" class="com.intershop.beehive.xcs.capi.price.PriceTypeRegistry">
		<!-- available price types -->
		<requires name="priceType" contract="NamedObject" cardinality="0..n"/>
		<!-- default price type -->
		<requires name="defaultPriceTypeRegistryName" contract="String" cardinality="1..1"/>
	</implementation>
	<implementation name="ES_SalePrice" class="com.intershop.beehive.xcs.internal.price.ES_SalePrice">
		<implements contract="PriceType" />
	</implementation>
	<implementation name="ES_ListPrice" class="com.intershop.beehive.xcs.internal.price.ES_ListPrice">
		<implements contract="PriceType" />
	</implementation>
	<implementation name="ES_CostPrice" class="com.intershop.beehive.xcs.internal.price.ES_CostPrice">
		<implements contract="PriceType" />
	</implementation>

	<!-- Provider which returns the registered InventoryService -->
	<implementation name="InventoryServiceResolver" class="com.intershop.beehive.xcs.internal.inventory.InventoryServiceResolverImpl">
		<implements contract="InventoryServiceResolver" />
	</implementation> 
	
	<implementation name="ProductCacheClearKeyProvider" class="com.intershop.beehive.xcs.capi.cache.ProductCacheClearKeyProvider">
		<implements contract="CacheClearKeyProvider" />
	</implementation>
	
	<implementation name="ProductClassCacheClearKeyProvider" class="com.intershop.beehive.xcs.capi.cache.ProductClassCacheClearKeyProvider">
		<implements contract="CacheClearKeyProvider" />
	</implementation>
	
	<implementation name="ProductPageCacheClearKeyProvider" class="com.intershop.beehive.xcs.capi.cache.ProductPageCacheClearKeyProvider">
		<implements contract="PageCacheClearKeyProvider" />
		<implements contract="PageCacheKeywordsProvider" />
	</implementation>
	
	<implementation name="CatalogCategoryPageCacheClearKeyProvider" class="com.intershop.beehive.xcs.capi.cache.CatalogCategoryPageCacheClearKeyProvider">
		<implements contract="PageCacheClearKeyProvider" />
		<implements contract="PageCacheKeywordsProvider" />
	</implementation>

	<!-- Image Container -->
	<implementation name="ImageBOReferenceHolderAssignmentExtensionFactory" 
					class="com.intershop.beehive.xcs.internal.image.ImageBOReferenceHolderAssignmentExtensionFactory">
					<implements contract="AbstractImageReferenceHolderAssignmentExtensionFactory"/>
	</implementation>

	<implementation name="ProductAttachmentOrigin" class="com.intershop.beehive.xcs.internal.product.attachment.ProductAttachmentOriginImpl">
		<implements contract="ProductAttachmentOrigin" />
	</implementation>
</components>