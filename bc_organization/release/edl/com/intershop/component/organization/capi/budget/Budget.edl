import "enfinity:/bc_organization/edl/com/intershop/component/organization/capi/account/Account.edl";
import "enfinity:/bc_organization/edl/com/intershop/component/organization/capi/budget/BudgetPeriod.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.component.organization.capi.budget
{
    /*
     * This class models a budget that can be defined upon a given account (within an optional scope). A budget basically provides a time based view upon the underlying account that allows to track account spendings in a certain time frame.
     * <p>
     * Budgets support 2 different approaches for defining budget time frames. The simple approach is to setup reoccuring budgets that are valid for a fixed period of time (e.g. a week, a month or a quarter - the budget amount would be the same for each week, month of quarter).
     * <p>
     * The second approach allows the definition of budget schedules. A budget schedule supports any number of arbitrary time frames - each having a possibly different budget amount.
     * 
     * @author Jan Fiedler
     */
    cartridge interface Budget extends ExtensibleObject
    {
        /*
         * The numeric budget type code is used to distinguish different types of budgets for UI purposes. Currently two different type codes are defined  for interval and schedule budgets.
         */
        attribute ^type : int readonly required;

        /*
         * The numeric interval identifier is used to distinguish between the different supported budget intervals. Supported intervals include week, month, quarter and year.
         */
        attribute interval : int required;

        /*
         * The fixed budget amount for all interval budgets. This attribute will only carry a meaningful value for interval budgets. Schedule budgets have individual budget amounts for each time slot.
         */
        attribute amount : Money required;

        /*
         * The optional budget scope is used to support multiple budgets per account. There can be any number of budgets per account provided each is defined in a different scope. For example, the scope can be used to define a user budget in the scope of a department.
         */
        attribute scopeID : string readonly required;

        /*
         * The scope type is a numeric type used to distinguish between different scopes. The type code is used for UI purposes only.
         */
        attribute scopeType : int readonly required;

        /*
         * The account of a budget is the actual base of all budget relevant calculations. The account is used the track monetary transactions while the budget itself only provides a time frame based view upon this transaction log that can be used to calculate spendings within the time frame.
         * <p>
         * The relationship supports an optional scope identifier. The budget scope can be used for setting up multiple budgets per account. There will be exactly one budget per account and scope. If no scope is provided, the account itself will be considered as the 'default' scope (and only one budget per account is possible).
         */
        relation account : Account[0..1] readonly;

        /*
         * Budget periods are used for scheduled budgets to configure individual budget amounts per budget period. Each budget period is defined by a start and stop date and the actual budget amount for that period.
         */
        relation budgetPeriods : BudgetPeriod[0..n] readonly;
    }
}
