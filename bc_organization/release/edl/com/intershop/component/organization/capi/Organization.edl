import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/profile/Profile.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/user/UserGroup.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.component.organization.capi
{
    /*
     * This interface represents an organization serving as an important structuring element for a number of other objects (such as departments, cost centers and roles). An important aspect of organizations is, that they provide a logical space for all sorts of other business objects. This logical space is established through a domain that gets created along with each organization instance. Business objects created in the scope of an organization will always be stored in that organization domain. The actual organization interface basically serves as a kind of anchor point or descriptor for the organization domain.
     * <p>
     * Note that an organization instance itself is located in a domain (i.e. the owning domain). The domain that owns the organization can be different from the actual organization domain. Distinguishing between owning and organization domain of an organization instance allows for a flexible struturing of organizations.
     * 
     * @author                  Andreas Eiserloh, Jan Fiedler
     */
    cartridge interface Organization extends ExtensibleObject, AuthorizationObject
    {
        /*
         * The localized display name of the organization. Note that the value is stored as display name of the associated organization domain.
         */
        attribute displayName : string required localized;

        /*
         * The localized description of the organization. Note that the value is stored as description of the associated organization domain.
         */
        attribute description : string required localized;

        /*
         * The globally unique (and human readable) ID of the organization. Note that the value is used as the unique ID of the associated organization domain.
         */
        attribute ID : string readonly required;

        /*
         * The numeric type code can be used to distinguish between different kinds of organizations.
         */
        attribute typeCode : int readonly required;

        /*
         * The numeric organization state can be used to express different states a certain organization can be in (e.g. 'online', 'offline', ...).
         */
        attribute state : int required;

        /*
         * The organization domain of an organization instance provides the logical space for storing all business objects owned by the organization.
         */
        relation organizationDomain : Domain[0..1] readonly;

        /*
         * The profile holds data like addresses and other contact informations for this organization.
         */
        relation profile : Profile[0..1];

        /*
         * This relation holds all organization roles (represented as user groups) that can be used for classifying users within the organization domain.
         */
        relation roles : UserGroup[0..n] readonly;

        /*
         * The owning domain represents the logical space that owns the organization instance. The owning domain can be different from the organization domain.
         */
        operation getOwningDomain() : Domain;
    }
}
