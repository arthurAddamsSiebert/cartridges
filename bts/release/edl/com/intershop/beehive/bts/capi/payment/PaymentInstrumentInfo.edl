import "enfinity:/bts/edl/com/intershop/beehive/bts/capi/orderprocess/LineItemCtnr.edl";
import "enfinity:/bts/edl/com/intershop/beehive/bts/capi/payment/PaymentTransaction.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external PaymentService type "com.intershop.beehive.bts.capi.payment.PaymentService";
external Domain type "com.intershop.beehive.core.capi.domain.Domain";
external User type "com.intershop.beehive.core.capi.user.User";

namespace com.intershop.beehive.bts.capi.payment
{
    cartridge interface PaymentInstrumentInfo extends ExtensibleObject
    {
        attribute user : User required;

        attribute ^default : boolean required;

        /*
         * This field is used if the payment instrument info belongs to an organization (B2B).
         */
        attribute organizationDomain : Domain;

        attribute originUUID : string;

        relation lineItemCtnr : LineItemCtnr[0..1];

        relation paymentTransaction : PaymentTransaction[0..n] readonly;

        /*
         * Checks whether the value of the attribute 'User' is null.<p>
         */
        operation getUserNull() : boolean;

        /*
         * Sets the value of the attribute 'User' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setUserNull(aFlag : boolean) : void;

        operation clonePaymentInstrumentInfo() : PaymentInstrumentInfo;

        operation copyFromPaymentInstrumentInfo(paymentInstrumentInfo : PaymentInstrumentInfo) : void;

        operation getPaymentService() : PaymentService;
        
        operation getPaymentServiceID() : string;

        operation setPaymentService(paymentService : PaymentService) : void;

        operation getServiceConfigurationDomain() : string;

        operation getServiceConfigurationID() : string;
        
        operation getTenderBalance() : Money;
        
        operation setTenderBalance(tenderBalance : Money) : void;
        
        operation getAmountForPayment() : Money;
        
        operation setAmountForPayment(amountForPayment : Money) : void;
        
        operation getCalculatedPaymentAmount() : Money;
        
        operation setCalculatedPaymentAmount(calculatedPaymentAmount : Money) : void;
    }
}
