import "enfinity:/bts/edl/com/intershop/beehive/bts/capi/orderprocess/ProductLineItem.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external ProductRef type "com.intershop.beehive.xcs.common.ProductRef";

namespace com.intershop.beehive.bts.capi.orderprocess
{
    cartridge interface BundledProductLineItem extends ExtensibleObject
    {
        attribute productLineItemID : string required readonly;

        /*
         * The ProductRef instance identifying the <i>offer</i> represented by this BundledProductLineItem.
         * 
         * <br>Whereas the  <i>offered Product</i> is defined by one unit, and identified by the <i>DefinitionProductRef</i>, the <i>offer</i> may be owned by a 2nd selling unit, and is identified by the <i>sellerProductRef</i>.
         * 
         * @return The ProductRef instance identifying the offer
         * @see com.intershop.beehive.capi.bts.BundledProductLineItem#getSellingDomain()
         * @see com.intershop.beehive.capi.bts.BundledProductLineItem#getDefinitionProductRef()
         * @see com.intershop.beehive.capi.bts.BundledProductLineItem#getProductDefiningDomain()
         */
        attribute offerProductRef : ProductRef required;

        /*
         * The ProductRef instance identifying the <i>offered Product</i> represented by this BundledProductLineItem.
         * 
         * <br>Whereas the  <i>offered Product</i> is defined by one unit, and identified by the <i>DefinitionProductRef</i>, the <i>Offer</i> may be owned by a 2nd selling unit, and is identified by the <i>sellerProductRef</i>.
         * 
         * @return The ProductRef instance identifying the offered Product
         * @see com.intershop.beehive.capi.bts.BundledProductLineItem#getSellerProductRef()
         * @see com.intershop.beehive.capi.bts.BundledProductLineItem#getSellingDomain()
         * @see com.intershop.beehive.capi.bts.BundledProductLineItem#getProductDefiningDomain()
         */
        attribute definitionProductRef : ProductRef required;

        /*
         * Name of product, copied when product is added to LineItemCtnr.
         */
        attribute productName : string required;

        /*
         * Short description of product, copied when product is added to LineItemCtnr.
         */
        attribute productShortDescription : string required;

        /*
         * Image used to represent the product thumbnail,  copied when product is added to LineItemCtnr.
         */
        attribute productThumbnail : string required;
     
        /*
         * Quantity of bundled product, <I>per bundle</I>.  i.e. if 10 bundles are ordered and the bundle has a bundled product with a quantity 2, a total of 20 units have been ordered.
         */
        attribute quantity : Quantity required;

        attribute supplierDomainID : string required;

        attribute parentID : string required readonly;

        relation productLineItem : ProductLineItem[0..1];

        relation supplyingDomain : Domain[0..1];

        relation parentItem : BundledProductLineItem[0..1];

        relation childItems : BundledProductLineItem[0..n];

        /*
         * Returns identical to method <code>getOfferDomain()</code>
         * 
         * @deprecated Use getOfferDomain()
         */
        operation getSellingDomain() : Domain;

        /*
         * Returns the Domain for this BundledProductLineItem responsible for defining the offered Product or null if none is set.
         * 
         * <br>BundledProductLineItem implements this method by
         * returning the domain specified by its ProductDefiningProductRef.
         * 
         * @return  Domain for this BundledProductLineItem responsible for defining the offered Product or null
         */
        operation getProductDefiningDomain() : Domain;

        /*
         * @deprecated Use getOfferProductRefNull()
         */
        operation getSellerProductRefNull() : boolean;

        /*
         * @deprecated Use getOfferProductRef()
         */
        operation getSellerProductRef() : ProductRef;

        /*
         * @deprecated Use setOfferProductRef(ProductRef ref)
         */
        operation setSellerProductRef(ref : ProductRef) : void;

        /*
         * @deprecated Use setOfferProductRef(ProductRef ref)
         */
        operation setSellerProductRefNull(aFlag : boolean) : void;

        /*
         * Returns the Offer domain for this BundledProductLineItem, by returning
         * the domain specified by its OfferProductRef. Will return null
         * if no OfferProductRef is specified.
         * 
         */
        operation getOfferDomain() : Domain;

        /*
         * Returns a position index of this item within the containing LineItemCtnr calculated according to the sort order of the BundledProductLineItem UUID. The expression 'contains' means all BPLIs which are either assigned directly to a PLI in the LineItemCtnr or have a direct or indirect parent - child relationship with another BPLI which is directly assigned to such a PLI.
         * 
         * <br>Example: if PLI A contains 3 BPLIS X, Y and Z (X and Y belong directly to A, whereas Z is a child item of X) and the primary eys of the BPLIs are XXX, YYY and ZZZ respectively, then the positions are calculated using the primary key sort order, so that X has position 1, Y=2 and Z=3.
         * 
         * @return the items calculated position
         */
        operation getPosition() : int;

        /*
         * Checks whether the value of the attribute 'ProductName' is null.<p>
         */
        operation getProductNameNull() : boolean;

        /*
         * Sets the value of the attribute 'ProductName' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setProductNameNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'ProductShortDescription' is null.<p>
         */
        operation getProductShortDescriptionNull() : boolean;

        /*
         * Sets the value of the attribute 'ProductShortDescription' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setProductShortDescriptionNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'ProductThumbnail' is null.<p>
         */
        operation getProductThumbnailNull() : boolean;

        /*
         * Sets the value of the attribute 'ProductThumbnail' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setProductThumbnailNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'ProductLineItemID' is null.<p>
         */
        operation getProductLineItemIDNull() : boolean;

        /*
         * Checks whether the value of the attribute 'DefinitionProductRef' is null.<p>
         */
        operation getDefinitionProductRefNull() : boolean;

        /*
         * Sets the value of the attribute 'DefinitionProductRef' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setDefinitionProductRefNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'OfferProductRef' is null.<p>
         */
        operation getOfferProductRefNull() : boolean;

        /*
         * Sets the value of the attribute 'OfferProductRef' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setOfferProductRefNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'ParentID' is null.<p>
         */
        operation getParentIDNull() : boolean;

        /*
         * Checks whether the value of the attribute 'Quantity' is null.<p>
         */
        operation getQuantityNull() : boolean;

        /*
         * Sets the value of the attribute 'Quantity' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setQuantityNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'SupplierDomainID' is null.<p>
         */
        operation getSupplierDomainIDNull() : boolean;

        /*
         * Sets the value of the attribute 'SupplierDomainID' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setSupplierDomainIDNull(aFlag : boolean) : void;
    }
}
