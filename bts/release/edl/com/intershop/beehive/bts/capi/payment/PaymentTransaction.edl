import "enfinity:/bts/edl/com/intershop/beehive/bts/capi/orderprocess/fulfillment/Order.edl";
import "enfinity:/bts/edl/com/intershop/beehive/bts/capi/payment/PaymentHistory.edl";
import "enfinity:/bts/edl/com/intershop/beehive/bts/capi/payment/PaymentInstrumentInfo.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/profile/Profile.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external PaymentService type "com.intershop.beehive.bts.capi.payment.PaymentService";
external User type "com.intershop.beehive.core.capi.user.User";
external CurrencyException type "com.intershop.beehive.foundation.quantity.CurrencyException";

namespace com.intershop.beehive.bts.capi.payment
{
    cartridge interface PaymentTransaction extends ExtensibleObject
    {
        attribute status : int required;

		attribute statusPending : boolean required;

        attribute ServiceTransactionID : string required;

        attribute amount : Money required;

		attribute amountAuthorized : Money required;
		
        attribute amountCaptured : Money required;

        attribute amountRefunded : Money required;

        attribute description : string required;

        attribute orderID : string required;

        attribute paymentPayeeID : string required;

        attribute paymentInstrumentInfoID : string required readonly;

        attribute payingUser : User required;

        attribute amountPaid : Money;

        relation paymentHistory : PaymentHistory[0..n];

        relation order : Order[0..1];

        relation paymentInstrumentInfo : PaymentInstrumentInfo[0..1] readonly;

        /*
         * Returns the user referenced by 'payingUser'.
         * 
         * @return The user referenced by 'payingUser'.
         */
        operation getPaymentPayer() : User;

        /*
         * Sets the user referenced by 'payingUser'.
         * 
         * @return The user referenced by 'payingUser'.
         */
        operation setPaymentPayer(aUser : User) : void;

        /*
         * Get the domain which will receive the payed amount.
         * 
         * @return Domain -- the payment receiver
         */
        operation getPaymentPayee() : Domain;

        /*
         * Get amount not yet captured in the PaymentTransaction, in other words <BR>
         * amountNotCaptured = (amountAuthorized - amountCaptured) <P>
         * Therefore is equal to "amount" when the PaymentTransaction is created
         * and equal to "amountAuthorized" when the PaymentTransaction is authorized.
         * It can decrease to zero as the PaymentTransaction is processed.
         * 
         * @return Amount not yet captured in the PaymentTransaction
         * @throws com.intershop.beehive.core.common.CurrencyException -
         * Thrown if non identical currencies found
         * in Money instances "amountAuthorized", "amountCaptured" and
         * "amountRefunded".
         * @see #getAmount()
         * @see #getAmountAuthorized()
         * @see #getAmountCaptured()
         * @isattribute AmountNotCaptured
         */
        operation getAmountNotCaptured() : Money throws CurrencyException;

        /*
         * Return localized String value for my status. This method uses class
         * PaymentTransactionInfo to lookup the string value describing the
         * payment transaction status for the current locale.
         * 
         * @return Localized String value for my status
         * @see com.intershop.beehive.bts.capi.service.payment.PaymentTransactionInfo
         * @isattribute StatusString
         */
        operation getStatusString() : string;

        /*
         * Returns the payment transactions status name.
         * 
         * @return The status name.
         */
        operation getStatusStateName() : string;

        /*
         * Return a Debug description for this PaymentTransaction
         * 
         * @return a Debug description for this PaymentTransaction
         */
        operation getDebugDescription() : string;

        operation getPayingUserProfile() : Profile;

        /*
         * Checks whether the value of the attribute 'AmountCaptured' is null.<p>
         */
        operation getAmountCapturedNull() : boolean;

        /*
         * Sets the value of the attribute 'AmountCaptured' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setAmountCapturedNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'Amount' is null.<p>
         */
        operation getAmountAuthorizedNull() : boolean;

        /*
         * Sets the value of the attribute 'Amount' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setAmountAuthorizedNull(aFlag : boolean) : void;
        
        /*
         * Checks whether the value of the attribute 'Amount' is null.<p>
         */
        operation getAmountNull() : boolean;

        /*
         * Sets the value of the attribute 'Amount' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setAmountNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'Description' is null.<p>
         */
        operation getDescriptionNull() : boolean;

        /*
         * Sets the value of the attribute 'Description' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setDescriptionNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'OrderID' is null.<p>
         */
        operation getOrderIDNull() : boolean;

        /*
         * Sets the value of the attribute 'OrderID' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setOrderIDNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'PayingUser' is null.<p>
         */
        operation getPayingUserNull() : boolean;

        /*
         * Sets the value of the attribute 'PayingUser' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setPayingUserNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'PaymentInstrumentInfoID' is null.<p>
         */
        operation getPaymentInstrumentInfoIDNull() : boolean;

        /*
         * Checks whether the value of the attribute 'PaymentPayeeID' is null.<p>
         */
        operation getPaymentPayeeIDNull() : boolean;

        /*
         * Sets the value of the attribute 'PaymentPayeeID' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setPaymentPayeeIDNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'ServiceTransactionID' is null.<p>
         */
        operation getServiceTransactionIDNull() : boolean;

        /*
         * Sets the value of the attribute 'Status' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setStatusNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'Status' is null.<p>
         */
        operation getStatusNull() : boolean;

        /*
         * Sets the value of the attribute 'ServiceTransactionID' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setServiceTransactionIDNull(aFlag : boolean) : void;

        operation addToPaymentHistory(eventID : string) : PaymentHistory;

        operation createSortedPaymentHistoryIterator() : Iterator;

        operation canBeCaptured() : boolean;

        operation canBeAuthorized() : boolean;

        operation canBeCancelled() : boolean;

        operation canBeRefunded() : boolean;

        operation hasBeenAuthorized() : boolean;

        operation hasBeenCaptured() : boolean;

        operation hasBeenPaid() : boolean;

        operation canBeReduced() : boolean;

        operation getPaymentService() : PaymentService;

        operation requiresRedirectForAuthorization() : boolean;
    }
}
