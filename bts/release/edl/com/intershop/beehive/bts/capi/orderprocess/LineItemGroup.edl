import "enfinity:/bts/edl/com/intershop/beehive/bts/capi/orderprocess/LineItem.edl";
import "enfinity:/bts/edl/com/intershop/beehive/bts/capi/orderprocess/LineItemCtnr.edl";
import "enfinity:/bts/edl/com/intershop/beehive/bts/capi/orderprocess/ProductLineItem.edl";
import "enfinity:/bts/edl/com/intershop/beehive/bts/capi/orderprocess/ServiceLineItem.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.beehive.bts.capi.orderprocess
{
    /*
     * This class is used to represent Domain-dependent groups of ProductLineItems and ServiceLineItems which belong to a LineItemCtnr. In this way a LineItemCtnr may contain multiple LineItemGroup instances, and each LineItemGroup instance may contain multiple Service- and Product-LineItems.
     * 
     * <p>The creation of LineItemGroups is handled automatically in the OrderProcessMgr, and is linked with the creation of a new ProductLineItem for a LineItemCtnr. Should the ProductLineItem belong to a Domain for which a LineItemGroup is not yet available in the LineItemCtnr, a new LineItemGroup is created.
     * 
     * <p>The removal of LineItemGroups is also automatically handled by the OrderProcessMgr and linked with the removal of ProductLineItems, i.e. when the last ProductLineItem held by a LineItemGroup is removed, the LineItemGroup is also removed.
     */
    cartridge interface LineItemGroup extends ExtensibleObject
    {
        attribute lineItemCtnrID : string required readonly;

        attribute netPricePC : Money required;

        attribute taxPC : Money required;

        attribute grossPricePC : Money required;

        relation shipping : ServiceLineItem[0..1] readonly;

        relation productLineItems : ProductLineItem[0..n];

        relation lineItems : LineItem[0..n] readonly;

        relation serviceLineItems : ServiceLineItem[0..n];

        relation lineItemCtnr : LineItemCtnr[0..1];

        /*
         * Returns an iterator of ProductLineItems ordered by position.
         * 
         * @return iterator of ProductLineItems ordered by position
         */
        operation createProductLineItemsOrderedByPositionIterator() : Iterator;

        /*
         * Returns an iterator of ProductLineItems ordered by product name.
         * 
         * @return iterator of ProductLineItems ordered by product name
         */
        operation createProductLineItemsOrderedByProductNameIterator() : Iterator;

        operation findInServiceLineItemsByName(name : string, domain : Domain) : ServiceLineItem;

        /*
         * Returns the value of attribute 'netPriceLC'.<p>
         * Price net of tax in lead currency, converted from the equivalent
         * price in the purchase currency.
         * <bt>Note this price is calculated dynamically, and is not persistent.
         * 
         * @return the value of the attribute 'netPriceLC'
         */
        operation getNetPriceLC() : Money;

        /*
         * Returns the value of attribute 'taxLC'.<p>
         * Tax in lead currency, converted from the equivalent price in the
         * purchase currency.
         * <bt>Note this price is calculated dynamically, and is not persistent.
         * 
         * @return the value of the attribute 'taxLC'
         */
        operation getTaxLC() : Money;

        /*
         * Returns the value of attribute 'grossPriceLC'.<p>
         * Price gross of tax in lead currency, converted from the equivalent
         * price in the purchase currency.
         * <bt>Note this price is calculated dynamically, and is not persistent.
         * 
         * @return the value of the attribute 'grossPriceLC'
         */
        operation getGrossPriceLC() : Money;

        /*
         * Returns the value of attribute 'grossPricePTC'.<p>
         * Price gross of tax in payment transaction currency, converted from the equivalent
         * price in the purchase currency.
         * <bt>Note this price is calculated dynamically, and is not persistent.
         * 
         * @return the value of the attribute 'grossPricePTC'
         */
        operation getGrossPricePTC() : Money;

        /*
         * Checks whether the value of the attribute 'TaxPC' is null.<p>
         */
        operation getTaxPCNull() : boolean;

        /*
         * Sets the value of the attribute 'TaxPC' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setTaxPCNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'NetPricePC' is null.<p>
         */
        operation getNetPricePCNull() : boolean;

        /*
         * Sets the value of the attribute 'NetPricePC' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setNetPricePCNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'GrossPricePC' is null.<p>
         */
        operation getGrossPricePCNull() : boolean;

        /*
         * Sets the value of the attribute 'GrossPricePC' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setGrossPricePCNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'LineItemCtnrID' is null.<p>
         */
        operation getLineItemCtnrIDNull() : boolean;

    }
}
