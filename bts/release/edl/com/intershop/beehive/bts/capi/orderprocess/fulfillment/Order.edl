import "enfinity:/bts/edl/com/intershop/beehive/bts/capi/orderprocess/LineItemCtnr.edl";
import "enfinity:/bts/edl/com/intershop/beehive/bts/capi/orderprocess/basket/Basket.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external OrderRef type "com.intershop.beehive.bts.capi.orderprocess.fulfillment.OrderRef";

namespace com.intershop.beehive.bts.capi.orderprocess.fulfillment
{
    cartridge interface Order extends LineItemCtnr
    {
        /*
         * Shipping Status of Order an integer, identifying one of the stati:  <P>
         * 
         * - NOTSHIPPED (No OLIs shipped).                                <br>
         * -PARTSHIPPED (Some but not all OLIs shipped)             <br>
         * - SHIPPED (All OLIs shipped)                                   <br>
         * 
         * NOTE: changing the status or shippingStatus of an Order is likely to cause
         * a change in the stati of the related PlacedOrder
         */
        attribute shippingStatus : int required;

        attribute paymentStatus : int required;

        attribute invoiceStatus : int required;

        attribute exportStatus : int required;

        /*
         * Settable option. Should Invoices be treated as PackingSlips?
         */
        attribute invoiceUsedAsPackingSlip : boolean required;

        /*
         * Settable option. Should Split Shipments be allowed?
         */
        attribute splitShipmentAllowed : boolean required;

        attribute basketID : string required;

        /*
         * Combined name (firstname + lastname) of the buying user.
         * @since 7.4.1.0
     	 * @deprecated Will be removed in the next major release. Use buyerFirstName and buyerLastName instead.
         */
        attribute buyerName : string required;
        
        /*
         * First name of the buying user.
         */
        attribute buyerFirstName : string;
        
        /*
         * Last name of the buying user.
         */
        attribute buyerLastName : string;

        /*
         * Combined name (firstname + lastname) of the buying user.
         * @since 7.4.1.0
     	 * @deprecated Will be removed in the next major release. Use buyerFirstName and buyerLastName instead.
         */
        attribute originalBuyerName : string required;

        /*
         * Describes the kind of Order, usually one of the types defined in OrderConstants either ORDERTYPE_SELLER or ORDERTYPE_SUPPLIER.
         * 
         * <br>Seller orders are created as a 1:1 copy of the PlacedOrder (which represents the receipt from the buyer-perspective) and belongs to a selling domain. A seller order may have multiple supplier orders as its child orders.
         * 
         * <br>Supplier orders are usually created by splitting a seller order into its supplier-specific parts, and belong to supplying domains (note it is possible that a domain is both selling and supplying). A supplier order will have a single seller order as its parent order.
         * 
         * <br>Seller orders are used to handle payment data and processes: they have a PaymentTransaction attached, whereas supplier orders do not.
         * 
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.OrderConstants
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getParentOrder()
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#createChildOrdersIterator()
         */
        attribute orderType : int required;

        attribute parentOrderID : string required readonly;
        
        /*
         * Customer number of the customer. 
         */
        attribute customerNo : string;
        
        /*
         * Company name of the purchaser. Only set in case of business customers.
         */
        attribute companyName : string;
        
        /*
         * Company name 2 of the purchaser. Only set in case of business customers.
         */
        attribute companyName2 : string;
        
        /*
         * The ID of the customer type. Its a configurable enumeration.
         */
        attribute customerTypeID : string;
        
        /*
         * Name of the price display preference which shows how the order is represented to the user (NET or GROSS).
         */
        attribute priceDisplayTypeName : string;
        
        /*
         * Additional text to be displayed together with the prices to the user.
         */
        attribute priceDisplayTypeText : string;
        
        /*
         * Department of the purchasing user. Only set in case of business customers. 
         */
        attribute department : string;
        
        /*
         * Code for the reason which led to the last status change
         */
        attribute statusReasonCode : int;

		/**
		 * Flag for specifying if an order is to be deleted.
		 */
		attribute toBeDeleted : boolean required;
        
        
        relation parentOrder : Order[0..1];

        relation basket : Basket[0..1];

        /*
         * Returns <i>localized</i> string representation of the instance's
         * shipping status in the current session locale. In the default installation
         * this will be a localized string indicating wheter the Order is Shipped, PartShipped or NotShipped.
         * 
         * @return localized shipping status value
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Orderr#getShippingStatus
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getShippingStatusStateName
         * @see com.intershop.beehive.bts.capi.state.StateDefinitionMgr
         * @isattribute ShippingStatusDisplayName
         */
        operation getShippingStatusDisplayName() : string;

        /*
         * Returns <i>localized</i> string representation of the instance's
         * payment status in the current session locale. In the default installation
         * this will be a localized string indicating wheter the Order is Paid, NotPaid or PartPaid.
         * 
         * @return localized payment status value
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getPaymentStatus
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getPaymentStatusStateName
         * @see com.intershop.beehive.bts.capi.state.StateDefinitionMgr
         * @isattribute PaymentStatusDisplayName
         */
        operation getPaymentStatusDisplayName() : string;

        /*
         * Returns <i>localized</i> string representation of the instance's
         * invoice status in the current session locale. In the default installation
         * this will be a localized string indicating wheter the Order is Invoiced,
         * PartInvoiced or NotInvoiced.
         * 
         * @return localized invoice status value
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getInvoiceStatus
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getInvoiceStatusStateName
         * @see com.intershop.beehive.bts.capi.state.StateDefinitionMgr
         * @isattribute InvoiceStatusDisplayName
         */
        operation getInvoiceStatusDisplayName() : string;

        /*
         * Returns <i>localized</i> string representation of the instance's
         * export status in the current session locale. In the default installation
         * this will be a localized string indicating wheter the Order is Exported
         * or NotExported.
         * 
         * @return localized export status value
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getExportStatus
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getExportStatusStateName
         * @see com.intershop.beehive.bts.capi.state.StateDefinitionMgr
         * @isattribute ExportStatusDisplayName
         */
        operation getExportStatusDisplayName() : string;

        /*
         * Returns <i>localized</i> string representation of the instance's
         * order type in the current session locale. In the default installation
         * this will be a localized string indicating wheter the Order is a SellerOrder
         * or a SupplierOrder.
         * 
         * @return localized order type
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getOrderType
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getOrderTypeStateName
         * @see com.intershop.beehive.bts.capi.state.StateDefinitionMgr
         * @isattribute OrderTypeDisplayName
         */
        operation getOrderTypeDisplayName() : string;

        /*
         * Returns <i>non-localized</i> string representation of the instance's
         * shipping status. In the standard installation this will return one of
         * the values defined as StateDefinitions: 'SHIPPED', 'PARTSHIPPED'
         * or 'NOTSHIPPED'.
         * 
         * @return non-localized shipping status name.
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getShippingStatus
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getShippingStatusDisplayName
         * @see com.intershop.beehive.bts.capi.state.StateDefinitionMgr
         * @isattribute ShippingStatusStateName
         */
        operation getShippingStatusStateName() : string;

        /*
         * Returns <i>non-localized</i> string representation of the instance's
         * payment status.  In the standard installation this will return one of
         * the values defined as StateDefinitions: 'PAID', 'NOTPAID' or
         * 'PARTPAID'.
         * 
         * @return non-localized payment status name.
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getPaymentStatus
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getPaymentStatusDisplayName
         * @see com.intershop.beehive.bts.capi.state.StateDefinitionMgr
         * @isattribute PaymentStatusStateName
         */
        operation getPaymentStatusStateName() : string;

        /*
         * Returns <i>non-localized</i> string representation of the instance's
         * invoice status.  In the standard installation this will return one of
         * the values defined as StateDefinitions: 'NOTINVOICED',
         * 'INVOICED', 'PARTINVOICED'.
         * 
         * @return non-localized invoice status name.
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getInvoiceStatus
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getInvoiceStatusDisplayName
         * @see com.intershop.beehive.bts.capi.state.StateDefinitionMgr
         * @isattribute InvoiceStatusStateName
         */
        operation getInvoiceStatusStateName() : string;

        /*
         * Returns <i>non-localized</i> string representation of the instance's
         * export status.  In the standard installation this will return one of
         * the values defined as StateDefinitions: 'EXPORTED', 'NOTEXPORTED'.
         * 
         * @return non-localized export status name.
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getExportStatus
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getExportStatusDisplayName
         * @see com.intershop.beehive.bts.capi.state.StateDefinitionMgr
         * @isattribute ExportStatusStateName
         */
        operation getExportStatusStateName() : string;

        /*
         * Returns <i>non-localized</i> string representation of the instance's
         * order type. In the standard installation this will return one of
         * the values defined as StateDefinitions: 'SellerOrder', 'SupplierOrder'
         * 
         * @return non-localized order type name.
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getOrderType
         * @see com.intershop.beehive.bts.capi.orderprocess.fulfillment.Order#getOrderTypeDisplayName
         * @see com.intershop.beehive.bts.capi.state.StateDefinitionMgr
         * @isattribute OrderTypeStateName
         */
        operation getOrderTypeStateName() : string;

        operation isInChildOrders(order : Order) : boolean;

        operation addToChildOrders(order : Order) : void;

        operation removeFromChildOrders(order : Order) : void;

        operation getChildOrdersCount() : int;

        operation createChildOrdersIterator() : Iterator;

        /*
         * Checks whether the value of the attribute 'BasketID' is null.<p>
         */
        operation getBasketIDNull() : boolean;

        /*
         * Sets the value of the attribute 'BasketID' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setBasketIDNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'BuyerName' is null.<p>
         */
        operation getBuyerNameNull() : boolean;

        /*
         * Sets the value of the attribute 'BuyerName' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setBuyerNameNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'ExportStatus' is null.<p>
         */
        operation getExportStatusNull() : boolean;

        /*
         * Sets the value of the attribute 'ExportStatus' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setExportStatusNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'InvoiceStatus' is null.<p>
         */
        operation getInvoiceStatusNull() : boolean;

        /*
         * Sets the value of the attribute 'InvoiceStatus' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setInvoiceStatusNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'OrderType' is null.<p>
         */
        operation getOrderTypeNull() : boolean;

        /*
         * Sets the value of the attribute 'OrderType' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setOrderTypeNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'OriginalBuyerName' is null.<p>
         */
        operation getOriginalBuyerNameNull() : boolean;

        /*
         * Sets the value of the attribute 'OriginalBuyerName' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setOriginalBuyerNameNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'ParentOrderID' is null.<p>
         */
        operation getParentOrderIDNull() : boolean;

        /*
         * Checks whether the value of the attribute 'PaymentStatus' is null.<p>
         */
        operation getPaymentStatusNull() : boolean;

        /*
         * Sets the value of the attribute 'PaymentStatus' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setPaymentStatusNull(aFlag : boolean) : void;

        /*
         * Checks whether the value of the attribute 'ShippingStatus' is null.<p>
         */
        operation getShippingStatusNull() : boolean;

        /*
         * Sets the value of the attribute 'ShippingStatus' to null.<p>
         * 
         * @param       aFlag       true or false
         */
        operation setShippingStatusNull(aFlag : boolean) : void;

        /*
         * Create a character representation of this Order.
         * 
         * @return The character representation of this Order.
         */
        operation toDescription() : string;

        /*
         * Returns OrderRef instance with the DocumentNo,  DoaminName and OrderType of this Order instance.
         * 
         * @return OrderRef instance with the DocumentNo,  DoaminName and OrderType of this Order instance.
         */
        operation getOrderRef() : OrderRef;

        operation paymentCanBeCaptured() : boolean;

        operation paymentCanBeRefunded() : boolean;

        operation paymentCanBeReduced() : boolean;

        operation paymentCanBeCancelled() : boolean;

        operation paymentCanBeAuthorized() : boolean;

        operation createPaymentTransactionIterator() : Iterator;
    }
}
