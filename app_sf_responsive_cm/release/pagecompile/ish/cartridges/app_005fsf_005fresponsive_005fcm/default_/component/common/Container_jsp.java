/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-16 22:40:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.app_005fsf_005fresponsive_005fcm.default_.component.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class Container_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"modules/Modules", null, "2");} 
 {Object temp_obj = (getObject("PageletConfigurationParameters:Grid")); getPipelineDictionary().put("Grid", temp_obj);} 
 {Object temp_obj = (""); getPipelineDictionary().put("GridCSS", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("Grid:isDefinedForXSmallDevices"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",7,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("Grid:isHiddenForXSmallDevices"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",8,e);}if (_boolean_result) { 
 {Object temp_obj = (context.getFormattedValue(getObject("GridCSS"),null) + context.getFormattedValue("hidden-xs ",null)); getPipelineDictionary().put("GridCSS", temp_obj);} 
 } else { 
 {Object temp_obj = (context.getFormattedValue(getObject("GridCSS"),null) + context.getFormattedValue("col-xs-",null) + context.getFormattedValue(getObject("Grid:getForXSmallDevices"),null) + context.getFormattedValue(" ",null)); getPipelineDictionary().put("GridCSS", temp_obj);} 
 } 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("Grid:isDefinedForSmallDevices"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",14,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("Grid:isHiddenForSmallDevices"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",15,e);}if (_boolean_result) { 
 {Object temp_obj = (context.getFormattedValue(getObject("GridCSS"),null) + context.getFormattedValue("hidden-sm ",null)); getPipelineDictionary().put("GridCSS", temp_obj);} 
 } else { 
 {Object temp_obj = (context.getFormattedValue(getObject("GridCSS"),null) + context.getFormattedValue("col-sm-",null) + context.getFormattedValue(getObject("Grid:getForSmallDevices"),null) + context.getFormattedValue(" ",null)); getPipelineDictionary().put("GridCSS", temp_obj);} 
 } 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("Grid:isDefinedForMediumDevices"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",21,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("Grid:isHiddenForMediumDevices"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",22,e);}if (_boolean_result) { 
 {Object temp_obj = (context.getFormattedValue(getObject("GridCSS"),null) + context.getFormattedValue("hidden-md ",null)); getPipelineDictionary().put("GridCSS", temp_obj);} 
 } else { 
 {Object temp_obj = (context.getFormattedValue(getObject("GridCSS"),null) + context.getFormattedValue("col-md-",null) + context.getFormattedValue(getObject("Grid:getForMediumDevices"),null) + context.getFormattedValue(" ",null)); getPipelineDictionary().put("GridCSS", temp_obj);} 
 } 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("Grid:isDefinedForLargeDevices"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",28,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("Grid:isHiddenForLargeDevices"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",29,e);}if (_boolean_result) { 
 {Object temp_obj = (context.getFormattedValue(getObject("GridCSS"),null) + context.getFormattedValue("hidden-lg ",null)); getPipelineDictionary().put("GridCSS", temp_obj);} 
 } else { 
 {Object temp_obj = (context.getFormattedValue(getObject("GridCSS"),null) + context.getFormattedValue("col-lg-",null) + context.getFormattedValue(getObject("Grid:getForLargeDevices"),null) + context.getFormattedValue(" ",null)); getPipelineDictionary().put("GridCSS", temp_obj);} 
 } 
 } 
      out.write("<div id=\"Pagelet_");
 {String value = null;try{value=context.getFormattedValue(getObject("Pagelet:UUID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {36}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" class=\"content-container ");
 {String value = null;try{value=context.getFormattedValue(getObject("GridCSS"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {36}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(' ');
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("PageletConfigurationParameters:CSSClass"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",36,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("PageletConfigurationParameters:CSSClass"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {36}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
 } 
      out.write('"');
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("PageletConfigurationParameters:TrackingCode")))).booleanValue() && ((Boolean) (((!(context.getFormattedValue(getObject("PageletConfigurationParameters:TrackingCode"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",37,e);}if (_boolean_result) { 
      out.write("data-tracking=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PageletConfigurationParameters:TrackingCode"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {37}",e);}if (value==null) value="";value = encodeString(value,"url");out.write(value);} 
      out.write('"');
 } 
      out.write('\n');
      out.write('>');
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("PageletConfigurationParameters:UpperBound")))).booleanValue() && ((Boolean) ((( ((Number) getObject("PageletConfigurationParameters:UpperBound")).doubleValue() >=((Number)(new Double(0))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",39,e);}if (_boolean_result) { 
 processOpenTag(response, pageContext, "slotiterator", new TagParameter[] {
new TagParameter("Slot",getObject("Pagelet:SubSlot(\"app_sf_responsive_cm:slot.container.content.pagelet2-Slot\")")),
new TagParameter("AssignmentsAlias","ContainerPageletAssignments")}, 40); 
 processOpenTag(response, pageContext, "uuid", new TagParameter[] {
new TagParameter("name","RenderEntityID")}, 41); 
 processOpenTag(response, pageContext, "renderentityrenderingstart", new TagParameter[] {
new TagParameter("RenderEntityRenderObject",getObject("Pagelet:SubSlot(\"app_sf_responsive_cm:slot.container.content.pagelet2-Slot\")")),
new TagParameter("RenderEntityID",getObject("RenderEntityID"))}, 42); 
 processOpenTag(response, pageContext, "createplaceholderrenderevents", new TagParameter[] {
new TagParameter("ComponentHierarchyKey",getObject("ComponentHierarchyKey")),
new TagParameter("Slot",getObject("Pagelet:SubSlot(\"app_sf_responsive_cm:slot.container.content.pagelet2-Slot\")")),
new TagParameter("RenderContextID",getObject("RenderEntityID"))}, 43); 
 while (loop("ContainerPageletAssignments","ContainerPageletAssignment","PageletCounter")) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("PageletCounter")).doubleValue() >((Number)(getObject("PageletConfigurationParameters:UpperBound"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",46,e);}if (_boolean_result) { 
 if (getLoopStack().isEmpty()) {Logger.error(this,"ISBREAK occured outside ISLOOP. Line: {}",47);}else{getLoopStack().pop();break;} 
 } 
 processOpenTag(response, pageContext, "createplaceholderrenderevents", new TagParameter[] {
new TagParameter("PageletAssignment",getObject("ContainerPageletAssignment")),
new TagParameter("RenderContextID",getObject("RenderEntityID"))}, 49); 
 processOpenTag(response, pageContext, "pageletassignment", new TagParameter[] {
new TagParameter("PageletAssignment",getObject("ContainerPageletAssignment"))}, 50); 
 } 
 processOpenTag(response, pageContext, "createplaceholderrenderevents", new TagParameter[] {
new TagParameter("RenderContextID",getObject("RenderEntityID"))}, 53); 
 processOpenTag(response, pageContext, "renderentityrenderingend", new TagParameter[] {
new TagParameter("RenderEntityRenderObject",getObject("Pagelet:SubSlot(\"app_sf_responsive_cm:slot.container.content.pagelet2-Slot\")")),
new TagParameter("RenderEntityID",getObject("RenderEntityID"))}, 54); 
 } else { 
 processOpenTag(response, pageContext, "slot", new TagParameter[] {
new TagParameter("slot","app_sf_responsive_cm:slot.container.content.pagelet2-Slot")}, 56); 
 } 
      out.write("</div>");
 {out.flush();processExtensionPoint((com.intershop.beehive.core.capi.request.ServletResponse)response,"ContainerEnd", null, "59");} 
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
