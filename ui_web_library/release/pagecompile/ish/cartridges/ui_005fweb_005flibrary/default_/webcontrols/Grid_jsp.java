/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-07 18:11:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.ui_005fweb_005flibrary.default_.webcontrols;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.core.capi.paging.PageableIterator;

public final class Grid_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write('\n');
 
setEncodingType("text/html"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery-migrate-1.2.1.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/popupmenu/jquery.popupmenu.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.columns.text.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.columns.integer.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.columns.float.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.columns.percentage.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.columns.image.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.columns.link.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.columns.money.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.columns.status.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.columns.progress.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.columns.select.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.columns.action.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.columns.sorting.js");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("CSSWebLibraries")); 
      out.write("jquery/grid/jquery.grid.css");
 out.print("</waplacement>"); 
 out.print(context.prepareWAPlacement("CSSWebLibraries")); 
      out.write("jquery/popupmenu/jquery.popupmenu.css");
 out.print("</waplacement>"); 
      out.write("<div id=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("id"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {26}",e);}if (value==null) value="";out.write(value);} 
      out.write("\" class=\"isgrid-container\"></div>");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (disableErrorMessages().isDefined(getObject("pagenumberprefix")))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",30,e);}if (_boolean_result) { 
 getPipelineDictionary().put("pagenumberprefix", "PageNumber_");
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (disableErrorMessages().isDefined(getObject("pagesizeprefix")))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",33,e);}if (_boolean_result) { 
 getPipelineDictionary().put("pagesizeprefix", "PageSize_");
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("pageable"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",36,e);}if (_boolean_result) { 
      out.write("<input type=\"hidden\" name=\"PageNumberPrefix\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("pagenumberprefix"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {37}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"/>\n<input type=\"hidden\" name=\"PageSizePrefix\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("pagesizeprefix"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {38}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"/>\n<input type=\"hidden\" name=\"PageableID\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("pageable:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {39}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"/>\n<input type=\"hidden\" name=\"PageableName\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("pageablename"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {40}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('/');
      out.write('>');
 _boolean_result=false;try {_boolean_result=((Boolean)(((!((Boolean) (disableErrorMessages().isDefined(getObject("showfooter")))).booleanValue() || ((Boolean) ((((context.getFormattedValue(getObject("showfooter"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",41,e);}if (_boolean_result) { 
      out.write("<input type=\"hidden\" name=\"CurrentPageNumber\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("pageable:Page"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {42}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"/>\n<input type=\"hidden\" name=\"CurrentPageSize\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("pageable:PageSize"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {43}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('/');
      out.write('>');
 } 
 } 
 {Object temp_obj = (context.getFormattedValue("#",null) + context.getFormattedValue(getObject("id"),null)); getPipelineDictionary().put("selector", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("configuration")))).booleanValue() && ((Boolean) (disableErrorMessages().isDefined(getObject("currentapplication")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",51,e);}if (_boolean_result) { 
 {Object temp_obj = (context.getFormattedValue("intershop.template.isgrid.",null) + context.getFormattedValue(getObject("configuration"),null)); getPipelineDictionary().put("config", temp_obj);} 
 {Object temp_obj = ("intershop.template.isgrid.default"); getPipelineDictionary().put("configDefault", temp_obj);} 
 {Object temp_obj = (context.getFormattedValue(getObject("config"),null) + context.getFormattedValue(".rowsperpage",null)); getPipelineDictionary().put("configRowsPerPage", temp_obj);} 
 {Object temp_obj = (replace(context.getFormattedValue(getObject("currentapplication:Configuration:String(configRowsPerPage)"),null),(String)(" "),(String)(", "))); getPipelineDictionary().put("rowsperpage", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("rowsperpage"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",59,e);}if (_boolean_result) { 
 {Object temp_obj = (context.getFormattedValue(getObject("configDefault"),null) + context.getFormattedValue(".rowsperpage",null)); getPipelineDictionary().put("configRowsPerPage", temp_obj);} 
 {Object temp_obj = (replace(context.getFormattedValue(getObject("currentapplication:Configuration:String(configRowsPerPage)"),null),(String)(" "),(String)(", "))); getPipelineDictionary().put("rowsperpage", temp_obj);} 
 } 
 {Object temp_obj = (context.getFormattedValue(getObject("config"),null) + context.getFormattedValue(".showalllimit",null)); getPipelineDictionary().put("configShowAllLimit", temp_obj);} 
 {Object temp_obj = (getObject("currentapplication:Configuration:Integer(configShowAllLimit)")); getPipelineDictionary().put("showalllimit", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("showalllimit"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",68,e);}if (_boolean_result) { 
 {Object temp_obj = (context.getFormattedValue(getObject("configDefault"),null) + context.getFormattedValue(".showalllimit",null)); getPipelineDictionary().put("configShowAllLimit", temp_obj);} 
 {Object temp_obj = (getObject("currentapplication:Configuration:Integer(configShowAllLimit)")); getPipelineDictionary().put("showalllimit", temp_obj);} 
 } 
 {Object temp_obj = (context.getFormattedValue(getObject("config"),null) + context.getFormattedValue(".firstlastlimit",null)); getPipelineDictionary().put("configFirstLastLimit", temp_obj);} 
 {Object temp_obj = (getObject("currentapplication:Configuration:Integer(configFirstLastLimit)")); getPipelineDictionary().put("firstlastlimit", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("firstlastlimit"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",77,e);}if (_boolean_result) { 
 {Object temp_obj = (context.getFormattedValue(getObject("configDefault"),null) + context.getFormattedValue(".firstlastlimit",null)); getPipelineDictionary().put("configFirstLastLimit", temp_obj);} 
 {Object temp_obj = (getObject("currentapplication:Configuration:Integer(configFirstLastLimit)")); getPipelineDictionary().put("firstlastlimit", temp_obj);} 
 } 
 {Object temp_obj = (context.getFormattedValue(getObject("config"),null) + context.getFormattedValue(".showfooter",null)); getPipelineDictionary().put("configShowFooter", temp_obj);} 
 {Object temp_obj = (getObject("currentapplication:Configuration:String(configShowFooter)")); getPipelineDictionary().put("showfooter", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("showfooter"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",86,e);}if (_boolean_result) { 
 {Object temp_obj = (context.getFormattedValue(getObject("configDefault"),null) + context.getFormattedValue(".showfooter",null)); getPipelineDictionary().put("configShowFooter", temp_obj);} 
 {Object temp_obj = (getObject("currentapplication:Configuration:String(configShowFooter)")); getPipelineDictionary().put("showfooter", temp_obj);} 
 } 
 } 
      out.write("<script>");
 {Object temp_obj = (context.getFormattedValue("window.getData",null) + context.getFormattedValue(getObject("id"),null)); getPipelineDictionary().put("getDataFn", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("datatemplate"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",96,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("getDataFn"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {97}",e);}if (value==null) value="";out.write(value);} 
      out.write(' ');
      out.write('=');
      out.write(' ');
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,context.getFormattedValue(getObject("datatemplate"),null), null, "97");} 
      out.write(';');
      out.write('\n');
 } else { 
 {String value = null;try{value=context.getFormattedValue(getObject("getDataFn"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {99}",e);}if (value==null) value="";out.write(value);} 
      out.write(" = function() {};\n");
 } 
 {Object temp_obj = (context.getFormattedValue("window.columns",null) + context.getFormattedValue(getObject("id"),null)); getPipelineDictionary().put("columnsObj", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("columnstemplate"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",104,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("columnsObj"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {105}",e);}if (value==null) value="";out.write(value);} 
      out.write(' ');
      out.write('=');
      out.write(' ');
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,context.getFormattedValue(getObject("columnstemplate"),null), null, "105");} 
      out.write(';');
      out.write('\n');
 } else { 
 {String value = null;try{value=context.getFormattedValue(getObject("columnsObj"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {107}",e);}if (value==null) value="";out.write(value);} 
      out.write(" = [];\n");
 } 
 {Object temp_obj = (context.getFormattedValue("window.rowCss",null) + context.getFormattedValue(getObject("id"),null)); getPipelineDictionary().put("rowCssFn", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("rowcsstemplate"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",112,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("rowCssFn"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {113}",e);}if (value==null) value="";out.write(value);} 
      out.write(' ');
      out.write('=');
      out.write(' ');
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,context.getFormattedValue(getObject("rowcsstemplate"),null), null, "113");} 
      out.write(';');
      out.write('\n');
 } else { 
 {String value = null;try{value=context.getFormattedValue(getObject("rowCssFn"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {115}",e);}if (value==null) value="";out.write(value);} 
      out.write(" = function() {};\n");
 } 
      out.write("\nvar el = $(\"");
 {String value = null;try{value=context.getFormattedValue(getObject("selector"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {118}",e);}if (value==null) value="";out.write(value);} 
      out.write("\");\nel.on('afterInit', function makeSticky() {\n");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (((((Boolean) (disableErrorMessages().isDefined(getObject("sticky")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("sticky"),null).equals(context.getFormattedValue("false",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",120,e);}if (_boolean_result) { 
      out.write("\nel.children('table').addClass('stickyHeader');\n");
 processOpenTag(response, pageContext, "sticky", new TagParameter[] {
new TagParameter("selector",getObject("selector")),
new TagParameter("onready","false")}, 122); 
 } 
      out.write("\n});\n</script>");
 out.print(context.prepareWAPlacement("JSWebControls")); 
      out.write("\n;(function() {\nvar el = $(\"");
 {String value = null;try{value=context.getFormattedValue(getObject("selector"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {130}",e);}if (value==null) value="";out.write(value);} 
      out.write("\");\n/*\nel.on('afterInit', function removeSorting(ev, data) {\nel.off('.grid', 'th.sortable > a');\n});\n*/\nel.grid({\n");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("loadoninit"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",138,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((context.getFormattedValue(getObject("loadoninit"),null).equals(context.getFormattedValue("false",null)))) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",139,e);}if (_boolean_result) { 
      out.write("\nloadOnInit: false,\n");
 } else { 
      out.write("\nloadOnInit: true,\n");
 } 
 } 
      out.write("\n/** Make sure the page size displayed matches the pagesize delivered from server */\nrowsPerPage: function rowsPerPage() {\nvar pageSizes = [");
 {String value = null;try{value=context.getFormattedValue(getObject("rowsperpage"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {149}",e);}if (value==null) value="";out.write(value);} 
      out.write("],\nfilteredPageSizes = [],\ncurrentPageSize;\n");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((disableErrorMessages().isDefined(getObject("pageable"))))).booleanValue() && ((Boolean) ((disableErrorMessages().isDefined(getObject("pageable:PageSize"))))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",152,e);}if (_boolean_result) { 
      out.write("\ncurrentPageSize = ");
 {String value = null;try{value=context.getFormattedValue(getObject("pageable:PageSize"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {153}",e);}if (value==null) value="";out.write(value);} 
      out.write(';');
      out.write('\n');
 } else { 
      out.write("\nif(pageSizes.length > 0) {\ncurrentPageSize = pageSizes[0];\n} else {\n// get pagesize from number of returned items\nthis.options.getData({\ncallback: function callback(data) {\ncurrentPageSize = data.items.length;\n}\n});\n}\n");
 } 
      out.write("\n// remove currentPageSize\nfor (var i = 0, l = pageSizes.length; i < l; i++) {\nif(pageSizes[i] !== currentPageSize) {\nfilteredPageSizes.push(pageSizes[i]);\n}\n}\npageSizes = filteredPageSizes;\n// add currentPageSize at first position\npageSizes.splice(0, 0, currentPageSize);\nreturn pageSizes;\n},\n");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("showalllimit"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",181,e);}if (_boolean_result) { 
      out.write("\nshowAllLimit: ");
 {String value = null;try{value=context.getFormattedValue(getObject("showalllimit"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {182}",e);}if (value==null) value="";out.write(value);} 
      out.write(',');
      out.write('\n');
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("firstlastlimit"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",186,e);}if (_boolean_result) { 
      out.write("\npaginationLimit: ");
 {String value = null;try{value=context.getFormattedValue(getObject("firstlastlimit"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {187}",e);}if (value==null) value="";out.write(value);} 
      out.write(',');
      out.write('\n');
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("showfooter"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",191,e);}if (_boolean_result) { 
      out.write("\nshowFooter: ");
 {String value = null;try{value=context.getFormattedValue(getObject("showfooter"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {192}",e);}if (value==null) value="";out.write(value);} 
      out.write(',');
      out.write('\n');
 } 
      out.write("\ncolumns: ");
 {String value = null;try{value=context.getFormattedValue(getObject("columnsObj"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {196}",e);}if (value==null) value="";out.write(value);} 
      out.write(",\nbeforeDataRequest: (function beforeDataRequestWrapper() {\nvar first = true;\nreturn function beforeDataRequest(request) {\nvar doSorting = false;\nvar $form = this.element.closest('form'),\n$sortBy = $form.children('input[name=\"SortBy\"]'),\n$sortDirection = $form.children('input[name=\"SortDirection\"]');\n// find the grid, containing this grid\nif ($form.length === 0) {\nthrow 'Couldn\\'t find the form containing this grid';\n}\n// SORTING\nif (!first) {\n// create hidden fields if they don't exist\nif ($sortBy.length === 0) {\n$sortBy = $($.parseHTML('<input type=\"hidden\" name=\"SortBy\" />')).prependTo($form);\n}\nif ($sortDirection.length === 0) {\n$sortDirection = $($.parseHTML('<input type=\"hidden\" name=\"SortDirection\" />')).prependTo($form);\n}\nvar sortBy = this.pagination.orderColumnId,\nsortDirection = this.pagination.order + \"ending\";\nif ((request.orderColumnId && request.orderColumnId !== this.pagination.orderColumnId) || (request.order && request.order !== this.pagination.order)) {\nsortBy = request.orderColumnId;\nsortDirection = request.order + \"ending\";\n");
      out.write("doSorting = true;\n}\n$sortBy.val(sortBy);\n$sortDirection.val(sortDirection);\n}\n// PAGING\n// delete old hidden fields because names change\n$form.children('input[name^=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("pagenumberprefix"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {234}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"]').remove();\n$form.children('input[name^=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("pagesizeprefix"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {235}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"]').remove();\n");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("showfooter")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("showfooter"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",237,e);}if (_boolean_result) { 
      out.write("\n// create hidden fields if they don't exist\nvar page = Math.ceil((request.offset + 1) / request.pageSize),\ndoPaging = false;\nif (!first) {\nif (page !== this.pagination.currentPage() && page > -1) {\ndoPaging = true;\n}\nif (request.pageSize !== this.pagination.pageSize) {\ndoPaging = true;\n}\nif (doPaging) {\n$($.parseHTML('<input type=\"hidden\" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("pagenumberprefix"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {250}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("' + (page - 1) + '\">')).val(page).prependTo($form);\n$($.parseHTML('<input type=\"hidden\" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("pagesizeprefix"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {251}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("' + request.pageSize + '\">')).val(request.pageSize).prependTo($form);\n}\n} else {\n// get current page from pageable iterator\npage = Math.ceil((");
 {String value = null;try{value=context.getFormattedValue((new Double( ((Number) getObject("pageable:PageStart")).doubleValue() -((Number) new Double(1)).doubleValue())),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {255}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(" + 1) / request.pageSize);\n}\n// set false after the first execution\nfirst = false;\n// change url\nif (doPaging) {\n// paging or pagesize\n$form.submit();\nreturn false;\n}\n");
 } 
      out.write("\nif (doSorting) {\n// sorting or sortorder\n$form.prepend('<input type=\"hidden\" name=\"sort\" value=\"sort\">');\n$form.submit();\nreturn false;\n}\nreturn true;\n};\n}()),\ngetData: ");
 {String value = null;try{value=context.getFormattedValue(getObject("getDataFn"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {280}",e);}if (value==null) value="";out.write(value);} 
      out.write(",\nrowCss: ");
 {String value = null;try{value=context.getFormattedValue(getObject("rowCssFn"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {283}",e);}if (value==null) value="";out.write(value);} 
      out.write(",\ntext: {\nstatus: '");
 {String value = null;try{value=context.getFormattedValue(localizeText(context.getFormattedValue("webcontrols.Grid.Status",null)),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {287}",e);}if (value==null) value="";value = encodeString(value,"javascript");out.write(value);} 
      out.write("',\nitems: '");
 {String value = null;try{value=context.getFormattedValue(localizeText(context.getFormattedValue("webcontrols.Grid.Items",null)),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {288}",e);}if (value==null) value="";value = encodeString(value,"javascript");out.write(value);} 
      out.write("',\nof: '");
 {String value = null;try{value=context.getFormattedValue(localizeText(context.getFormattedValue("webcontrols.Grid.Of",null)),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {289}",e);}if (value==null) value="";value = encodeString(value,"javascript");out.write(value);} 
      out.write("',\nshowAll: '");
 {String value = null;try{value=context.getFormattedValue(localizeText(context.getFormattedValue("webcontrols.Grid.ShowAll",null)),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {290}",e);}if (value==null) value="";value = encodeString(value,"javascript");out.write(value);} 
      out.write("',\ntitleSingleSelection: '',\ntooltipSelectAll: '");
 {String value = null;try{value=context.getFormattedValue(localizeText(context.getFormattedValue("webcontrols.Grid.TooltipSelectAll",null)),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {292}",e);}if (value==null) value="";value = encodeString(value,"javascript");out.write(value);} 
      out.write("',\nselectAllMenuAll: '");
 {String value = null;try{value=context.getFormattedValue(localizeText(context.getFormattedValue("webcontrols.Grid.SelectAllMenuAll",null)),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {293}",e);}if (value==null) value="";value = encodeString(value,"javascript");out.write(value);} 
      out.write("',\nselectAllMenuNone: '");
 {String value = null;try{value=context.getFormattedValue(localizeText(context.getFormattedValue("webcontrols.Grid.SelectAllMenuNone",null)),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {294}",e);}if (value==null) value="";value = encodeString(value,"javascript");out.write(value);} 
      out.write("'\n},\n_placeholder: undefined\n});\n})();\n");
 out.print("</waplacement>"); 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("scripttemplate"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",304,e);}if (_boolean_result) { 
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,context.getFormattedValue(getObject("scripttemplate"),null), null, "305");} 
 } 
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
