<!---isnoloc--->
<iscontent type="text/html" charset="UTF-8" compact="true">
<!--- load required javascript libraries --->
<isplacement placeholderid="JSWebLibraries">jquery.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery-migrate-1.2.1.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/grid/jquery.grid.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/popupmenu/jquery.popupmenu.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/grid/jquery.grid.columns.text.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/grid/jquery.grid.columns.integer.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/grid/jquery.grid.columns.float.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/grid/jquery.grid.columns.percentage.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/grid/jquery.grid.columns.image.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/grid/jquery.grid.columns.link.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/grid/jquery.grid.columns.money.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/grid/jquery.grid.columns.status.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/grid/jquery.grid.columns.progress.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/grid/jquery.grid.columns.select.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/grid/jquery.grid.columns.action.js</isplacement>
<isplacement placeholderid="JSWebLibraries">jquery/grid/jquery.grid.columns.sorting.js</isplacement>

<!--- load required stylesheets --->
<isplacement placeholderid="CSSWebLibraries">jquery/grid/jquery.grid.css</isplacement>
<isplacement placeholderid="CSSWebLibraries">jquery/popupmenu/jquery.popupmenu.css</isplacement>

<!--- create container element --->
<div id="<isprint encoding="off" value="#id#">" class="isgrid-container"></div>

<!--- insert page infos --->
<%@page import = "com.intershop.beehive.core.capi.paging.PageableIterator"%>
<isif condition="#NOT isDefined(pagenumberprefix)#">
	<% getPipelineDictionary().put("pagenumberprefix", "PageNumber_");%>
</isif>
<isif condition="#NOT isDefined(pagesizeprefix)#">
	<% getPipelineDictionary().put("pagesizeprefix", "PageSize_");%>
</isif>
<isif condition="#isDefined(pageable)#">
	<input type="hidden" name="PageNumberPrefix" value="<isprint value="#pagenumberprefix#">"/>
	<input type="hidden" name="PageSizePrefix" value="<isprint value="#pagesizeprefix#">"/>
	<input type="hidden" name="PageableID" value="<isprint value="#pageable:ID#">"/>
	<input type="hidden" name="PageableName" value="<isprint value="#pageablename#">"/>
	<isif condition="#NOT isDefined(showfooter) OR (showfooter EQ 'true')#">
		<input type="hidden" name="CurrentPageNumber" value="<isprint value="#pageable:Page#">"/>
		<input type="hidden" name="CurrentPageSize" value="<isprint value="#pageable:PageSize#">"/>
	</isif>
</isif>

<!--- create id-selector --->
<isset scope="request" name="selector" value="#'#'.id#">

<!--- get grid parameters from configuration --->
<isif condition="#isDefined(configuration) AND isDefined(currentapplication)#">
	<!--- configuration names --->
	<isset scope="request" name="config" value="#'intershop.template.isgrid.'.configuration#">
	<isset scope="request" name="configDefault" value="intershop.template.isgrid.default">

	<!--- rows per page --->
	<isset scope="request" name="configRowsPerPage" value="#config.'.rowsperpage'#">
	<isset scope="request" name="rowsperpage" value="#replace(currentapplication:Configuration:String(configRowsPerPage), " ", ", ")#">
	<isif condition="#rowsperpage EQ ''#">
		<!--- rows per page (default) --->
		<isset scope="request" name="configRowsPerPage" value="#configDefault.'.rowsperpage'#">
		<isset scope="request" name="rowsperpage" value="#replace(currentapplication:Configuration:String(configRowsPerPage), " ", ", ")#">
	</isif>

	<!--- show all limit --->
	<isset scope="request" name="configShowAllLimit" value="#config.'.showalllimit'#">
	<isset scope="request" name="showalllimit" value="#currentapplication:Configuration:Integer(configShowAllLimit)#">
	<isif condition="#showalllimit EQ ''#">
		<!--- show all limit (default) --->
		<isset scope="request" name="configShowAllLimit" value="#configDefault.'.showalllimit'#">
		<isset scope="request" name="showalllimit" value="#currentapplication:Configuration:Integer(configShowAllLimit)#">
	</isif>

	<!--- first last limit --->
	<isset scope="request" name="configFirstLastLimit" value="#config.'.firstlastlimit'#">
	<isset scope="request" name="firstlastlimit" value="#currentapplication:Configuration:Integer(configFirstLastLimit)#">
	<isif condition="#firstlastlimit EQ ''#">
		<!--- first last limit (default) --->
		<isset scope="request" name="configFirstLastLimit" value="#configDefault.'.firstlastlimit'#">
		<isset scope="request" name="firstlastlimit" value="#currentapplication:Configuration:Integer(configFirstLastLimit)#">
	</isif>
	
	<!--- show footer --->
	<isset scope="request" name="configShowFooter" value="#config.'.showfooter'#">
	<isset scope="request" name="showfooter" value="#currentapplication:Configuration:String(configShowFooter)#">
	<isif condition="#showfooter EQ ''#">
		<!--- show footer (default) --->
		<isset scope="request" name="configShowFooter" value="#configDefault.'.showfooter'#">
		<isset scope="request" name="showfooter" value="#currentapplication:Configuration:String(configShowFooter)#">
	</isif>
</isif>

<script>
	<!--- include the getData function --->
	<isset scope="request" name="getDataFn" value="#'window.getData'.id#">
	<isif condition="#isDefined(datatemplate)#">
		<isprint encoding="off" value="#getDataFn#"> = <isinclude template="#datatemplate#">;
	<iselse>
		<isprint encoding="off" value="#getDataFn#"> = function() {};
	</isif>

	<!--- include the columns configuration --->
	<isset scope="request" name="columnsObj" value="#'window.columns'.id#">
	<isif condition="#isDefined(columnstemplate)#">
		<isprint encoding="off" value="#columnsObj#"> = <isinclude template="#columnstemplate#">;
	<iselse>
		<isprint encoding="off" value="#columnsObj#"> = [];
	</isif>

	<!--- include the rowCss function --->
	<isset scope="request" name="rowCssFn" value="#'window.rowCss'.id#">
	<isif condition="#isDefined(rowcsstemplate)#">
		<isprint encoding="off" value="#rowCssFn#"> = <isinclude template="#rowcsstemplate#">;
	<iselse>
		<isprint encoding="off" value="#rowCssFn#"> = function() {};
	</isif>

	var el = $("<isprint encoding="off" value="#selector#">");
	el.on('afterInit', function makeSticky() {
		<isif condition="#NOT (isDefined(sticky) AND (sticky EQ 'false'))#">
			el.children('table').addClass('stickyHeader');
			<ISSticky selector="#selector#" onready="false">
		</isif>
	});
</script>

<!--- initialize the grid --->
<isplacement placeholderid="JSWebControls">
	;(function() {
		var el = $("<isprint encoding="off" value="#selector#">");
		/*
		el.on('afterInit', function removeSorting(ev, data) {
			el.off('.grid', 'th.sortable > a');
		});
		*/
		el.grid({
			<!--- reload data on start --->
			<isif condition="#isDefined(loadoninit)#">
				<isif condition="#(loadoninit EQ 'false')#">
					loadOnInit: false,
				<iselse>
					loadOnInit: true,
				</isif>
			</isif>

			<!--- rows per page, first value is default --->
			/** Make sure the page size displayed matches the pagesize delivered from server */
			rowsPerPage: function rowsPerPage() {
				var pageSizes = [<isprint encoding="off" value="#rowsperpage#">],
				    filteredPageSizes = [],
				    currentPageSize;
				<isif condition="#(isDefined(pageable)) AND (isDefined(pageable:PageSize))#">
					currentPageSize = <isprint encoding="off" formatter="0" value="#pageable:PageSize#">;
				<iselse>
					if(pageSizes.length > 0) {
						currentPageSize = pageSizes[0];
					} else {
						// get pagesize from number of returned items
						this.options.getData({
							callback: function callback(data) {
								currentPageSize = data.items.length;
							}
						});
					}
				</isif>

				// remove currentPageSize
				for (var i = 0, l = pageSizes.length; i < l; i++) {
					if(pageSizes[i] !== currentPageSize) {
					    filteredPageSizes.push(pageSizes[i]);
					}
				}
				pageSizes = filteredPageSizes;

				// add currentPageSize at first position
				pageSizes.splice(0, 0, currentPageSize);
				return pageSizes;
			},

			<!--- if rows are less than this, add "show all" option --->
			<isif condition="#isDefined(showalllimit)#">
				showAllLimit: <isprint encoding="off" formatter="0" value="#showalllimit#">,
			</isif>

			<!--- if rows are less than this, use better pagination bar --->
			<isif condition="#isDefined(firstlastlimit)#">
				paginationLimit: <isprint encoding="off" formatter="0" value="#firstlastlimit#">,
			</isif>
			
			<!--- if rows are less than this, add "show all" option --->
			<isif condition="#isDefined(showfooter)#">
				showFooter: <isprint encoding="off" formatter="0" value="#showfooter#">,
			</isif>

			<!--- row configuration --->
			columns: <isprint encoding="off" value="#columnsObj#">,
			<!--- submit the form instead of using an ajax request (compatibility reasons) --->
			beforeDataRequest: (function beforeDataRequestWrapper() {
				var first = true;

				return function beforeDataRequest(request) {
					var doSorting = false;
					var $form = this.element.closest('form'),
						$sortBy = $form.children('input[name="SortBy"]'),
						$sortDirection = $form.children('input[name="SortDirection"]');

					// find the grid, containing this grid
					if ($form.length === 0) {
						throw 'Couldn\'t find the form containing this grid';
					}

					// SORTING
					if (!first) {
						// create hidden fields if they don't exist
						if ($sortBy.length === 0) {
							$sortBy = $($.parseHTML('<input type="hidden" name="SortBy" />')).prependTo($form);
						}
						if ($sortDirection.length === 0) {
							$sortDirection = $($.parseHTML('<input type="hidden" name="SortDirection" />')).prependTo($form);
						}
						var sortBy = this.pagination.orderColumnId,
							sortDirection = this.pagination.order + "ending";
						if ((request.orderColumnId && request.orderColumnId !== this.pagination.orderColumnId) || (request.order && request.order !== this.pagination.order)) {
							sortBy = request.orderColumnId;
							sortDirection = request.order + "ending";
							doSorting = true;
						}
						$sortBy.val(sortBy);
						$sortDirection.val(sortDirection);
					}

					// PAGING
					// delete old hidden fields because names change
					$form.children('input[name^="<isprint value="#pagenumberprefix#">"]').remove();
					$form.children('input[name^="<isprint value="#pagesizeprefix#">"]').remove();

					<isif condition="#isDefined(showfooter) AND (showfooter EQ 'true')#">
						// create hidden fields if they don't exist
						var page = Math.ceil((request.offset + 1) / request.pageSize),
							doPaging = false;
	
						if (!first) {
							if (page !== this.pagination.currentPage() && page > -1) {
								doPaging = true;
							}
							if (request.pageSize !== this.pagination.pageSize) {
								doPaging = true;
							}
							if (doPaging) {
								$($.parseHTML('<input type="hidden" name="<isprint value="#pagenumberprefix#">' + (page - 1) + '">')).val(page).prependTo($form);
								$($.parseHTML('<input type="hidden" name="<isprint value="#pagesizeprefix#">' + request.pageSize + '">')).val(request.pageSize).prependTo($form);
							}
						} else {
							// get current page from pageable iterator
							page = Math.ceil((<isprint value="#pageable:PageStart - 1#" formatter="0"> + 1) / request.pageSize);
						}
						
						// set false after the first execution
						first = false;
	
						// change url
							if (doPaging) {
								// paging or pagesize
								$form.submit();
								return false;
							}
					</isif>
					
					if (doSorting) {
						// sorting or sortorder
						$form.prepend('<input type="hidden" name="sort" value="sort">');
						$form.submit();
						return false;
					}
					return true;
				};
			}()),

			<!--- getData function --->
			getData: <isprint encoding="off" value="#getDataFn#">,

			<!--- rowCss function --->
			rowCss: <isprint encoding="off" value="#rowCssFn#">,

			<!--- texts for localization --->
			text: {
				status: '<isprint encoding="javascript" value="#localizeText('webcontrols.Grid.Status')#"/>',
				items: '<isprint encoding="javascript" value="#localizeText('webcontrols.Grid.Items')#"/>',
				of: '<isprint encoding="javascript" value="#localizeText('webcontrols.Grid.Of')#"/>',
				showAll: '<isprint encoding="javascript" value="#localizeText('webcontrols.Grid.ShowAll')#"/>',
				titleSingleSelection: '',
				tooltipSelectAll: '<isprint encoding="javascript" value="#localizeText('webcontrols.Grid.TooltipSelectAll')#"/>',
				selectAllMenuAll: '<isprint encoding="javascript" value="#localizeText('webcontrols.Grid.SelectAllMenuAll')#"/>',
				selectAllMenuNone: '<isprint encoding="javascript" value="#localizeText('webcontrols.Grid.SelectAllMenuNone')#"/>'
			},

			<!--- workaround to ignore last comma --->
			_placeholder: undefined
		});
	})();
</isplacement>

<!--- include the customized script template --->
<isif condition="#isDefined(scripttemplate)#">
	<isinclude template="#scripttemplate#">
</isif>
<!---/isnoloc--->
