/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:30:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.bc_005fimage.default_;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.component.image.internal.orm.ImageType;
import com.intershop.beehive.core.capi.impex.util.LanguageImpexUtil;
import java.util.Locale;
import com.intershop.component.image.pipelet.GetImageViewByID;
import com.intershop.beehive.core.capi.localization.LocaleInformation;
import java.util.Collection;
import com.intershop.beehive.core.capi.localization.LocaleMgr;
import com.intershop.component.image.internal.orm.ImageView;
import com.intershop.beehive.orm.internal.query.GetObjectsByAttributeQuery;

public final class ImageMetadataExport_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

 protected Boolean printTemplateMarker() { return Boolean.FALSE; } 
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write("\n\n\n\n\n\n\n\n\n\n\n");
 


setEncodingType("text/xml"); 
      out.write('\n');
 context.setCustomTagTemplateName("customattributes","inc/CustomAttributes",false,new String[]{"attributes"},null); 
      out.write("\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<enfinity\n\txsi:schemaLocation=\"http://www.intershop.com/xml/ns/enfinity/6.7/bc_image/impex bc_image.xsd\n\t\thttp://www.intershop.com/xml/ns/enfinity/6.5/core/impex-dt dt.xsd\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns=\"http://www.intershop.com/xml/ns/enfinity/6.7/bc_image/impex\"\n\txmlns:xml=\"http://www.w3.org/XML/1998/namespace\"\n\txmlns:dt=\"http://www.intershop.com/xml/ns/enfinity/6.5/core/impex-dt\"\n\tmajor=\"6\" minor=\"1\" family=\"enfinity\" branch=\"enterprise\" build=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("BuildNumber"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {22}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\n>\n");

	PipelineDictionary dict = getPipelineDictionary(); 
	LocaleMgr localeMgr = (LocaleMgr) NamingMgr.getInstance().lookupManager(LocaleMgr.REGISTRY_NAME);
	Collection locales = localeMgr.getLocales();
	dict.put("locales", locales);
 
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ImageViews"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",30,e);}if (_boolean_result) { 
      out.write('\n');
      out.write('	');
 while (loop("ImageViews","ImageView",null)) { 
      out.write("\n\t    <image-view id=\"");
      out.print(context.getFormattedValue(stringToXml(context.getFormattedValue(getObject("ImageView:ID"),null)),null));
      out.write('"');
 _boolean_result=false;try {_boolean_result=((Boolean)(((((context.getFormattedValue(getObject("ImageView:ID"),null).equals(context.getFormattedValue(getObject("PrimaryViewID"),null)))) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",32,e);}if (_boolean_result) { 
      out.write(" primary-view=\"true\"");
 } else { 
      out.write(" primary-view=\"false\"");
 } 
      out.write(">\n\t    \t");
 while (loop("locales","locale",null)) { 
      out.write("\n\t    \t\t");
 {Object temp_obj = (stringToXml(context.getFormattedValue(getObject("ImageView:Name(locale)"),null))); getPipelineDictionary().put("ImageViewNameLocalized", temp_obj);} 
      out.write("\n\n\t    \t\t\n\t    \t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("ImageViewNameLocalized:Empty"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",37,e);}if (_boolean_result) { 
      out.write("\n\t    \t\t");
 {Object temp_obj = (getObject("locale")); getPipelineDictionary().put("localeVar", temp_obj);} 
      out.write("\n\t    \t\t<name xml:lang=\"");

	    			LocaleInformation localeInformation = (LocaleInformation)dict.get("localeVar");
	    			out.print(LanguageImpexUtil.encodeLanguage(localeInformation.getLocaleID(), ""));
		    		 
      out.write('"');
      out.write('>');
      out.print(context.getFormattedValue(encodeString(context.getFormattedValue(getObject("ImageViewNameLocalized"),null)),null));
      out.write("</name>\n\t    \t\t");
 } 
      out.write("\n\t    \t");
 } 
      out.write("\n\t    \t");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((disableErrorMessages().isDefined(getObject("ImageView:AssignedImageTypeBOs"))))).booleanValue() && ((Boolean) ((((Boolean) (getObject("ImageView:AssignedImageTypeBOs:Empty"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",45,e);}if (_boolean_result) { 
      out.write("\n\t        \t<image-type-assignments>\n\t\t        \t");
 while (loop("ImageView:AssignedImageTypeBOs","AssignedImageType",null)) { 
      out.write("\n\t\t        \t\t<image-type-assignment image-type=\"");
      out.print(context.getFormattedValue(stringToXml(context.getFormattedValue(getObject("AssignedImageType:ID"),null)),null));
      out.write("\"/>\n\t\t        \t");
 } 
      out.write("\n\t        \t</image-type-assignments>\n\t        ");
 } 
      out.write("\n\t\t</image-view>\n\t");
 } 
      out.write('\n');
 } 
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ImageTypes"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",55,e);}if (_boolean_result) { 
      out.write('\n');
      out.write('	');
 while (loop("ImageTypes","ImageType",null)) { 
      out.write("\n\t    <image-type id=\"");
      out.print(context.getFormattedValue(stringToXml(context.getFormattedValue(getObject("ImageType:ID"),null)),null));
      out.write('"');
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ImageType:ID"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",57,e);}if (_boolean_result) { 
      out.write(" source=\"");
      out.print(context.getFormattedValue(stringToXml(context.getFormattedValue(getObject("ImageType:SourceType"),null)),null));
      out.write('"');
 } 
      out.write(">\n\t        ");
 while (loop("locales","locale",null)) { 
      out.write("\n\t        \t");
 {Object temp_obj = (stringToXml(context.getFormattedValue(getObject("ImageType:Name(locale)"),null))); getPipelineDictionary().put("ImageTypeNameLocalized", temp_obj);} 
      out.write("\n\n\t    \t\t\n\t    \t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("ImageTypeNameLocalized:Empty"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",62,e);}if (_boolean_result) { 
      out.write("\n\t    \t\t");
 {Object temp_obj = (getObject("locale")); getPipelineDictionary().put("localeVar", temp_obj);} 
      out.write("\n\t    \t\t<name xml:lang=\"");

	    			LocaleInformation localeInformation = (LocaleInformation)dict.get("localeVar");
	    			out.print(LanguageImpexUtil.encodeLanguage(localeInformation.getLocaleID(), ""));
		    		 
      out.write('"');
      out.write('>');
      out.print(context.getFormattedValue(encodeString(context.getFormattedValue(getObject("ImageTypeNameLocalized"),null)),null));
      out.write("</name>\n\t    \t\t ");
 } 
      out.write("\n\t    \t");
 } 
      out.write("\n\t        <prefix>");
      out.print(context.getFormattedValue(stringToXml(context.getFormattedValue(getObject("ImageType:Prefix"),null)),null));
      out.write("</prefix>\n\t        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ImageType:Width"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",71,e);}if (_boolean_result) { 
      out.write("\n\t        \t<width>");
 {String value = null;try{value=context.getFormattedValue(getObject("ImageType:Width"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {72}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</width>\n\t        ");
 } 
      out.write("\n\t        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ImageType:Height"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("\n\t        \t<height>");
 {String value = null;try{value=context.getFormattedValue(getObject("ImageType:Height"),"0",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {75}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</height>\n\t        ");
 } 
      out.write("\n\t        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ImageType:FallbackImage"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",77,e);}if (_boolean_result) { 
      out.write("\n\t        \t<fallback-image>");
      out.print(context.getFormattedValue(stringToXml(context.getFormattedValue(getObject("ImageType:FallbackImage"),null)),null));
      out.write("</fallback-image>\n\t        ");
 } 
      out.write("\n\t        ");
 {Object temp_obj = (getObject("ImageType:Extension(\"PersistentObjectBOExtension\"):PersistentObject:AttributeValues")); getPipelineDictionary().put("AttributeValues", temp_obj);} 
      out.write("\n\t        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("AttributeValues") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",81,e);}if (_boolean_result) { 
      out.write("\n\t        \t");
 processOpenTag(response, pageContext, "customattributes", new TagParameter[] {
new TagParameter("attributes",getObject("AttributeValues"))}, 82); 
      out.write("\n\t        ");
 } 
      out.write("\n\t\t</image-type>\n\t");
 } 
      out.write('\n');
 } 
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ImageSets"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",87,e);}if (_boolean_result) { 
      out.write('\n');
      out.write('	');
 while (loop("ImageSets","ImageSet",null)) { 
      out.write("\n\t    <image-set id=\"");
      out.print(context.getFormattedValue(stringToXml(context.getFormattedValue(getObject("ImageSet:ID"),null)),null));
      out.write("\">\n\t    \t");
 while (loop("locales","locale",null)) { 
      out.write("\n\t        \t");
 {Object temp_obj = (stringToXml(context.getFormattedValue(getObject("ImageSet:Name(locale)"),null))); getPipelineDictionary().put("ImageSetNameLocalized", temp_obj);} 
      out.write("\n\n\t    \t\t\n\t    \t\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("ImageSetNameLocalized:Empty"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",94,e);}if (_boolean_result) { 
      out.write("\n\t    \t\t");
 {Object temp_obj = (getObject("locale")); getPipelineDictionary().put("localeVar", temp_obj);} 
      out.write("\n\t    \t\t<name xml:lang=\"");

	    			LocaleInformation localeInformation = (LocaleInformation)dict.get("localeVar");
	    			out.print(LanguageImpexUtil.encodeLanguage(localeInformation.getLocaleID(), ""));
		    		 
      out.write('"');
      out.write('>');
      out.print(context.getFormattedValue(encodeString(context.getFormattedValue(getObject("ImageSetNameLocalized"),null)),null));
      out.write("</name>\n\t    \t\t ");
 } 
      out.write("\n\t    \t");
 } 
      out.write("\n\t        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("ImageSet:SortedImageTypeViewPairs") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",102,e);}if (_boolean_result) { 
      out.write("\n\t        \t<type-view-assignments>\n\t\t        \t");
 while (loop("ImageSet:SortedImageTypeViewPairs","ImageTypeViewPair",null)) { 
      out.write("\n\t\t        \t\t<type-view-assignment image-view=\"");
      out.print(context.getFormattedValue(getObject("ImageTypeViewPair:ImageView:ID"),null));
      out.write("\" image-type=\"");
      out.print(context.getFormattedValue(getObject("ImageTypeViewPair:ImageType:ID"),null));
      out.write("\"/>\n\t\t        \t");
 } 
      out.write("\n\t        \t</type-view-assignments>\n\t        ");
 } 
      out.write("\n\t\t</image-set>\n\t");
 } 
      out.write('\n');
 } 
      out.write("\n</enfinity>\n\n");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
