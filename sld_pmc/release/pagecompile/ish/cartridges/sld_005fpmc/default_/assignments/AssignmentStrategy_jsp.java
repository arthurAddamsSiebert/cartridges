/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:30:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fpmc.default_.assignments;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.domain.Domain;
import com.intershop.beehive.core.capi.domain.PersistentObject;
import com.intershop.beehive.core.capi.util.PositionableHelper;
import com.intershop.beehive.core.capi.util.Positionable;
import com.intershop.component.foundation.capi.assignment.AssignmentStrategyProvider;
import com.intershop.component.foundation.capi.assignment.AssignmentStrategy;

public final class AssignmentStrategy_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {


    private Class<?> resolveClass(String name)
    {
        try
        {
            if (name != null)
                return Class.forName(name);
        }
        catch (ClassNotFoundException cnfe)
        {
            Logger.error(this, "Cannot resolve given class name", cnfe);
        }

        return null;
    }

	private static abstract class PositionablePersistentObject implements Positionable, PersistentObject
	{
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write('\n');
 
setEncodingType("text/html"); 

	AssignmentStrategyProvider provider = NamingMgr.getProvider(AssignmentStrategyProvider.class);
	
	if (provider == null)
	{
		Logger.error(this, "Unable to find a provider implementation for {}",
		                AssignmentStrategyProvider.REGISTRY_NAME);
		throw new RuntimeException("No provider implementation found");
	}

	Domain domain = (Domain)getObject("Domain");
	PersistentObject contextObject = (PersistentObject)getObject("ContextObject");
	String from = (String)getObject("FromClass");
	String to = (String)getObject("ToClass");
	AssignmentStrategy assignmentStrategy = null;

	if (domain != null && contextObject != null)
	{
        if (from != null)
        {
            assignmentStrategy = provider.getAssignmentStrategy(domain.getSite(), resolveClass(from), contextObject.getClass());
        }
        else
        {
            assignmentStrategy = provider.getAssignmentStrategy(domain.getSite(), contextObject);
        }

		PositionableHelper<PersistentObject,PositionablePersistentObject> pHelper = assignmentStrategy.getPositionableHelper(contextObject, domain);
		getPipelineDictionary().put("PositionableHelper", pHelper);
	}
	else if(domain != null)
	{
        assignmentStrategy = provider.getAssignmentStrategy(domain.getSite(), resolveClass(from), resolveClass(to));
	}
	getPipelineDictionary().put("AssignmentStrategy", assignmentStrategy);

 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
