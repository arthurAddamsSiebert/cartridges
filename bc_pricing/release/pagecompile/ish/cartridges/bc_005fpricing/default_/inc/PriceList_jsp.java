/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:30:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.bc_005fpricing.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import java.util.*;
import java.sql.*;
import com.intershop.beehive.core.capi.naming.*;
import com.intershop.component.pricing.capi.definition.*;
import com.intershop.component.pricing.capi.pricelist.*;
import com.intershop.beehive.core.capi.environment.ORMMgr;
import com.intershop.beehive.xcs.capi.product.*;

public final class PriceList_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

 protected Boolean printTemplateMarker() { return Boolean.FALSE; } 

	ORMMgr ormMgr = 
		(ORMMgr)NamingMgr.getInstance().lookupManager(ORMMgr.REGISTRY_NAME);
	PriceListMgr priceListMgr = 
		(PriceListMgr)NamingMgr.getInstance().lookupManager(PriceListMgr.REGISTRY_NAME);
	ProductMgr productMgr = 
		(ProductMgr)NamingMgr.getInstance().lookupManager(ProductMgr.REGISTRY_NAME);

	List getProductUUIDs(String priceListUUID)
		throws SQLException
	{
		List uuids = new ArrayList();
		PreparedStatement stmt = null;
	
		try
		{
			Connection con = ormMgr.getORMEngine().getJDBCManager().getCurrentConnection();
			stmt = con.prepareStatement(
				"select distinct productuuid from PRICESCALETABLEASSIGNMENT where pricelistuuid=?");
			stmt.setString(1, priceListUUID);
			ResultSet rs = stmt.executeQuery();
	
			while (rs.next())
			{
				uuids.add(rs.getString("productuuid"));		
			}
		}
		finally
		{
			if (stmt != null) stmt.close();			
		}
		
		return uuids;
	}	

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 


setEncodingType("text/xml"); 
      out.write("\n\n\n\n");
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"impex/Modules", null, "11");} 
      out.write('\n');
 context.setCustomTagTemplateName("pricelistentry","inc/PriceListEntry",false,new String[]{"tables","product"},null); 
      out.write('\n');
 context.setCustomTagTemplateName("customattributes","inc/CustomAttributes",false,new String[]{"attributes"},null); 
      out.write("\n<product-price-list id=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("pricelist:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {19}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" priceType=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("pricelist:PriceType"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {19}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n\t");
 while (loop("pricelist:AttributeValues","av",null)) { 
      out.write('\n');
      out.write('	');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("av:Name"),null).equals(context.getFormattedValue("displayName",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",21,e);}if (_boolean_result) { 
      out.write("\n\t\t\t<display-name xml:lang=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("av:XMLLocaleID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {22}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("av:StringValue"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {22}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</display-name>\n\t\t");
 } 
      out.write('\n');
      out.write('	');
 } 
      out.write('\n');
      out.write('	');
 while (loop("pricelist:AttributeValues","av",null)) { 
      out.write('\n');
      out.write('	');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("av:Name"),null).equals(context.getFormattedValue("description",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",26,e);}if (_boolean_result) { 
      out.write("\n\t\t\t<description xml:lang=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("av:XMLLocaleID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {27}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("av:StringValue"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {27}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</description>\n\t\t");
 } 
      out.write('\n');
      out.write('	');
 } 
      out.write("\n\t<enabled>");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("pricelist:Enabled"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",30,e);}if (_boolean_result) { 
      out.write("true");
 } else { 
      out.write("false");
 } 
      out.write("</enabled>\n\t<priority>");
 {String value = null;try{value=context.getFormattedValue(getObject("pricelist:Priority"),"0.####","DecimalSeparator=.");}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {31}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</priority>\n\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("pricelist:ValidFromNull"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",32,e);}if (_boolean_result) { 
      out.write("<valid-from>");
 processOpenTag(response, pageContext, "datetime", new TagParameter[] {
new TagParameter("date",getObject("pricelist:ValidFrom"))}, 32); 
      out.write("</valid-from>");
 } 
      out.write('\n');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("pricelist:ValidToNull"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",33,e);}if (_boolean_result) { 
      out.write("<valid-to>");
 processOpenTag(response, pageContext, "datetime", new TagParameter[] {
new TagParameter("date",getObject("pricelist:ValidTo"))}, 33); 
      out.write("</valid-to>");
 } 
      out.write("\n\n\t<target-groups>\n\t");
 {out.flush();processExtensionPoint((com.intershop.beehive.core.capi.request.ServletResponse)response,"PriceListExportXMLExtensions", null, "36");} 
      out.write("\n\t</target-groups>\n\t");
 
		PriceList priceList = (PriceList)getObject("pricelist");
		List productUUIDs = getProductUUIDs(priceList.getUUID());
		
		for (int i = 0, n = productUUIDs.size(); i < n; ++i)
		{
			Product product = productMgr.getProductByUUID((String)productUUIDs.get(i));
			if (product != null)
			{
			    
				Iterator tables = priceListMgr.getPriceScaleTables(product, priceList);
				getPipelineDictionary().put("tables", tables);
				getPipelineDictionary().put("product", product);
				
      out.write("\n\t\t\t\t");
 processOpenTag(response, pageContext, "pricelistentry", new TagParameter[] {
new TagParameter("tables",getObject("tables")),
new TagParameter("product",getObject("product"))}, 52); 
      out.write(" \n\t\t\t\t");
   
			}
		}

		getPipelineDictionary().put("attributes", priceList.createCustomAttributesIterator());
	
      out.write('\n');
      out.write('	');
 processOpenTag(response, pageContext, "customattributes", new TagParameter[] {
new TagParameter("attributes",getObject("attributes"))}, 59); 
      out.write("\n</product-price-list>\n");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
