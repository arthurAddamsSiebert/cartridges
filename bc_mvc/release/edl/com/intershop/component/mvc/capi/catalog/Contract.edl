import "enfinity:/bc_mvc/edl/com/intershop/component/mvc/capi/catalog/Catalog.edl";
import "enfinity:/bc_mvc/edl/com/intershop/component/mvc/capi/catalog/Repository.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.component.mvc.capi.catalog
{
    /*
     * This interface represents a special type of catalog that implements the semantic of a contract. A contract implements aspects of catalogs AND repositories at the same time. The content domain associated with a contract therefore typically contains instances of <code>CatalogCategory</code>, <code>ProductCategoryAssignment</code> and <code>Product</code>. The contract instance itself basically serves as a descriptor for the associated content domain.
     * 
     * @author Jan Fiedler
     */
    cartridge interface Contract extends Catalog, Repository
    {
        attribute validFrom : datetime required;

        attribute validTo : datetime required;

        /*
         * Returns true if the contract is a proxy contract. A proxy contract does not own a content domain but shares one with a standard contract.
         */
        operation isProxy() : boolean;

        /*
         * Returns the contract actually owning the contract domain. In case this contract is a proxy the original contract is returned else the called contract.
         */
        operation getOriginalContract() : Contract;
    }
}
