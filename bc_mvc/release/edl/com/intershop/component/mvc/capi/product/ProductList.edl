import "enfinity:/bc_mvc/edl/com/intershop/component/mvc/capi/product/ProductListEvent.edl";
import "enfinity:/bc_mvc/edl/com/intershop/component/mvc/capi/product/ProductListItem.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external User type "com.intershop.beehive.core.capi.user.User";

namespace com.intershop.component.mvc.capi.product
{
    /*
     * Interface container product list items.
     */
    cartridge interface ProductList extends ExtensibleObject
    {
    	/*
         * The name of list.
         */
        attribute name : string;
        /*
         * Display name of product list.
         */
        attribute displayName : string required localized;

        /*
         * Short description of product list.
         */
        attribute Description : string required localized;

        /*
         * Type coder of product list. Might be used to dived different kinds of lists.
         */
        attribute typeCode : int required;

        /*
         * Indicating searchabel to other users or just private.
         */
        attribute public : boolean required;

        /*
         * UUID of connected PersistentObject,
         */
        attribute scopeUUID : string required;

        /*
         * The unique id in a human readable format.
         */
        attribute documentNo : string;

        /*
         * Holds the state of the product list. The state is used for product list type 4 (quote).
         */
        attribute state : int;

        /*
         * Flag to mark a product list as fixed.
         */
        attribute fixed : boolean;

        /*
         * The start date of duration limit.
         */
        attribute validFrom : datetime;

        /*
         * The end date of duration limit.
         */
        attribute validTo : datetime;

        /*
         * Total price in purchase currency of all items.
         */
        attribute total : Money;

        /*
         * The creation date of the product list.
         */
        attribute creationDate : datetime;

        /*
         * Origin price in purchase currency of all items.This attribute is used for quote handling to store the origin total.
         */
        attribute originTotal : Money;

        /*
         * A flag to mark a product list as modiefied. The flag is used for quote handling.
         */
        attribute modified : boolean;

        attribute negotiationTotal : Money;

        relation productListEvents : ProductListEvent[0..n] readonly;

        relation items : ProductListItem[0..n] readonly;

        relation owningDomain : Domain[0..1];

        relation user : User[0..n] readonly;

        /*
         * Creates an iterator of all dependent product list items.
         */
        operation createDependentItemsIterator() : Iterator;

        /*
         * Creates an iterator of all independent product list items.
         */
        operation createIndependentItemsIterator() : Iterator;

        /*
         * Determines the number of dependent product list items.
         */
        operation getDependentItemsCount() : int;
        
        /*
         * Determines the next position for dependent product list items.
         */
        operation getNextDependentItemsPosition() : int;

        /*
         * Determines the number of independent product list items.
         */
        operation getIndependentItemsCount() : int;
        
        /*
         * Determines the next position for independent product list items.
         */
        operation getNextIndependentItemsPosition() : int;

        /*
         * Returns the last product list event for the given type code. If more than one product list event found the event with the greatest event date is returned.
         */
        operation getProductListEventByType(^type : string) : ProductListEvent;

        /*
         * Returns all product list events sorted by event date ascending.
         */
        operation createSortedProductListEventIterator() : Iterator;
    }
}
