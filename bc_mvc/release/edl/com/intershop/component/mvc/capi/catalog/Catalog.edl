import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/catalog/CatalogCategory.edl";
import "enfinity:/bc_mvc/edl/com/intershop/component/mvc/capi/catalog/ClassificationSystem.edl";

external Positionable type "com.intershop.beehive.core.capi.util.Positionable";

namespace com.intershop.component.mvc.capi.catalog
{
    /*
     * This interface represents a catalog structure that can be used to navigate and structure a typically unstructured product repository. Catalogs are always associated with a content domain that is used to store (and physically separate) the mass-data content of the catalog (typically instances of <code>CatalogCategory</code>). A catalog instance therefore basically serves as a descriptor for the associated content domain.
     * 
     * @see com.intershop.component.mvc.capi.catalog.Repository
     * @see com.intershop.component.mvc.capi.catalog.MVCatalogMgr
     * 
     * @author Jan Fiedler
     */
    cartridge interface Catalog extends ExtensibleObject, Positionable
    {
        attribute typeCode : int required;

        attribute displayName : string required localized;

        attribute shortDescription : string required localized;

        /*
         * category rich content description
         */
        attribute richContent : string required localized;

        attribute id : string readonly required;

        /*
         * The status of this catalog.
         * 0 = offline
         * 1 = online
         */
        attribute status : int required;

        /*
         * The start date of the maintanance period.
         */
        attribute startMaintenance : datetime required;

        /*
         * The end date of the maintanance period.
         */
        attribute endMaintenance : datetime required;

        /*
         * The position of catalog in list.
         */
        attribute position : double;

        /*
         * The catalog domain basically is a link to the content domain associated with the catalog instance. The content domain is used to store the actual catalog content. Note that the content domain may be shared by multiple catalog instances (i.e. in case of proxy catalogs).
         */
        relation catalogDomain : Domain[0..1] readonly;

        relation root : CatalogCategory[0..1] readonly;

        relation classificationSystem : ClassificationSystem[0..1];

        operation isOnline() : boolean;

        operation isOnline(time : datetime) : boolean;

        operation getOwningDomain() : Domain;

        /*
         * Returns true if the catalog is a proxy catalog. A proxy catalog does not own a content domain but shares one with a standard catalog.
         */
        operation isProxy() : boolean;

        /*
         * Returns the catalog actually owning the catalog domain. In case this catalog is a proxy the original catalog is returned else the called catalog.
         */
        operation getOriginalCatalog() : Catalog;
    }
}
