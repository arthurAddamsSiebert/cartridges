import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/user/UserGroup.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";
import "enfinity:/xcs/edl/com/intershop/beehive/xcs/capi/catalog/CatalogCategory.edl";

external ProductRef type "com.intershop.beehive.xcs.common.ProductRef";

namespace com.intershop.component.mvc.capi.filter
{
    /*
     * This class represents a single catalog filter that can be applied to catalogs and product repositories. Catalog filters support user group specific views on a common catalog and product structure. Each catalog filter can contain certain inclusion and exclusion rules for categories and / or products.
     * 
     * Catalog filters integrate with the MultiSite Platform permission concept (i.e. business object role assignments). This means that product and category visibility for a certain user is controlled by the existence of appropriate role assignment instances for one of the user's user groups.
     * 
     * Catalog filters rely on a publishing mechanism for optimal performances when browsing the catalog. Once defined, the catalog filter rules are evaluated in an asynchronous process. During the publishing process, the approriate set of role assignment instances is calculated based on the catalog filter inclusion and exclusion rules.
     * 
     * @see com.intershop.component.mvc.capi.filter.CatalogFilterMgr
     * @see com.intershop.component.mvc.capi.filter.CatalogFilterConstants
     */
    cartridge interface CatalogFilter extends ExtensibleObject
    {
        /*
         * The localizable display name of the catalog filter. The name is only used for presentation purposes.
         */
        attribute name : string required localized;

        /*
         * An optional (and localizable) short description for the catalog filter purpose.
         */
        attribute description : string required localized;

        /*
         * The catalog filter state is represented as an integer constant. Supported states are online, offline, deleted, and publishing. See the appropriate constant definitions for details.
         * 
         * @see com.intershop.component.mvc.capi.filter.CatalogFilterConstants
         */
        attribute state : int required;

        /*
         * The last publication time is representated as a time stamp that captures the time of the last filter publication. The timestamp is used together with the publishing interval to calculate the filter expiration (and to recalculate the filter).
         */
        attribute lastUpdate : datetime required;

        /*
         * The publishing interval defines the frequence a catalog filters is supposed to be published based on a filter. The interval can be specified in seconds. Specify 0 in case the filter is not supposed to be published based on a schedule.
         */
        attribute updateInterval : int required;

        /*
         * A timestamp that captures the last modification time of the filter instance.
         */
        attribute lastModified : datetime required;

        /*
         * The scope ID carries the UUID of the persistent business object the catalog filter is 'attached' to.
         */
        attribute scopeID : string required;

        /*
         * The semantic ID of this catalog filter instance.
         */
        attribute ID : string required;

        /*
         * This relation is used to assign users groups to the filter instance. Assigning a user group to the filter means that the users of the user group can only see the products and categories that are considered visible in the context of the catalog filter.
         * <p>
         * Note that any user can be assigned to multiple catalog filters (i.e.through participation in multiple groups assigned to different filters).
         */
        relation assignedUserGroups : UserGroup[0..n] readonly;

        /*
         * @deprecated Feature not longer supported.
         */
        relation includedSuppliers : Domain[0..n];

        /*
         * A catalog filter can exclude any number of catalog categories. Excluding a category from a catalog filter means that the products located in the specified catalog branch must not be visible in the context of the filter.
         * <p>
         * Note that catalog exclusion rules always work recusively - all products located in the catalogy or one of its direct or indirect childs are considered invisible.
         */
        relation excludedCategories : CatalogCategory[0..n];

        /*
         * @deprecated Feature not longer supported.
         */
        relation excludedSuppliers : Domain[0..n];

        /*
         * A catalog filter can include any number of products reprensented as their ProductRefs. Including a product into a catalog filter means that this product is supposed to be visible in the context of the filter.
         */
        relation includedProducts : ProductRef[0..n];

        /*
         * The filter user group is created along with the filter instance and is used to integrate the filter concept with the underlying platform permission framework. All role assignments of the filter instance will be created for the filter's private user group.
         */
        relation filterGroup : UserGroup[0..1] readonly;
        
        /**
         * The target user group is created along with the filter instance and is used to integrate the filter concept with the underlying platform permission framework. All user assignments of the filter instance will be created for the filter's private target group. 
         */
		relation targetGroup : UserGroup[0..1] readonly;
		
        /*
         * A catalog filter can exclude any number of products reprensented as their ProductRefs. Excluding a product from a catalog filter means that this product  must not be visible in the context of the filter.
         */
        relation excludedProducts : ProductRef[0..n];

        /*
         * A catalog filter can include any number of catalog categories. Including a category into a catalog filter means that the products located in the specified catalog branch are supposed to be visible in the context of the filter.
         * <p>
         * Note that catalog inclusion rules always work recusively - all products located in the catalogy or one of its direct or indirect childs are considered visible.
         */
        relation includedCategories : CatalogCategory[0..n];
    }
}
