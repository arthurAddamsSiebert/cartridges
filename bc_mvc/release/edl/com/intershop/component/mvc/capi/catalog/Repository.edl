import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/Domain.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

external SyncRecordCtnr type "com.intershop.component.mvc.capi.catalog.SyncRecordCtnr";

namespace com.intershop.component.mvc.capi.catalog
{
    /*
     * This interface represents flat and unstructured storage location for product content (i.e. products and offers). Repositories are always associated with a content domain that is used to store (and physically separate) the mass-data content of the repository (typically instances of <code>Product</code> and <code>ProductCategoryAssignment</code>). A repository instance therefore basically serves as a descriptor for the associated content domain.
     * 
     * @see com.intershop.component.mvc.capi.catalog.Catalog
     * @see com.intershop.component.mvc.capi.catalog.MVCatalogMgr
     * 
     * @author Jan Fiedler
     */
    cartridge interface Repository extends ExtensibleObject, SyncRecordCtnr
    {
        attribute typeCode : int required;

        attribute displayName : string required localized;

        attribute shortDescription : string required localized;

        attribute id : string readonly required;

        /*
         * The repository domain basically is a link to the content domain associated with the repository instance. The content domain is used to store the actual repository content.
         */
        relation repositoryDomain : Domain[0..1] readonly;

        operation getOwningDomain() : Domain;

        /*
         * Returns true if the repository is a proxy repository. A proxy repository does not own a content domain but shares one with a standard repository.
         */
        operation isProxy() : boolean;

        /*
         * Returns the repository actually owning the repository domain. In case this repository is a proxy the original repository is returned else the called repository.
         */
        operation getOriginalRepository() : Repository;
    }
}
