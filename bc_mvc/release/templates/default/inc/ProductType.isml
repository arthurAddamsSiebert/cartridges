<!--- TemplateName        : ProductType.isml --->
<!--- TemplateDescription : Export a product type --->
<!--- TemplateParameter   : producttype --->

<ISCONTENT type = "text/xml" templatemarker="false" charset="utf-8" SESSION="FALSE">

<ISMODULE template = "inc/CustomAttributes"
          name = "CUSTOMATTRIBUTES"
          attribute = "attributes">

<%@ page import = "com.intershop.beehive.xcs.capi.product.*,com.intershop.beehive.xcs.capi.producttype.*,java.util.Iterator,com.intershop.beehive.core.capi.domain.*" %>

<ISIF condition="#isDefined(producttype)#">

    <product-type name="<ISPRINT value="#producttype:Name#">">
        <name>#stringToXml(producttype:Name)#</name>

    <ISIF condition="#isDefined(producttype:ParentProductType)#">
            <parent name="<ISPRINT value="#producttype:ParentProductType:Name#">" domain="<ISPRINT value="#StringToXML(producttype:ParentProductType:Domain:DomainName)#">"/></ISIF>

        <ISLOOP iterator="producttype:AttributeValues" alias="av">
            <ISIF condition="#(av:Name EQ 'displayName')#"><display-name <ISIF condition="#av:isLocalized#">xml:lang="#encodeValue(av:XMLLocaleID)#"</ISIF>><ISPRINT value="#av:StringValue#"></display-name></ISIF>
        </ISLOOP>

        <%
            ProductType productType = (ProductType) getObject("producttype");

            if(productType.isDefault())
            {
                out.println("<default>1</default>");
            }
            else
            {
                out.println("<default>0</default>");
            }


            Iterator productAttributes = productType.createProductAttributesIterator();

            if(productAttributes.hasNext())
            {
                out.println("<product-type-attributes>");

                while (productAttributes.hasNext())
                {
                    ProductAttribute productAttribute = (ProductAttribute) productAttributes.next();
                    out.print("<product-type-attribute name=\"");
                    out.print(stringToXml(productAttribute.getName()));
                    out.print("\"");

                    if(productAttribute.getValueType() == AttributeDefinitionConstants.ATTRIBUTE_TYPE_STRING)
                    {
                        out.println(" dt:dt=\"string\">");
                    }
                    
                    if(productAttribute.getValueType() == AttributeDefinitionConstants.ATTRIBUTE_TYPE_MULTIPLE_STRING)
                    {
                        out.println(" dt:dt=\"string\" multiple=\"1\">");
                    }

                    if(productAttribute.getValueType() == AttributeDefinitionConstants.ATTRIBUTE_TYPE_INT)
                    {
                        out.println(" dt:dt=\"int\">");
                    }
                    
                    if(productAttribute.getValueType() == AttributeDefinitionConstants.ATTRIBUTE_TYPE_MULTIPLE_INT)
                    {
                        out.println(" dt:dt=\"int\" multiple=\"1\">");
                    }

                    if(productAttribute.getValueType() == AttributeDefinitionConstants.ATTRIBUTE_TYPE_DOUBLE)
                    {
                        out.println(" dt:dt=\"double\">");
                    }
                    
                    if(productAttribute.getValueType() == AttributeDefinitionConstants.ATTRIBUTE_TYPE_MULTIPLE_DOUBLE)
                    {
                        out.println(" dt:dt=\"double\" multiple=\"1\">");
                    }
                    
                    if(productAttribute.getValueType() == AttributeDefinitionConstants.ATTRIBUTE_TYPE_TEXT)
                    {
                        out.println(" dt:dt=\"text\">");
                    }

					for (Iterator iter = productAttribute.createAttributeValuesIterator("displayName"); iter.hasNext(); )
					{
						AttributeValue av = (AttributeValue)iter.next();
						out.print("<display-name xml:lang=\"" + av.getXMLLocaleID() + "\"" + ">");
						out.print(stringToXml(av.getStringValue()));
						out.println("</display-name>");
					}
					
                    if(productAttribute.isOrderRequired())
                    {
                        out.println("<order-required>1</order-required>");
                    }
                    else
                    {
                        out.println("<order-required>0</order-required>");
                    }

                    for (Iterator iter = productAttribute.createAttributeValuesIterator("unit"); iter.hasNext(); )
                    {
                    	AttributeValue unit = (AttributeValue)iter.next();
                    	out.print("<unit xml:lang=\"" + unit.getXMLLocaleID() + "\">");
                    	out.println(stringToXml(unit.getStringValue()) + "</unit>");
                    }

                    if(productAttribute.isLocalized())
                    {
                        out.println("<localizable>1</localizable>");
                    }
                    else
                    {
                        out.println("<localizable>0</localizable>");
                    }

                    Object defaultValue = productAttribute.getDefaultValue();

                    Iterator avs = productAttribute.createAttributeValuesIterator();

                    String  defaultLocale = null;

                    while(avs.hasNext())
                    {
                        AttributeValue  av          = (AttributeValue) avs.next();
                        String          avName      = av.getName();

                        if(avName.equals("defaultValue"))
                        {
                            defaultLocale = av.getXMLLocaleID();
                        }

                        if(avName.equals(ProductAttributeEnumerationConstants.ENUMERATION_VALUES_NAME))
                        {
                            String localeID = av.getXMLLocaleID();
                            Object enumValues  = av.getObject();

                            if (enumValues instanceof Iterator)
                            {
                                Iterator enumIterator = (Iterator) enumValues;

                                while (enumIterator.hasNext())
                                {
                                    Object value = enumIterator.next();
                                    out.print("<value");
                                    out.print(" xml:lang=\"");
                                    out.print(localeID);
                                    out.print("\"");
                                    out.print(" default=\"");
                                    if(value.equals(defaultValue))
                                    {
                                        out.print("1");
                                    }
                                    else
                                    {
                                        out.print("0");
                                    }
                                    out.print("\">");
                                    out.print(stringToXml(value.toString()));
                                    out.println("</value>");
                                }

                            }
                        }
                    }

                    if (!productAttribute.isEnumeration())
                    {
                        if (defaultValue != null)
                        {
                            out.print("<value");
                            out.print(" xml:lang=\"");
                            out.print(defaultLocale);
                            out.print("\"");
                            out.print(" default=\"1\">");
                            out.print(stringToXml(defaultValue.toString()));
                            out.println("</value>");
                        }
                    }

                    out.println("</product-type-attribute>");
                }
                out.println("</product-type-attributes>");
            }
            
            getPipelineDictionary().put("productTypeCustomAttributes", new com.intershop.beehive.core.capi.impex.AttributeValueIterator(productType.createCustomAttributesIterator(), productType));
        %>
        <ISCUSTOMATTRIBUTES attributes="#productTypeCustomAttributes#">

    </product-type>

</ISIF>
