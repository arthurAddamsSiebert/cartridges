/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.bc_005fmvc.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import java.util.*;
import com.intershop.beehive.core.capi.impex.AttributeValueIterator;
import com.intershop.beehive.core.capi.naming.*;
import com.intershop.beehive.core.capi.profile.*;
import com.intershop.beehive.core.capi.domain.*;
import com.intershop.component.foundation.capi.comment.*;
import com.intershop.component.mvc.capi.product.*;

public final class ProductList_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

 protected Boolean printTemplateMarker() { return Boolean.FALSE; } 

	ProductListMgr productListMgr = (ProductListMgr)NamingMgr.getInstance().lookupManager(ProductListMgr.REGISTRY_NAME);
	ProfileMgr profileMgr = (ProfileMgr)NamingMgr.getInstance().lookupManager(ProfileMgr.REGISTRY_NAME);
	CommentMgr commentMgr = (CommentMgr)NamingMgr.getInstance().lookupManager(CommentMgr.REGISTRY_NAME);
	
	public class AttributeFilterCondition extends FilterCondition
	{
		public boolean isValid(Object anObject)
		{
			AttributeValue attrib = (AttributeValue)anObject;
			if (attrib.getName().equals("displayName") || attrib.getName().equals("description"))
			{
				return false;
			}
			return true;
		}
	}			

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 


setEncodingType("text/xml"); 
      out.write('\n');
      out.write('\n');
      out.write('\n');
 context.setCustomTagTemplateName("productlistevent","inc/ProductListEvent",false,new String[]{"event"},null); 
      out.write('\n');
 context.setCustomTagTemplateName("productlistcomment","inc/ProductListComment",false,new String[]{"comment"},null); 
      out.write('\n');
 context.setCustomTagTemplateName("productlistproductitem","inc/ProductListProductItem",false,new String[]{"productItem"},null); 
      out.write('\n');
 context.setCustomTagTemplateName("productlistdependentproductitem","inc/ProductListDependentProductItem",false,new String[]{"productItem"},null); 
      out.write('\n');
 context.setCustomTagTemplateName("customattributes","inc/CustomAttributes",false,new String[]{"attributes"},null); 
      out.write('\n');
 {out.flush();processLocalIncludeByServer((com.intershop.beehive.core.capi.request.ServletResponse)response,"impex/Modules", null, "15");} 
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

	ProductList productList = (ProductList)getObject("productList");
	
	Profile profile = profileMgr.resolveProfileFromID(productList.getScopeUUID());
	getPipelineDictionary().put("productListUser", profile);
	
	FilterCondition filterCondition = new AttributeFilterCondition();
	FilterIterator filterIterator = new FilterIterator(productList.createAttributeValuesIterator(), filterCondition);	
    getPipelineDictionary().put("productListCustomAttributes", new AttributeValueIterator(filterIterator, productList));

	Iterator events = productList.createSortedProductListEventIterator();
	getPipelineDictionary().put("events", events);

	Iterator comments = commentMgr.getCommentsByObject(productList);	
	getPipelineDictionary().put("comments", comments);

	Iterator productItems = productList.createIndependentItemsIterator();
	getPipelineDictionary().put("productItems", productItems);

	Iterator dependentProductItems = productList.createDependentItemsIterator();
	getPipelineDictionary().put("dependentProductItems", dependentProductItems);

      out.write("\n\n<product-list type=\"");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:TypeCode")).doubleValue() ==((Number)(new Double(1))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",59,e);}if (_boolean_result) { 
      out.write("BOOKMARKS");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:TypeCode")).doubleValue() ==((Number)(new Double(2))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",59,e);}if (_boolean_result) { 
      out.write("WISHLIST");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:TypeCode")).doubleValue() ==((Number)(new Double(3))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",59,e);}if (_boolean_result) { 
      out.write("SHOPPINGLIST");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:TypeCode")).doubleValue() ==((Number)(new Double(4))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",59,e);}if (_boolean_result) { 
      out.write("QUOTE");
 }}}} 
      out.write("\" id=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("productList:DocumentNo"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {59}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\t\n\t");
 while (loop("productList:AttributeValues","av",null)) { 
      out.write('\n');
      out.write('	');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("av:Name"),null).equals(context.getFormattedValue("displayName",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",61,e);}if (_boolean_result) { 
      out.write("\n\t\t\t<display-name xml:lang=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("av:XMLLocaleID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {62}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("av:StringValue"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {62}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</display-name>\n\t\t");
 } 
      out.write('\n');
      out.write('	');
 } 
      out.write('\n');
      out.write('	');
 while (loop("productList:AttributeValues","av",null)) { 
      out.write('\n');
      out.write('	');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("av:Name"),null).equals(context.getFormattedValue("description",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",66,e);}if (_boolean_result) { 
      out.write("\n\t\t\t<description xml:lang=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("av:XMLLocaleID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {67}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("av:StringValue"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {67}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</description>\n\t\t");
 } 
      out.write('\n');
      out.write('	');
 } 
      out.write('\n');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("productListUser"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",70,e);}if (_boolean_result) { 
      out.write("<user business-partner-no=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("productListUser:DataSheet:BusinessPartnerNo"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {70}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" domain=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("productListUser:Domain:DomainName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {70}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('/');
      out.write('>');
 } 
      out.write('	');
      out.write('\n');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("productList:CreationDateNull"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",71,e);}if (_boolean_result) { 
      out.write("<creation-date>");
 processOpenTag(response, pageContext, "datetime", new TagParameter[] {
new TagParameter("date",getObject("productList:CreationDate"))}, 71); 
      out.write("</creation-date>");
 } 
      out.write('\n');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("productList:ValidFromNull"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",72,e);}if (_boolean_result) { 
      out.write("<valid-from>");
 processOpenTag(response, pageContext, "datetime", new TagParameter[] {
new TagParameter("date",getObject("productList:ValidFrom"))}, 72); 
      out.write("</valid-from>");
 } 
      out.write('\n');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("productList:ValidToNull"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",73,e);}if (_boolean_result) { 
      out.write("<valid-to>");
 processOpenTag(response, pageContext, "datetime", new TagParameter[] {
new TagParameter("date",getObject("productList:ValidTo"))}, 73); 
      out.write("</valid-to>");
 } 
      out.write('\n');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:TypeCode")).doubleValue() ==((Number)(new Double(4))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("<status>");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:State")).doubleValue() ==((Number)(new Double(0))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("CREATED_BY_BUYER");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:State")).doubleValue() ==((Number)(new Double(1))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("SUBMITTED_TO_APPROVER");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:State")).doubleValue() ==((Number)(new Double(2))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("APPROVED_BY_APPROVER");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:State")).doubleValue() ==((Number)(new Double(3))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("SUBMITTED_TO_SELLER");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:State")).doubleValue() ==((Number)(new Double(4))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("RESPONDED_BY_SELLER");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:State")).doubleValue() ==((Number)(new Double(5))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("RESPONDED_BY_APPROVER");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:State")).doubleValue() ==((Number)(new Double(6))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("ACCEPTED_BY_SELLER");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:State")).doubleValue() ==((Number)(new Double(7))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("ACCEPTED_BY_APPROVER");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:State")).doubleValue() ==((Number)(new Double(8))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("AUTO_ACCEPTED");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:State")).doubleValue() ==((Number)(new Double(9))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("REFUSED_BY_APPROVER");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:State")).doubleValue() ==((Number)(new Double(10))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("CANCELLED_BY_SELLER");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:State")).doubleValue() ==((Number)(new Double(11))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("CANCELLED_BY_APPROVER");
 } else {_boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("productList:State")).doubleValue() ==((Number)(new Double(12))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",74,e);}if (_boolean_result) { 
      out.write("CLOSED_BY_BUYER");
 }}}}}}}}}}}}} 
      out.write("</status>");
 } 
      out.write("\n\t<fixedflag>");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("productList:isFixed"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",75,e);}if (_boolean_result) { 
      out.write("true");
 } else { 
      out.write("false");
 } 
      out.write("</fixedflag>\n\t");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("productList:TotalNull"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",76,e);}if (_boolean_result) { 
      out.write("<totalprice currency=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("productList:Total:CurrencyMnemonic"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {76}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("productList:Total:Value"),"#0.0#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {76}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</totalprice>");
 } 
      out.write('\n');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("productList:OriginTotalNull"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",77,e);}if (_boolean_result) { 
      out.write("<origin-totalprice currency=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("productList:OriginTotal:CurrencyMnemonic"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {77}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("productList:OriginTotal:Value"),"#0.0#",null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {77}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</origin-totalprice>");
 } 
      out.write('\n');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((disableErrorMessages().isDefined(getObject("events"))))).booleanValue() && ((Boolean) ((hasLoopElements("events") ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",78,e);}if (_boolean_result) { 
      out.write("\n\t\t<events>\n\t\t\t");
 while (loop("events","event",null)) { 
      out.write("\n\t\t\t\t");
 processOpenTag(response, pageContext, "productlistevent", new TagParameter[] {
new TagParameter("event",getObject("event"))}, 81); 
      out.write("\n\t\t\t");
 } 
      out.write("\n\t\t</events>\n\t");
 } 
      out.write('\n');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((disableErrorMessages().isDefined(getObject("comments"))))).booleanValue() && ((Boolean) ((hasLoopElements("comments") ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",85,e);}if (_boolean_result) { 
      out.write("\n\t\t<comments>\n\t\t\t");
 while (loop("comments","comment",null)) { 
      out.write("\n\t\t\t\t");
 processOpenTag(response, pageContext, "productlistcomment", new TagParameter[] {
new TagParameter("comment",getObject("comment"))}, 88); 
      out.write("\n\t\t\t");
 } 
      out.write("\n\t\t</comments>\n\t");
 } 
      out.write('\n');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((disableErrorMessages().isDefined(getObject("productItems"))))).booleanValue() && ((Boolean) ((hasLoopElements("productItems") ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",92,e);}if (_boolean_result) { 
      out.write("\n\t\t<product-items>\n\t\t\t");
 while (loop("productItems","productItem",null)) { 
      out.write("\n\t\t\t\t");
 processOpenTag(response, pageContext, "productlistproductitem", new TagParameter[] {
new TagParameter("productItem",getObject("productItem"))}, 95); 
      out.write("\n\t\t\t");
 } 
      out.write("\n\t\t</product-items>\n\t");
 } 
      out.write('\n');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((disableErrorMessages().isDefined(getObject("dependentProductItems"))))).booleanValue() && ((Boolean) ((hasLoopElements("dependentProductItems") ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",99,e);}if (_boolean_result) { 
      out.write("\n\t\t<dependent-product-items>\n\t\t\t");
 while (loop("dependentProductItems","productItem",null)) { 
      out.write("\n\t\t\t\t");
 processOpenTag(response, pageContext, "productlistdependentproductitem", new TagParameter[] {
new TagParameter("productItem",getObject("productItem"))}, 102); 
      out.write("\n\t\t\t");
 } 
      out.write("\n\t\t</dependent-product-items>\n\t");
 } 
      out.write('\n');
      out.write('	');
 processOpenTag(response, pageContext, "customattributes", new TagParameter[] {
new TagParameter("attributes",getObject("productListCustomAttributes"))}, 106); 
      out.write("\n\t\n</product-list>\n");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
