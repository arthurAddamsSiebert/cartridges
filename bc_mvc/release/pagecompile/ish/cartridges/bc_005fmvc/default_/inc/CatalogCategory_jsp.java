/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.bc_005fmvc.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.xcs.capi.catalog.CatalogConstants;
import com.intershop.beehive.xcs.internal.catalog.ExtensibleObjectCustomAttributesFilterCondition;
import com.intershop.beehive.core.capi.impex.AttributeValueIterator;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.xcs.internal.image.ImageSetDefinitionCategoryAssignment;
import com.intershop.component.image.internal.orm.ImageReference;
import com.intershop.beehive.xcs.capi.catalog.CatalogMgr;
import com.intershop.beehive.xcs.capi.catalog.CatalogCategory;
import com.intershop.component.mvc.capi.catalog.MVCatalogMgr;
import com.intershop.component.mvc.capi.catalog.Catalog;

public final class CatalogCategory_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

 protected Boolean printTemplateMarker() { return Boolean.FALSE; } 
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 


setEncodingType("text/xml"); 
      out.write('\n');
      out.write(' ');
      out.write('\n');
 context.setCustomTagTemplateName("customattributes","inc/CustomAttributes",false,new String[]{"attributes"},null); 
      out.write(' ');
      out.write('\n');
      out.write('\n');
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("catalogcategory"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",27,e);}if (_boolean_result) { 
      out.write("\n    ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("catalogcategory:isHotDealsCategory"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",28,e);}if (_boolean_result) { 
      out.write("\n        <category name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("catalogcategory:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {29}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("catalogcategory:isRootCategory"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",29,e);}if (_boolean_result) { 
      out.write(" import-mode=\"UPDATE\"");
 } 
      out.write(">\n        <name>");
 {String value = null;try{value=context.getFormattedValue(getObject("catalogcategory:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {30}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</name>\n    \t<root>");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("catalogcategory:isRootCategory"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",31,e);}if (_boolean_result) { 
      out.write('1');
 } else { 
      out.write('0');
 } 
      out.write("</root>\n        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("catalogcategory:ProductQueryString"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",32,e);}if (_boolean_result) { 
      out.write("\n            <product-assignment-query>");
 {String value = null;try{value=context.getFormattedValue(getObject("catalogcategory:ProductQueryString"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {33}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</product-assignment-query>\n        ");
 } 
      out.write("\n        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("catalogcategory:Template"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",35,e);}if (_boolean_result) { 
      out.write("\n            <template>");
 {String value = null;try{value=context.getFormattedValue(getObject("catalogcategory:Template"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {36}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</template>\n        ");
 } 
      out.write("\n        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("catalogcategory:HotDealsCategory:Template"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",38,e);}if (_boolean_result) { 
      out.write("\n            <hotdeals-template>");
 {String value = null;try{value=context.getFormattedValue(getObject("catalogcategory:HotDealsCategory:Template"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {39}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</hotdeals-template>\n        ");
 } 
      out.write("\n        <online>");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("catalogcategory:isOnline"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",41,e);}if (_boolean_result) { 
      out.write('1');
 } else { 
      out.write('0');
 } 
      out.write("</online>\n        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) getObject("catalogcategory:PositionNull")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",42,e);}if (_boolean_result) { 
      out.write("\n            <position>");
      out.print( stringToXml(getObject("catalogcategory:Position").toString()) );
      out.write("</position>\n        ");
 } 
      out.write("\n        ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) getObject("catalogcategory:isRootCategory")).booleanValue() && ((Boolean) (disableErrorMessages().isDefined(getObject("Catalog:ClassificationSystem")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",45,e);}if (_boolean_result) { 
      out.write("\n            <classification-system>");
 {String value = null;try{value=context.getFormattedValue(getObject("Catalog:ClassificationSystem:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {46}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</classification-system>\n        ");
 } 
      out.write("\n\t\t<category-links>\n        ");
 while (loop("catalogcategory:OutgoingCategoryLinks","ccl",null)) { 
      out.write("\n        <category-link name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ccl:TargetCategory:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {50}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
 _boolean_result=false;try {_boolean_result=((Boolean)((((!(context.getFormattedValue(getObject("ccl:TargetCategory:Domain:DomainName"),null).equals(context.getFormattedValue(getObject("catalogcategory:Domain:DomainName"),null)))) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",50,e);}if (_boolean_result) { 
      out.write(" domain=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ccl:TargetCategory:Domain:DomainName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {50}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
 } 
      out.write(">\n        \t<category-link-type name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ccl:TypeCode"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {51}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"></category-link-type>\n\t        ");
 while (loop("ccl:AttributeValues","av",null)) { 
      out.write("\n\t            ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((context.getFormattedValue(getObject("av:Name"),null).equals(context.getFormattedValue("displayName",null)))) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",53,e);}if (_boolean_result) { 
      out.write("\n\t                <display-name ");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("av:isLocalized"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",54,e);}if (_boolean_result) { 
      out.write("xml:lang=\"");
      out.print(context.getFormattedValue(encodeString(context.getFormattedValue(getObject("av:XMLLocaleID"),null)),null));
      out.write('"');
 } 
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("av:StringValue"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {54}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</display-name>\n\t            ");
 } 
      out.write("\n\t            ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((context.getFormattedValue(getObject("av:Name"),null).equals(context.getFormattedValue("description",null)))) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",56,e);}if (_boolean_result) { 
      out.write("\n\t                <description ");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("av:isLocalized"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",57,e);}if (_boolean_result) { 
      out.write("xml:lang=\"");
      out.print(context.getFormattedValue(encodeString(context.getFormattedValue(getObject("av:XMLLocaleID"),null)),null));
      out.write('"');
 } 
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("av:StringValue"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {57}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</description>\n\t            ");
 } 
      out.write("\n\t        ");
 } 
      out.write("\n\t        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) getObject("ccl:PositionNull")).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",60,e);}if (_boolean_result) { 
      out.write("\n\t            <position>");
      out.print( stringToXml(getObject("ccl:Position").toString()) );
      out.write("</position>\n\t        ");
 } 
      out.write("\n\t        ");

	            com.intershop.beehive.xcs.capi.catalog.CatalogCategoryLink categoryLink = (com.intershop.beehive.xcs.capi.catalog.CatalogCategoryLink) getObject("ccl");
	            getPipelineDictionary().put("categoryLinkCustomAttributes", new com.intershop.beehive.core.capi.impex.AttributeValueIterator(categoryLink.createCustomCatalogCategoryLinkAttributesIterator(), categoryLink));
	        
      out.write("\n\t        ");
 processOpenTag(response, pageContext, "customattributes", new TagParameter[] {
new TagParameter("attributes",getObject("categoryLinkCustomAttributes"))}, 67); 
      out.write("\n        </category-link>\n    ");
 } 
      out.write("           \n    </category-links>\n        ");
 while (loop("catalogcategory:AttributeValues","av",null)) { 
      out.write("\n            ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((context.getFormattedValue(getObject("av:Name"),null).equals(context.getFormattedValue("displayName",null)))) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",72,e);}if (_boolean_result) { 
      out.write("\n                <display-name ");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("av:isLocalized"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",73,e);}if (_boolean_result) { 
      out.write("xml:lang=\"");
      out.print(context.getFormattedValue(encodeString(context.getFormattedValue(getObject("av:XMLLocaleID"),null)),null));
      out.write('"');
 } 
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("av:StringValue"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {73}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</display-name>\n            ");
 } 
      out.write("\n            ");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((context.getFormattedValue(getObject("av:Name"),null).equals(context.getFormattedValue("description",null)))) ? Boolean.TRUE : Boolean.FALSE)))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",75,e);}if (_boolean_result) { 
      out.write("\n                <description ");
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("av:isLocalized"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",76,e);}if (_boolean_result) { 
      out.write("xml:lang=\"");
      out.print(context.getFormattedValue(encodeString(context.getFormattedValue(getObject("av:XMLLocaleID"),null)),null));
      out.write('"');
 } 
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("av:StringValue"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {76}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</description>\n            ");
 } 
      out.write("\n        ");
 } 
      out.write("\n        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("catalogcategory:Parent"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",79,e);}if (_boolean_result) { 
      out.write("\n            <parent name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("catalogcategory:Parent:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {80}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" />");
 } 
      out.write('\n');
      out.write('	');
      out.write('	');
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("catalogcategory:ProductBindingAttributeNull"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",81,e);}if (_boolean_result) { 
      out.write("\n\t\t\t<product-binding attribute=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("catalogcategory:ProductBindingAttribute"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {82}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" type=\"");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("catalogcategory:ProductBindingType")).doubleValue() ==((Number)(new Double(1))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",82,e);}if (_boolean_result) { 
      out.write("implicit");
 } else { 
      out.write("explicit");
 } 
      out.write('"');
      out.write('>');
 {String value = null;try{value=context.getFormattedValue(getObject("catalogcategory:ProductBindingValue"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {82}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</product-binding>\n\t\t");
 } 
      out.write("\n        ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("catalogcategory:SearchQueryDefinitionNameNull"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",84,e);}if (_boolean_result) { 
      out.write("\n            <searchquery-definition-name>");
 {String value = null;try{value=context.getFormattedValue(getObject("catalogcategory:SearchQueryDefinitionName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {85}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</searchquery-definition-name>\n        ");
 } 
      out.write("\n        ");

            CatalogCategory categoryToExport = (CatalogCategory)getObject("catalogcategory");
            if(categoryToExport.isRootCategory())
            {
            	Catalog catalogToExport = NamingMgr.getManager(MVCatalogMgr.class).getCatalogByCatalogDomain(categoryToExport.getDomain());
            	
            	String excludedNamesAndPrefixes = CatalogConstants.CATEGORY_DISPLAYNAME + ";" + CatalogConstants.CATEGORY_DESCRIPTION;
            	String delimiter = ";" ;
            	
            	ExtensibleObjectCustomAttributesFilterCondition customAttributesFilterCondition 
            														= new ExtensibleObjectCustomAttributesFilterCondition(excludedNamesAndPrefixes, delimiter);
            	FilterIterator filteredCustomAttributes = new FilterIterator(catalogToExport.createAttributeValuesIterator(), customAttributesFilterCondition); 
            	
            	getPipelineDictionary().put("categoryCustomAttributes", new AttributeValueIterator(filteredCustomAttributes));
            }
            else
            {
            	getPipelineDictionary().put("categoryCustomAttributes", new AttributeValueIterator(categoryToExport.createCustomCategoryAttributesIterator()));
			}
        	CatalogMgr catalogMgr = (CatalogMgr)NamingMgr.getInstance().lookupManager(CatalogMgr.REGISTRY_NAME);
        	Iterator<ImageSetDefinitionCategoryAssignment> isdca = catalogMgr.getImageSetDefinitionCategoryAsgmtsByCategory(categoryToExport);
        	if (isdca.hasNext())
        	{
        		getPipelineDictionary().put("imageSetDefinitionAssignments", isdca); 
        
      out.write("\n\t        <image-set-assignments>\n\t\n\t        ");
 while (loop("imageSetDefinitionAssignments","isda",null)) { 
      out.write("\n\t             <image-set-assignment image-set=\"");
      out.print(context.getFormattedValue(getObject("isda:ImageSetDefinition:ID"),null));
      out.write("\"/>\n\t        ");
 } 
      out.write("\n\t\n\t        </image-set-assignments>\n        ");

	        }
         
      out.write('\n');
      out.write('	');
      out.write('	');

				//
				// Category Images.
				//						
				String primaryImageView = categoryToExport.getPrimaryViewID();
				Iterator<ImageReference> imageReferences = categoryToExport.createImageReferencesIterator();
				if (imageReferences.hasNext() || null != primaryImageView)
				{
	          		out.println("<images>");
						if (null != primaryImageView)
						{
							  out.println("<primary-view image-view=\"" + primaryImageView + "\" />");
						}
						while (imageReferences.hasNext())
						{
							ImageReference imageReference = imageReferences.next();
							out.print("<image-ref image-view=\"" + stringToXml(imageReference.getImageView().getID()) + "\" image-type=\"" + stringToXml(imageReference.getImageType().getID()) + "\"");
							out.print(" image-base-name=\"" + stringToXml(imageReference.getImageBaseName()) + "\"");
							if (imageReference.getImageWidth() != 0)
							{
								  out.print(" image-width=\"" + imageReference.getImageWidth() + "\"");
							}
							if (imageReference.getImageHeight()!= 0)
							{
								  out.print(" image-height=\"" + imageReference.getImageHeight() + "\"");
							}
							if (! imageReference.getDomain().equals(categoryToExport.getDomain()))
							{
								  out.print(" domain=\"" + stringToXml(imageReference.getDomain().getDomainName()) + "\"");
							}
							out.println (" />");
						}
	          		out.println("</images>");
				}
			
      out.write("\t\t\t\t\t\t\t\n        ");
 processOpenTag(response, pageContext, "customattributes", new TagParameter[] {
new TagParameter("attributes",getObject("categoryCustomAttributes"))}, 157); 
      out.write("\n    </category>\n    ");
 } 
      out.write('\n');
 } 
      out.write('\n');
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
