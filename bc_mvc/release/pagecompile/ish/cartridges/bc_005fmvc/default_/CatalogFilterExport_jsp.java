/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.bc_005fmvc.default_;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.core.capi.naming.*;
import com.intershop.beehive.core.capi.domain.*;
import com.intershop.beehive.core.capi.user.*;
import com.intershop.beehive.xcs.capi.product.*;
import com.intershop.beehive.xcs.capi.catalog.*;
import com.intershop.beehive.xcs.common.*;
import com.intershop.component.mvc.capi.filter.*;
import com.intershop.component.organization.capi.*;
import java.util.*;
import java.text.*;

public final class CatalogFilterExport_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

 protected Boolean printTemplateMarker() { return Boolean.FALSE; } 
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 


setEncodingType("text/xml"); 
      out.write("\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n");

	OrganizationRoleMgr roleMgr = (OrganizationRoleMgr)NamingMgr.getInstance().lookupManager(OrganizationRoleMgr.REGISTRY_NAME);

      out.write("\n<enfinity \n\txsi:schemaLocation=\"http://www.intershop.com/xml/ns/enfinity/7.0/bc_mvc/impex bc_mvc.xsd\"\n\txmlns=\"http://www.intershop.com/xml/ns/enfinity/7.0/bc_mvc/impex\" \n\txmlns:xml=\"http://www.w3.org/XML/1998/namespace\" \n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("Objects"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",21,e);}if (_boolean_result) { 
      out.write('\n');

	Iterator filters = (Iterator)getObject("Objects");
	while (filters instanceof com.intershop.beehive.foundation.util.ResettableIterator)
	{
		filters = ((com.intershop.beehive.foundation.util.ResettableIterator)filters).toSequence();
	}
	
	while (filters.hasNext())
	{
		CatalogFilter filter = (CatalogFilter)filters.next();
		getPipelineDictionary().put("filter", filter);
		out.print("<catalog-filter id=\"");
		out.print(stringToXml(filter.getID()));
		out.println("\" state=\"" + filter.getState()+ "\" update-interval=\"" + filter.getUpdateInterval() +"\">");
		out.print("<scope id=\"");
		out.print(stringToXml(filter.getScopeID()));
		out.println("\" type=\"\"/>");
	
		//  Name and description.
	
		Iterator attributes = filter.createAttributeValuesIterator("name");
		while (attributes.hasNext())
		{
			AttributeValue attribute = (AttributeValue) attributes.next();
			String locale = attribute.getXMLLocaleID();
			out.print("<name xml:lang=\"" +locale+ "\">");
			out.print(stringToXml(attribute.getStringValue()));
			out.println("</name>");
		}   // while attributes
		
		attributes = filter.createAttributeValuesIterator("description");
		while (attributes.hasNext())
		{
			AttributeValue attribute = (AttributeValue) attributes.next();
			String locale = attribute.getXMLLocaleID();
			out.print("<description xml:lang=\"" +locale+ "\">");
			out.print(stringToXml(attribute.getStringValue()));
			out.println("</description>");
		}   // while attributes

	
		//add included categories and products
		Iterator inclCategories = filter.createIncludedCategoriesIterator();
		Iterator inclProducts = filter.createIncludedProductsIterator();
	
		if (inclCategories.hasNext() || inclProducts.hasNext())
		{
			out.println("<included-objects>");
			if (inclProducts.hasNext())
			{
				out.println("<products>");
				while (inclProducts.hasNext())
				{
					ProductRef productRef = (ProductRef)inclProducts.next();
					out.print("<product sku=\"");
					out.print(stringToXml(productRef.getProductSKU()));
					out.print("\" domain=\"");
					out.print(stringToXml(productRef.getDomainName()));
					out.println("\"/>");
				}
				out.println("</products>");
			}			
			if (inclCategories.hasNext())
			{
				out.println("<categories>");
				while (inclCategories.hasNext())
				{
					CatalogCategory cat = (CatalogCategory)inclCategories.next();
					out.print("<category name=\"");
					out.print(stringToXml(cat.getName()));
					out.print("\" domain=\"");
					out.print(stringToXml(cat.getDomain().getDomainName()));
					out.println("\"/>");
				}
				out.println("</categories>");
			}
			out.println("</included-objects>");
		}
	
		//add excluded categories and products
		Iterator exclCategories = filter.createExcludedCategoriesIterator();
		Iterator exclProducts = filter.createExcludedProductsIterator();
	
		if (exclCategories.hasNext() || exclProducts.hasNext())
		{
			out.println("<excluded-objects>");
			if (exclProducts.hasNext())
			{
				out.println("<products>");
				while (exclProducts.hasNext())
				{
					ProductRef productRef = (ProductRef)exclProducts.next();
					out.print("<product sku=\"");
					out.print(stringToXml(productRef.getProductSKU()));
					out.print("\" domain=\"");
					out.print(stringToXml(productRef.getDomainName()));
					out.println("\"/>");
				}
				out.println("</products>");
			}
			if (exclCategories.hasNext())
			{
				out.println("<categories>");
				while (exclCategories.hasNext())
				{
					CatalogCategory cat = (CatalogCategory)exclCategories.next();
					out.print("<category name=\"");
					out.print(stringToXml(cat.getName()));
					out.print("\" domain=\"");
					out.print(stringToXml(cat.getDomain().getDomainName()));
					out.println("\"/>");
				}
				out.println("</categories>");
			}
			out.println("</excluded-objects>");
		}
		
		out.println("<filter-targets>");
		
		//add filter targets - department roles and costcenter roles
		Iterator assignedGroups =filter.createAssignedUserGroupsIterator();
			
		//sort user groups into 2 groups
		StringBuffer deptGroups = new StringBuffer();
		StringBuffer ccGroups = new StringBuffer();

		while (assignedGroups.hasNext())
		{
			UserGroup ug = (UserGroup)assignedGroups.next();
			Department dept = roleMgr.getDepartmentByRole(ug);
				
			//ID of user groups may start with "DR", but user group is not attached to a department
			//thats why we check for the department
			if (dept!=null)
			{
				String roleID = ug.getID();
				//is the user group a department master role
				if (roleID.startsWith("DMRI_"))
				{
					String prefix = "DMRI_"+dept.getUUID()+"_";
					roleID = "DMR_" + roleID.substring(prefix.length());
				}
				//or is it an instance of a department  role
				else
				{
					String prefix = "DR_"+dept.getUUID()+"_";
					roleID = roleID.substring(prefix.length());
				}
				deptGroups.append("<department-role role-id=\"" + stringToXml(roleID) + "\" department-id=\"" + stringToXml(dept.getID()) + "\" domain=\"" + stringToXml(ug.getDomain().getDomainName())+ "\"/>\n");
			}
			else
			{
				CostCenter cc = roleMgr.getCostCenterByRole(ug);
				if (cc!=null)
				{
					String roleID = ug.getID();
					//is the user group a costcenter master role
					if (roleID.startsWith("CMRI_"))
					{
						String prefix = "CMRI_"+cc.getUUID()+"_";
						roleID = "CMR_" + roleID.substring(prefix.length());
					}
					//or is it an instance of a costcenter  role
					else
					{
						String prefix = "CR_"+cc.getUUID()+"_";
						roleID = roleID.substring(prefix.length());
					}
					ccGroups.append("<costcenter-role role-id=\"" + stringToXml(roleID) + "\" costcenter-id=\"" + stringToXml(cc.getID()) + "\" domain=\"" + stringToXml(ug.getDomain().getDomainName())+ "\"/>\n");
				}
			}
		}
			
		
      out.write('\n');
      out.write('	');
      out.write('	');
 {out.flush();processExtensionPoint((com.intershop.beehive.core.capi.request.ServletResponse)response,"CatalogFilterTargetsExportXMLExtensions", null, "196");} 
      out.write('\n');
      out.write('	');
      out.write('	');

		if (deptGroups.length()>0)
		{
			out.println("<department-roles>");
			out.print(deptGroups.toString());
			out.println("</department-roles>");
		}
		if (ccGroups.length()>0)
		{
			out.println("<costcenter-roles>");
			out.print(ccGroups.toString());
			out.println("</costcenter-roles>");
		}
		out.println("</filter-targets>");
		
		out.println("</catalog-filter>");
	}

      out.write('\n');
 } 
      out.write("\n</enfinity>\n");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
