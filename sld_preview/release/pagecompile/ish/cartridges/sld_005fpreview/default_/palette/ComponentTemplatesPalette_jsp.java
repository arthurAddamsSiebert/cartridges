/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fpreview.default_.palette;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class ComponentTemplatesPalette_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
      out.write("<div class=\"component-palette-content\" data-role=\"list-search\">\n<div class=\"search-palette\">\n<input type=\"text\" class=\"sfe-input search-palette-input\" placeholder=\"");
 {out.write(localizeISText("ComponentTemplatePalette.Search.placeholder","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\">\n<button class=\"btn-remove-search-palette\" type=\"button\" name=\"removes\" title=\"");
 {out.write(localizeISText("ComponentTemplatePalette.Search.tooltip","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\">\n<span class=\"search-palette-remove\"></span>\n</button>\n</div>");
 while (loop("Palette:KeySet","PageletGroups",null)) { 
      out.write("<div class=\"component-tileset\">\n<div class=\"component-tileset-title table_opened\">");
 {String value = null;try{value=context.getFormattedValue(getObject("PageletGroups"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {13}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</div>\n<div class=\"component-tileset-content\">");
 while (loop("Palette:get(PageletGroups)","PaletteElement",null)) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("PaletteElement:Object:isTemplate"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",17,e);}if (_boolean_result) { 
      out.write("<div class=\"component-tile-container\" draggable=\"true\"\ndata-component-template=\"");
      out.print(context.getFormattedValue(getObject("PaletteElement:Object:UUID"),null));
      out.write("\"\ndata-component-name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PaletteElement:DisplayName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {20}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\n>\n<div class=\"component-tile\">\n<div class=\"component-tile-img\">\n<img src=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPageletImage-Start",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("QualifiedName",null),context.getFormattedValue(getObject("PaletteElement:Object:PageletDefinition:QualifiedName"),null)))),null));
      out.write("\" width=\"120px\" draggable=\"false\">\n</div>\n<div class=\"component-tile-title\" title=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PaletteElement:DisplayName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {26}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" data-role=\"search-field\">");
 {String value = null;try{value=context.getFormattedValue(getObject("PaletteElement:DisplayName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {27}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</div>\n</div>\n<div class=\"component-tile-help\"></div>\n<div class=\"tooltip\">\n<p>\n<h6>");
 {String value = null;try{value=context.getFormattedValue(getObject("PaletteElement:DisplayName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {34}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</h6>");
 {String value = null;try{value=context.getFormattedValue(getObject("PaletteElement:Object:Description"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {35}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</p>\n<a href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPagelet-View",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("PageletUUID",null),context.getFormattedValue(getObject("PaletteElement:Object:UUID"),null))).addURLParameter(context.getFormattedValue("ContentRepositoryUUID",null),context.getFormattedValue(getObject("ContentRepositoryUUID"),null))),null));
      out.write("\" target=\"_blank\">");
 {out.write(localizeISText("ComponentTemplatesPalette.MoreDetails","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a>\n</div>\n</div>");
 } else { 
      out.write("<div class=\"component-tile-container\" draggable=\"true\"\ndata-component-type=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PaletteElement:Object:QualifiedName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {42}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\ndata-component-name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PaletteElement:DisplayName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {43}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\n>\n<div class=\"component-tile\">\n<div class=\"component-tile-img\">\n<img src=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPageletImage-Start",null))),(new URLParameterSet().addURLParameter(context.getFormattedValue("QualifiedName",null),context.getFormattedValue(getObject("PaletteElement:Object:QualifiedName"),null)))),null));
      out.write("\" width=\"120px\" draggable=\"false\">\n</div>\n<div class=\"component-tile-title\" title=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PaletteElement:DisplayName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {49}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" data-role=\"search-field\">");
 {String value = null;try{value=context.getFormattedValue(getObject("PaletteElement:DisplayName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {50}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</div>\n</div>\n<div class=\"component-tile-help\"></div>\n<div class=\"tooltip\">\n<p>\n<h6>");
 {String value = null;try{value=context.getFormattedValue(getObject("PageletModelUtils:DisplayName(PaletteElement:Object,CurrentRequest:Locale)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {57}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</h6>");
 {String value = null;try{value=context.getFormattedValue(getObject("PageletModelUtils:Description(PaletteElement:Object,CurrentRequest:Locale)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {58}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</p>\n<a href=\"");
      out.print(context.getFormattedValue(url(true,(new URLPipelineAction(context.getFormattedValue("ViewPageletOverview-Start",null)))),null));
      out.print(context.getFormattedValue(encodeString(context.getFormattedValue(context.getFormattedValue("#",null) + context.getFormattedValue(getObject("PaletteElement:Object:PageletModel:Name"),null),null)),null));
      out.write("\" target=\"_blank\">");
 {out.write(localizeISText("ComponentTemplatesPalette.MoreDetails","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a>\n</div>\n</div>");
 } 
 } 
      out.write("</div>\n</div>");
 } 
      out.write("</div>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
