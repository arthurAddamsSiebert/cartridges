/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fpreview.default_.preview;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class PreviewCurrency_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((disableErrorMessages().isDefined(getObject("formParameter"))))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("formParameter:ID"),null).equals(context.getFormattedValue("PreviewCurrency",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",3,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("formParameter:Field(\"Currency\")")); getPipelineDictionary().put("CurrencyField", temp_obj);} 
 {Object temp_obj = (getObject("formParameter:Field(\"CurrencyFilter\")")); getPipelineDictionary().put("CurrencyFilterField", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)(((!(context.getFormattedValue(getObject("CurrencyFilterField:Value"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",6,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("CurrencyFilterField:Value")); getPipelineDictionary().put("CurrencyFilterFieldValue", temp_obj);} 
 } else { 
 {Object temp_obj = (getObject("formParameter:Value:SelectedValue:Enabled")); getPipelineDictionary().put("CurrencyFilterFieldValue", temp_obj);} 
 } 
 {Object temp_obj = (getObject("formParameter:Value")); getPipelineDictionary().put("PreviewCurrencyAttribute", temp_obj);} 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("PreviewCurrencyAttribute")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("PreviewCurrencyAttribute:Visible"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",12,e);}if (_boolean_result) { 
      out.write("<div class=\"sfe-fields\" data-set-system-default-function=\"setSelectSystemDefault\" data-is-system-default-function=\"isSelectSystemDefault\" data-set-form-default-function=\"setSelectFormDefault\" data-is-form-default-function=\"isSelectFormDefault\">\n<label class=\"fielditem2\">");
 {out.write(localizeISText("PreviewCurrency.Currency.label","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write(':');
 _boolean_result=false;try {_boolean_result=((Boolean)((((Boolean) (getObject("CurrencyField:Optional"))).booleanValue() ? Boolean.FALSE : Boolean.TRUE) )).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",14,e);}if (_boolean_result) { 
      out.write("<span class=\"star\">*</span>");
 } 
      out.write("</label>");
 processOpenTag(response, pageContext, "createmap", new TagParameter[] {
new TagParameter("key1","PreviewCurrencyAttribute"),
new TagParameter("key2","previewContext"),
new TagParameter("key0","CurrencyField"),
new TagParameter("value2",getObject("previewContext")),
new TagParameter("value1",getObject("PreviewCurrencyAttribute")),
new TagParameter("key3","CurrentRequest"),
new TagParameter("value3",getObject("CurrentRequest")),
new TagParameter("value0",getObject("CurrencyField")),
new TagParameter("mapname","params")}, 16); 
 processOpenTag(response, pageContext, "dropdown", new TagParameter[] {
new TagParameter("filter","search"),
new TagParameter("uitemplate","preview/PreviewCurrencyDropdown.isml"),
new TagParameter("noneselectedtext",localizeText(context.getFormattedValue("PreviewCurrency.Currency.filter.text",null))),
new TagParameter("id",getObject("CurrencyField:QualifiedName")),
new TagParameter("params",getObject("params")),
new TagParameter("selectedlist","1"),
new TagParameter("filterlabel",localizeText(context.getFormattedValue("PreviewCurrency.Currency.placeholder",null)))}, 17); 
      out.write("</div>");
 } else { 
      out.write("<!-- visible flag not true for PreviewCurrency -->\n<input type=\"hidden\"\nname=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("CurrencyField:QualifiedName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {22}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nid=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("CurrencyField:QualifiedName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {23}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\nvalue=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("PreviewCurrencyAttribute:SelectedValue:ID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {24}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\n/>");
 } 
 } else { 
      out.write("<!-- no 'formParameter' found for PreviewCurrency -->");
 } 
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
