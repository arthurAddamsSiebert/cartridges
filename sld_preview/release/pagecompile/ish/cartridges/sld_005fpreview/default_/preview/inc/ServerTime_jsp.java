/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fpreview.default_.preview.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.core.capi.localization.LocaleConstants;
import com.intershop.beehive.core.capi.localization.LocaleInformation;
import com.intershop.beehive.core.internal.localization.RegionalSettingsPO;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Calendar;

public final class ServerTime_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write("\n\n\n\n\n\n\n");
 
setEncodingType("text/html"); 
      out.write(' ');
      out.write('\n');
	
	Calendar calendar = new GregorianCalendar();
	int serverTimezoneOffset = (calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET)) / (60*1000);
	getPipelineDictionary().put("ServerTimezoneOffset", serverTimezoneOffset);

	LocaleInformation locale = getPipelineDictionary().getOptional("locale");
	
	if (locale != null)
	{
		locale.getRegionalAttribute(LocaleConstants.LONGDATE_PATTERN);
		String longDatePattern = locale.getRegionalAttribute(LocaleConstants.SHORTDATE_PATTERN);
		
		if ((longDatePattern != null) && !longDatePattern.isEmpty())
		{
			getPipelineDictionary().put("DatePattern", longDatePattern.replace('M', 'm'));
		}
		
		String timePattern = locale.getRegionalAttribute(LocaleConstants.TIME_PATTERN);
		
		if ((timePattern != null) && !timePattern.isEmpty())
		{
			getPipelineDictionary().put("TimePattern", timePattern.replace('m', 'M'));
		}
	}
 
      out.write("<span class=\"running-time\"></span>\n<script language=\"JavaScript\">\nvar pattern = 'mm/dd/yy hh:MM:ss a';\n</script>");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("DatePattern")))).booleanValue() && ((Boolean) (disableErrorMessages().isDefined(getObject("TimePattern")))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",41,e);}if (_boolean_result) { 
      out.write("<script language=\"JavaScript\">\npattern = '");
 {String value = null;try{value=context.getFormattedValue(getObject("DatePattern"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {43}",e);}if (value==null) value="";value = encodeString(value,"javascript");out.write(value);} 
      out.write(' ');
 {String value = null;try{value=context.getFormattedValue(getObject("TimePattern"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {43}",e);}if (value==null) value="";value = encodeString(value,"javascript");out.write(value);} 
      out.write("';\n</script>");
 } 
      out.write("<script src=\"");
      out.print(context.getFormattedValue(context.webRoot(),null));
      out.write("/js/date.format/date.format.js\"></script>\n<script language=\"JavaScript\">\nvar serverTimezoneOffset = parseInt(");
 {String value = null;try{value=context.getFormattedValue(getObject("ServerTimezoneOffset"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {50}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write(");\nvar clientTimezoneOffset = (new Date()).getTimezoneOffset();\nvar timeDiff = serverTimezoneOffset + clientTimezoneOffset;\n$(function() {\nvar el = $('.running-time');\nvar updateClock = function() {\nvar currentTime = new Date(new Date().getTime() + timeDiff*60*1000);\nel.html(currentTime.format(pattern));\nwindow.setTimeout(updateClock, 1000);\n};\nupdateClock();\n");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((disableErrorMessages().isDefined(getObject("EnablePastDateCheck"))))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("EnablePastDateCheck"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",64,e);}if (_boolean_result) { 
      out.write("\n// fixed time isn't set\nif (typeof fixedTimeValue === 'undefined') {\nreturn;\n}\nvar isFullsitePreview = $('");
      out.print(context.getFormattedValue("#",null));
      out.write("sfe-fullsite-preview-bar').length === 1;\n// preview and current date time is checked\nif (!isFullsitePreview && $('");
      out.print(context.getFormattedValue("#",null));
      out.write("current_date_time_radio').is(':checked') === true) {\nreturn;\n}\nvar $body = $('body');\nvar checkFixedTime = function() {\n// get current time\nvar currentTime = new Date(new Date().getTime() + timeDiff*60*1000);\n// is fixed time in the past?\nif (currentTime > fixedTimeValue) {\n// normal preview\nif (!isFullsitePreview) {\n$('");
      out.print(context.getFormattedValue("#",null));
      out.write("current_date_time_radio').click();\ndelete window.fixedTimeValue;\nvar callback = function(html){\n$('");
      out.print(context.getFormattedValue("#",null));
      out.write("design-preview').removeClass('active');\n};\n$body.trigger('submitPreviewForm', [ callback ]);\n} else {\nvar url = document.getElementById('siteContent').contentWindow.location.href;\nif (typeof url !== 'undefined') {\nvar href = window.location.href.replace(/([&\\?]PreviewTargetUrl=)[^$&]*/i, '$1' + escape(url));\nwindow.location.href = href;\n}\n}\n} else {\n// check again\nwindow.setTimeout(checkFixedTime, 1000);\n}\n};\nwindow.setTimeout(checkFixedTime, 2000);\n");
 } 
      out.write("\n});\n</script> \n");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
