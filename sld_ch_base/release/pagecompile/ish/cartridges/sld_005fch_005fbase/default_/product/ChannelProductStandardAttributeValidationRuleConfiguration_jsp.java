/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fch_005fbase.default_.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import java.util.Arrays;
import com.intershop.beehive.core.capi.request.Request;
import com.intershop.beehive.core.capi.localization.LocaleInformation;
import com.intershop.component.product.validation.capi.config.ValidationRuleConfigurationBO;
import com.intershop.beehive.core.capi.request.Session;
import java.util.ArrayList;
import java.util.Collection;
import com.intershop.beehive.core.capi.localization.LocaleMgr;

public final class ChannelProductStandardAttributeValidationRuleConfiguration_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

 protected Boolean printTemplateMarker() { return Boolean.FALSE; } 
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("application/json;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write("\n\n\n\n\n\n\n\n");
 

response.setHeader(TemplateConstants.PERSONALIZED_HEADER, "1");setEncodingType("application/json"); 

	LocaleMgr localeMgr;

	Collection<String> localesCfg = new ArrayList<String>();
	Session currentSession = (Session) getPipelineDictionary().get("CurrentSession");
	ValidationRuleConfigurationBO validationRuleConfigurationBO = (ValidationRuleConfigurationBO) getPipelineDictionary().get("ValidationRuleConfigurationBO");
	String localesAttr = validationRuleConfigurationBO.getConfiguration().getString("Locales");
	if (localesAttr != null && !localesAttr.isEmpty())
	{
	    String[] localeIDs = localesAttr.split(",");
		if (localeIDs.length > 0)
		{
		    localeMgr = NamingMgr.getManager(LocaleMgr.class);
		    for (int i = 0; i < localeIDs.length; i++)
			{
				String localeID = localeIDs[i];
				LocaleInformation locale = localeMgr.getLocaleBy(localeID);
				if (locale != null) 
				{
					String localeDisplayName = locale.getDisplayName(currentSession.getLocale());
					localesCfg.add(localeID + ':' + localeDisplayName);
				}
			}
		}
	}
	getPipelineDictionary().put("LocalesInformation", localesCfg);

      out.write("\n{\n\"Attributes\" : [\n\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ValidationRuleConfigurationBO:Configuration:String(\"Attributes\")"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {39}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\"\n],\n\"Locales\" : [\n");
 while (loop("LocalesInformation","LocaleInformation",null)) { 
      out.write('"');
 {String value = null;try{value=context.getFormattedValue(getObject("LocaleInformation"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {42}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
 _boolean_result=false;try {_boolean_result=((Boolean)((hasNext("LocaleInformation") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",42,e);}if (_boolean_result) { 
      out.write(',');
 } 
 } 
      out.write(" \n]\n}");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
