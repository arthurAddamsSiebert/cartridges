/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fch_005fbase.default_.searchindex.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.component.search.capi.dataprovider.JavaBeanExtractorUtil;

public final class ContentIndexedParametersList_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
      out.write("<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tr>\n<td class=\"table_header n e s w\" nowrap=\"nowrap\" >");
 {out.write(localizeISText("ContentIndexedParametersList.ParameterName.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header n e s\" nowrap=\"nowrap\" >");
 {out.write(localizeISText("ContentIndexedParametersList.ID.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header n e s\" nowrap=\"nowrap\" >");
 {out.write(localizeISText("ContentIndexedParametersList.Description.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header n e s\" nowrap=\"nowrap\" >");
 {out.write(localizeISText("ContentIndexedParametersList.ParameterType.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header n e s\" nowrap=\"nowrap\" >");
 {out.write(localizeISText("ContentIndexedParametersList.Indexing.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n</tr>");
 while (loop("PageletDefinition:ConfigurationParameterDefinitions","cpd",null)) { 
 {Object temp_obj = (getObject("PageletModelUtils:ConfigurationParameterType(cpd:TypeReference,ApplicationBO:Extension(\"PageletModelRepository\")):ParameterValueHandler:ConfigurationParameterValueType")); getPipelineDictionary().put("ConfigurationParameterType", temp_obj);} 

								Class typeClass = (Class) getPipelineDictionary().get("ConfigurationParameterType"); 
							
								java.util.ArrayList<String> propertyNames = new java.util.ArrayList(); 
							    getPipelineDictionary().put("NameDelimiter", "");
								if(typeClass != null)
								{
								    Collection<String> props = JavaBeanExtractorUtil.INSTANCE.getPropertyNames(typeClass); 
								    propertyNames.addAll(props); 
								    if(propertyNames.isEmpty())
								    {
									    //use an empty property for looping below once
									    propertyNames.add(""); 
								    }
								    else
								    {
								        getPipelineDictionary().put("NameDelimiter", JavaBeanExtractorUtil.EXTENSION_QNAME_DELIMITER);
								    }
								}
								else
								{
									propertyNames.add("");
								}
								getPipelineDictionary().put("ConfigurationParameterTypePropertyNames", propertyNames); 
								
							
 while (loop("ConfigurationParameterTypePropertyNames","property",null)) { 
 {Object temp_obj = (context.getFormattedValue(getObject("cpd:QualifiedName"),null) + context.getFormattedValue(getObject("NameDelimiter"),null) + context.getFormattedValue(getObject("property"),null)); getPipelineDictionary().put("ExtendedQualifiedName", temp_obj);} 
      out.write("<tr>\n<td class=\"table_detail bold w e s\">");
 {String value = null;try{value=context.getFormattedValue(context.getFormattedValue(getObject("PageletModelUtils:DisplayName(cpd,CurrentSession:Locale)"),null) + context.getFormattedValue(getObject("NameDelimiter"),null) + context.getFormattedValue(getObject("property"),null),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {46}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;\n</td>\n<td class=\"table_detail e s\">");
 {String value = null;try{value=context.getFormattedValue(context.getFormattedValue(getObject("cpd:Name"),null) + context.getFormattedValue(getObject("NameDelimiter"),null) + context.getFormattedValue(getObject("property"),null),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {49}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;\n</td>\n<td class=\"table_detail e s\">");
 {String value = null;try{value=context.getFormattedValue(getObject("PageletModelUtils:Description(cpd,CurrentSession:Locale)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {51}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n<td class=\"table_detail e s\">");
 {String value = null;try{value=context.getFormattedValue(getObject("PageletModelUtils:DisplayName(PageletModelUtils:ConfigurationParameterType(cpd:TypeReference,ApplicationBO:Extension(\"PageletModelRepository\")),CurrentSession:Locale)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {52}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;\n</td>\n<td class=\"table_detail e s left\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("SearchIndex:Configuration:AttributeByName(ExtendedQualifiedName):IndexedQNames"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",55,e);}if (_boolean_result) { 
 while (loop("SearchIndex:Configuration:AttributeByName(ExtendedQualifiedName):IndexedQNames","iqname",null)) { 
 {Object temp_obj = (getObject("SearchIndex:Configuration:AttributeByName(ExtendedQualifiedName):DataProviderName")); getPipelineDictionary().put("SelectedOption", temp_obj);} 
      out.write(' ');
      out.write('\n');
 } 
 } else { 
 {Object temp_obj = ("no"); getPipelineDictionary().put("SelectedOption", temp_obj);} 
 } 
      out.write("<table>");
 while (loop("SearchIndex:Configuration:Attributes","ba",null)) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("ba:DataProviderName"),null).equals(context.getFormattedValue("MappedParameter",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",64,e);}if (_boolean_result) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("ba:IndexedQNames") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",65,e);}if (_boolean_result) { 
 while (loop("ba:IndexedQNames","iqname",null)) { 
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("iqname"),null).equals(context.getFormattedValue(getObject("ExtendedQualifiedName"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",67,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("ba:Name")); getPipelineDictionary().put("SelectedOption", temp_obj);} 
 } 
 } 
 } else { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("ba:IndexedQNames")))).booleanValue() && ((Boolean) ((((context.getFormattedValue(getObject("ba:IndexedQNames"),null).equals(context.getFormattedValue(getObject("ExtendedQualifiedName"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",72,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("ba:Name")); getPipelineDictionary().put("SelectedOption", temp_obj);} 
 } 
 } 
      out.write("<tr>\n<td class=\"left\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("CurrentChannelPermissionMap:SLD_MANAGE_SEARCH_INDEXES"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",78,e);}if (_boolean_result) { 
      out.write("<input type=\"checkbox\" name=\"CIA_");
 {String value = null;try{value=context.getFormattedValue(getObject("ExtendedQualifiedName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {79}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write(' ');
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("SelectedOption"),null).equals(context.getFormattedValue(getObject("ba:Name"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",79,e);}if (_boolean_result) { 
      out.write("checked=\"checked\"");
 } 
      out.write(" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ba:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {79}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('/');
      out.write('>');
 } else { 
      out.write("<input type=\"checkbox\" name=\"CIA_");
 {String value = null;try{value=context.getFormattedValue(getObject("ExtendedQualifiedName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {81}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" disabled=\"disabled\" ");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("SelectedOption"),null).equals(context.getFormattedValue(getObject("ba:Name"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",81,e);}if (_boolean_result) { 
      out.write("checked=\"checked\"");
 } 
      out.write(" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ba:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {81}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('/');
      out.write('>');
 } 
      out.write("</td>\n<td class=\"table_detail left\">");
 {String value = null;try{value=context.getFormattedValue(getObject("ba:DisplayName(CurrentSession:Locale)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {84}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n</tr>");
 } 
 } 
      out.write("</table>\n</td>\n</tr>");
 } 
 } 
      out.write("</table>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
