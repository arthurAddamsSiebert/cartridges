/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fch_005fbase.default_.app;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;
import com.intershop.beehive.core.capi.localization.LocaleMgr;

public final class ApplicationLocales_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
      out.write('\n');
      out.write('\n');
 
setEncodingType("text/html"); 
      out.write("<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n<tr>\n<td class=\"table_title2 s\">");
 {out.write(localizeISText("ApplicationLocales.Languages.table_title2",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n</tr>\n<tr>\n<td class=\"table_title_description s\">");
 {out.write(localizeISText("ApplicationLocales.UseTheFollowingPreferencesToDefineRegionalSettingsBehavior.table_title_description",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n</tr>\n<tr>\n<td>");
 processOpenTag(response, pageContext, "createmap", new TagParameter[] {
new TagParameter("key1","SystemLocales"),
new TagParameter("key2","ApplicationLocales"),
new TagParameter("key0","ApplicationForm"),
new TagParameter("value2",getObject("ApplicationLocales")),
new TagParameter("value1",getObject("SystemLocales")),
new TagParameter("key3","CurrentSession"),
new TagParameter("value4",getObject("ApplicationDefaultLocale")),
new TagParameter("value3",getObject("CurrentSession")),
new TagParameter("key4","ApplicationDefaultLocale"),
new TagParameter("value0",getObject("ApplicationForm")),
new TagParameter("mapname","ApplicationLocalesParams")}, 15); 
      out.write("<div id=\"LocalesMgmtDialog\" class=\"js-dialog\" data-title=\"");
 {out.write(localizeISText("app.Dialog.Locales.title","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\" width=\"654\" height=\"415\">\n<div class=\"dialog-content\">");
 processOpenTag(response, pageContext, "assignmentlist", new TagParameter[] {
new TagParameter("scripttemplate","app/ApplicationLocalesAssignmentScript.isml"),
new TagParameter("uitemplate","app/ApplicationLocalesAssignment.isml"),
new TagParameter("selectedlabel",localizeText(context.getFormattedValue("app.Dialog.Locales.selected",null))),
new TagParameter("availablelabel",localizeText(context.getFormattedValue("app.Dialog.Locales.available",null))),
new TagParameter("id","LocalesMgmtAssignment"),
new TagParameter("defaultname",getObject("ApplicationForm:DefaultLocale:QualifiedName")),
new TagParameter("params",getObject("ApplicationLocalesParams")),
new TagParameter("itemlabel","language")}, 25); 
      out.write("</div>\n<div class=\"dialog-buttons\">\n<input type=\"button\" class=\"button\" id=\"LocalesMgmtDialog-ok\" value=\"");
 {out.write(localizeISText("app.Dialog.Locales.button.ok","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\">\n<input type=\"button\" class=\"button\" id=\"LocalesMgmtDialog-cancel\" value=\"");
 {out.write(localizeISText("app.Dialog.Locales.button.cancel","",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("\" data-focus data-action=\"dialog-close\">\n</div>");
 out.print(context.prepareWAPlacement("JSWebLibraries")); 
      out.write("application-locales.js");
 out.print("</waplacement>"); 
      out.write("<script type=\"text/javascript\">\ninitLocalesDialog('");
 {out.write(localizeISText("app.Dialog.Locales.name","javascript",null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("', '");
 {String value = null;try{value=context.getFormattedValue(getObject("ApplicationForm:DefaultLocale:QualifiedName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {41}",e);}if (value==null) value="";value = encodeString(value,"javascript");out.write(value);} 
      out.write("');\n</script>\n</div>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" id=\"localeslist\">\n<tr>\n<td width=\"80\" class=\"table_header e s\"><div class=\"center\">");
 {out.write(localizeISText("ApplicationLocales.Default.center",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</div></td>\n<td class=\"table_header s\">");
 {out.write(localizeISText("ApplicationLocales.Languages.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n</tr>");
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) (disableErrorMessages().isDefined(getObject("ApplicationLocales")))).booleanValue() && !((Boolean) (getObject("ApplicationLocales:Empty"))).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",51,e);}if (_boolean_result) { 
 while (loop("ApplicationLocales","locale",null)) { 
      out.write("<tr>\n<td class=\"e s center\">\n<div class=\"");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("locale"),null).equals(context.getFormattedValue(getObject("ApplicationDefaultLocale"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",56,e);}if (_boolean_result) { 
      out.write("active");
 } else { 
      out.write("inactive");
 } 
      out.write("\"></div>");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("locale"),null).equals(context.getFormattedValue(getObject("ApplicationDefaultLocale"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",57,e);}if (_boolean_result) { 
      out.write("<input type=\"hidden\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("locale:LocaleID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {58}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ApplicationForm:DefaultLocale:QualifiedName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {58}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 } 
      out.write("<input type=\"hidden\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("locale:LocaleID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {60}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ApplicationForm:Locales:Locale:QualifiedName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {60}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n</td>\n<td class=\"table_detail top s\">");
 {String value = null;try{value=context.getFormattedValue(getObject("locale:DisplayName(CurrentSession:Locale)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {62}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>");
 } 
 } else { 
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("ApplicationForm:DefaultLocale:Value"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",66,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("ApplicationForm:DefaultLocale:Value")); getPipelineDictionary().put("LeadLocaleID", temp_obj);} 
 while (loop("SystemLocales","locale",null)) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(getObject("ApplicationForm:Locales:Locale:Values:Contains(locale:LocaleID)"))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",70,e);}if (_boolean_result) { 
      out.write("<tr>\n<td class=\"e s center\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("locale:LocaleID"),null).equals(context.getFormattedValue(getObject("LeadLocaleID"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",73,e);}if (_boolean_result) { 
      out.write("<div class=\"active\"></div>\n<input type=\"hidden\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("locale:LocaleID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {75}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ApplicationForm:DefaultLocale:QualifiedName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {75}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 } else { 
      out.write("<div class=\"inactive\"></div>");
 } 
      out.write("<input type=\"hidden\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("locale:LocaleID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {79}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ApplicationForm:Locales:Locale:QualifiedName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {79}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n</td>\n<td class=\"table_detail top s\">");
 {String value = null;try{value=context.getFormattedValue(getObject("locale:DisplayName(CurrentSession:Locale)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {82}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>");
 } 
 } 
 } else { 

						LocaleMgr mgr = (LocaleMgr)NamingMgr.getManager(LocaleMgr.class);
						getPipelineDictionary().put("LeadLocale", mgr.getLeadLocale());
						
 while (loop("SystemLocales","locale",null)) { 
      out.write("<tr>\n<td class=\"e s center\">");
 _boolean_result=false;try {_boolean_result=((Boolean)((((context.getFormattedValue(getObject("locale"),null).equals(context.getFormattedValue(getObject("LeadLocale"),null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",95,e);}if (_boolean_result) { 
      out.write("<div class=\"active\"></div>\n<input type=\"hidden\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("locale:LocaleID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {97}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ApplicationForm:DefaultLocale:QualifiedName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {97}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write('"');
      out.write('>');
 } else { 
      out.write("<div class=\"inactive\"></div>");
 } 
      out.write("<input type=\"hidden\" value=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("locale:LocaleID"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {101}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" name=\"");
 {String value = null;try{value=context.getFormattedValue(getObject("ApplicationForm:Locales:Locale:QualifiedName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {101}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\">\n</td>\n<td class=\"table_detail top s\">");
 {String value = null;try{value=context.getFormattedValue(getObject("locale:DisplayName(CurrentSession:Locale)"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {104}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</td>\n</tr>");
 } 
 } 
 } 
      out.write("</table>\n</td>\n</tr>");
 _boolean_result=false;try {_boolean_result=((Boolean)((disableErrorMessages().isDefined(getObject("CurrentChannelPermissionMap:SLD_MANAGE_APPS"))))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",112,e);}if (_boolean_result) { 
      out.write("<tr>\n<td align=\"right\" class=\"s\">\n<table border=\"0\" cellspacing=\"4\" cellpadding=\"0\">\n<tr>\n<td class=\"button\"><input type=\"button\" onclick=\"javascript: $('");
      out.print(context.getFormattedValue("#",null));
      out.write("LocalesMgmtDialog').dialog('open');\" class=\"button\" name=\"ManageLocales\" value=\"");
      out.print(context.getFormattedValue(localizeText(context.getFormattedValue("ApplicationLocales.Manage.button",null)),null));
      out.write("\" /></td> \n</tr>\n</table>\n</td>\n</tr>");
 } 
      out.write("</table>");
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
