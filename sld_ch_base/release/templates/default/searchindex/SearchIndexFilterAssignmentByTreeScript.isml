<!---isnoloc--->
<iscontent type="text/javascript" charset="UTF-8" compact="true" templatemarker="false" >
<!--- remove initialy selected categories (as hidden fields) after unchecking the node --->
var form = $('form[name="CatalogSelectionForm"]'),
	el = $('#'#'.params:TreeId#'),
	addState = function addState(node, type) {
		var value = node.data('checkbox').value;
		if (!form.find('input[type="hidden"][name="tree_' + type + '"][value="' + value + '"]').length) {
			form.prepend('<input type="hidden" name="tree_' + type + '" value="' + value + '">');
		}
    },
    removeState = function removeState(node, type) {
		var value = node.data('checkbox').value;
		form.find('input[type="hidden"][name="tree_' + type + '"][value="' + value + '"]').remove();
	};

<!--- write hidden input fields to store changed values --->
el.on('afterToggleCheck.tree', function onNodeChange(ev, data) {
	var tree = data.instance,
		nodes = data.result.obj,
		changeState = function changeState(node) {
			var parent = tree.getParent(node),
				checked = tree.isChecked(node),
				typeAdd = checked ? 'checked' : 'unchecked',
				typeRemove = checked ? 'unchecked' : 'checked',
				children;
			
			removeState(node, typeRemove + '_recursive');
			removeState(node, typeRemove);

			if (!tree.isLeaf(node)) {
				if (!tree.isLoaded(node)) {
					addState(node, typeAdd + '_recursive');
				} else {
					addState(node, typeAdd);
					children = tree.getChildren(node);
					children.each(function eachChild() {
						changeState($(this));
					});
				}
			} else {
				addState(node, typeAdd);
			}
		};

	nodes.each(function eachNode() {
		changeState($(this));
	});	
});
<!---/isnoloc--->
