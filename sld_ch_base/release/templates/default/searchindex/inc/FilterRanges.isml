<!--- TEMPLATENAME: FilterRanges.isml --->
<iscontent type="text/html" charset="UTF-8" compact="true">

<%@page import="java.util.List"%>
<%@page import="com.intershop.component.search.capi.FilterRange"%>
<%@page import="com.intershop.component.search.capi.FilterOptions"%>
<%@page import="com.intershop.beehive.core.capi.webform.Form"%>

<isset name="SearchIndexEditable" scope="request" value="#isDefined(CurrentChannelPermissionMap:SLD_MANAGE_SEARCH_INDEXES) AND NOT(SearchIndex:Shared)#">

<isform action="#URL(Action('ViewSearchIndexFilters-Dispatch'))#" method="post" name="FilterRanges">


	<table width="100%" border="0" cellspacing="0" cellpadding="0">
		<tr>
			<td class="table_title2 w e s"><istext key="FilterRanges.FilterRanges.table_title2" encoding="off"/></td>
		</tr>
		
		<!--- error handling --->
		<isloop iterator="FilterRangesForm:Instances" alias="RangeFormInstance">
			<isif condition="#RangeFormInstance:LowerBound:isError("error.double") or RangeFormInstance:UpperBound:isError("error.double")#">
				<isset name="ERROR_DOUBLE" value="true" scope="request">
			</isif>
			<isif condition="#RangeFormInstance:LowerBound:isError("error.integer") or RangeFormInstance:UpperBound:isError("error.integer")#">
				<isset name="ERROR_INTEGER" value="true" scope="request">
			</isif>
			<isif condition="#RangeFormInstance:LowerBound:isError("error.long") or RangeFormInstance:UpperBound:isError("error.long")#">
				<isset name="ERROR_LONG" value="true" scope="request">
			</isif>
			<isif condition="#RangeFormInstance:LowerBound:isError("error.regexp") or RangeFormInstance:UpperBound:isError("error.regexp")#">
				<isset name="ERROR_REGEXP" value="true" scope="request">
			</isif>
			<isif condition="#RangeFormInstance:FormatString:isError("error.maxlength")#">
				<isset name="ERROR_FORMAT_STRING_TOO_LONG" value="true" scope="request">
			</isif>
		</isloop>  

		<isif condition="#isDefined(ERROR_DOUBLE) or isDefined(ERROR_INTEGER) or isDefined(ERROR_FILTER_RANGE) or isDefined(ERROR_INVALID_RANGE)
						or isDefined(ERROR_FORMAT_STRING_TOO_LONG) or isDefined(ERROR_REGEXP)  or isDefined(ERROR_LONG)#">
			<tr>
				<td>
					<table border="0" cellspacing="0" cellpadding="4" width="100%" class="error_box">
						<isif condition="#isDefined(ERROR_DOUBLE)#">
							<tr>
								<td class="error w e s" width="100%">
									<istext key="FilterRanges.FilterRangesCouldNotBeUpdatedErrorDouble.error" encoding="off"/>
								</td>
							</tr>
						</isif>
						<isif condition="#isDefined(ERROR_INTEGER)#">
							<tr>
								<td class="error w e s" width="100%">
									<istext key="FilterRanges.FilterRangesCouldNotBeUpdatedErrorInteger.error" encoding="off"/>
								</td>
							</tr>
						</isif>
						<isif condition="#isDefined(ERROR_REGEXP)#">
							<isif condition="#(FilterAttribute:DataType == 10) or (FilterAttribute:DataType == 18)#">
							<tr>
								<td class="error w e s" width="100%">
									<istext key="FilterRanges.FilterRangesCouldNotBeUpdatedErrorRegExp.error" encoding="off"/> 
								</td>
							</tr>
							<iselse>
							<tr>
								<td class="error w e s" width="100%">
									<istext key="FilterRanges.FilterRangesCouldNotBeUpdatedErrorInvalidValues.error" encoding="off"/>
								</td>
							</tr>
							</isif>
						</isif>
						<isif condition="#isDefined(ERROR_LONG)#">
							<tr>
								<td class="error w e s" width="100%">
									<istext key="FilterRanges.FilterRangesCouldNotBeUpdatedErrorLong.error" encoding="off"/>
								</td>
							</tr>
						</isif>
						<isif condition="#isDefined(ERROR_FORMAT_STRING_TOO_LONG)#">
							<tr>
								<td class="error w e s" width="100%">
									<istext key="FilterRanges.FilterRangesCouldNotBeUpdatedErrorFormatString.error" encoding="off"/>
								</td>
							</tr>
						</isif>
						<isif condition="#isDefined(ERROR_INVALID_RANGE)#">
							<tr>
								<td class="error w e s" width="100%">
									<istext key="FilterRanges.FilterRangesCouldNotBeUpdatedErrorInvalidRange.error" parameter0="#getValue(ERROR_FILTER_RANGE + 1, INTEGER)#" encoding="off"/>
								</td>
							</tr>
						<iselseif condition="#isDefined(ERROR_DUPLICATE_RANGE)#">
							<tr>
								<td class="error w e s" width="100%">
									<istext key="FilterRanges.FilterRangesCouldNotBeUpdatedErrorDuplicateRange.error" parameter0="#getValue(ERROR_FILTER_RANGE + 1, INTEGER)#" encoding="off"/>							
								</td>
							</tr>
						<iselseif condition="#isDefined(ERROR_DUPLICATE_FORMAT_STRING)#">
							<tr>
								<td class="error w e s" width="100%">
									<istext key="FilterRanges.FilterRangesCouldNotBeUpdatedErrorDuplicateFormatString.error" parameter0="#getValue(ERROR_FILTER_RANGE + 1, INTEGER)#" encoding="off"/>
								</td>
							</tr>
						<iselseif condition="#isDefined(ERROR_FILTER_RANGE)#">
							<tr>
								<td class="error w e s" width="100%">
									<istext key="FilterRanges.FilterRangesCouldNotBeUpdatedErrorFilterRange.error" parameter0="#getValue(ERROR_FILTER_RANGE + 1, INTEGER)#" encoding="off"/>  							
								</td>
							</tr>
						</isif>
					</table>
				</td>
			</tr>
		</isif>	
		<!--- eof errors --->
		
		<tr>
			<td class="table_title_description w e s">
				<istext key="FilterRanges.HereYouCanDefineFilterRangesForTheFilterAttribute.table_title_description" encoding="off"/>
			</td>
		</tr>
		<tr>
			<td class="w e"><img src="#Webroot()#/images/space.gif" width="1" height="6" alt="" border="0"/></td>
		</tr>

		<tr><td class="w e"><table width="100%" border="0" cellspacing="0" cellpadding="0" class="searchbox">
		
			<input type="hidden" name="SearchIndexID" value="<isprint value="#SearchIndex:IndexID#">"/>
			<input type="hidden" name="AttributeName" value="<isprint value="#FilterAttribute:Name#">"/>
											
			<isset name="FirstRangeRow" value="true" scope="request"/>
			
			<%!
				/**
			     * Put the given value in the pipeline dictionary with the given value type
			     * as key. The value is casted or converted to the given data type
			     * 
			     * @param dataType
			     *            the data type, Integer, Long and Double is casted or converted
			     * @param valueType
			     *            the dictionary key for the value to put
			     * @param value
			     *            the value
			     * @param cast
			     *            true if object is casted for data type Integer, Long and
			     *            Double, false if object is converted
			     */
			    public void putFormattedBoundValue(Integer dataType, String valueType, Object value, boolean cast)
			    {
			        if (value == null || (!cast && ((String)value).isEmpty()))
			        {
			            getPipelineDictionary().put(valueType, "");
			        }
			        else
			        {
			            if (1 == dataType || 4 == dataType)
			            {
			                if (cast)
			                {
			                    getPipelineDictionary().put(valueType, getFormattedValue((Integer)value, null));
			                }
			                else 
			                {
			                    getPipelineDictionary().put(valueType, getFormattedValue(Integer.valueOf((String)value), null));
			                }
			            }
			            else if (8 == dataType || 15 == dataType)
			            {
			                if (cast)
			                {
			                    getPipelineDictionary().put(valueType, getFormattedValue((Long)value, null));
			                }
			                else
			                {
			                    getPipelineDictionary().put(valueType, getFormattedValue(Long.valueOf((String)value), null));
			                }
			            }
			            else if (2 == dataType || 11 == dataType || 12 == dataType || 13 == dataType || 14 == dataType || 18 == dataType)
			            {
			                if (cast)
			                {
			                    getPipelineDictionary().put(valueType, getFormattedValue((Double)value, null));
			                }
			                else
			                {
			                    getPipelineDictionary().put(valueType, getFormattedValue(Double.valueOf((String)value), null));
			                }
			            }
			            else
			            {
			                getPipelineDictionary().put(valueType, value);
			            }
			        }
			    }
			%>

			<%
				Form rangeForm = (Form)getPipelineDictionary().get("FilterRangesForm");
				FilterOptions filterOptions = (FilterOptions)getPipelineDictionary().get("FilterAttribute:FilterOptions");
				List<FilterRange> filterRanges = null;
				
				if (filterOptions != null) {
				 	filterRanges = filterOptions.getRanges();
				}
				
				if (filterRanges != null && filterRanges.size() > 0) {
					getPipelineDictionary().put("RangeRowsInitialCount", filterRanges.size());
				} else {
					getPipelineDictionary().put("RangeRowsInitialCount", 1);
				} 					
					
				for (int i = 0; i < 20; i++) {
					Form subForm = rangeForm.getSubForm(String.valueOf(i));
					getPipelineDictionary().put("RangeFormInstance", subForm);
					
					if (filterRanges != null && i < filterRanges.size()) {
						FilterRange filterRange = filterRanges.get(i);		
						getPipelineDictionary().put("FilterRange", filterRange);
					} else {
						getPipelineDictionary().put("FilterRange", null);
					}
			%>
			
			<isif condition="#FilterRangesForm:isSubmitted#">
				<isif condition="#RangeFormInstance:LowerBound:isError("error.double") or RangeFormInstance:LowerBound:isError("error.integer") or RangeFormInstance:LowerBound:isError("error.regexp") or RangeFormInstance:LowerBound:isError("error.long")#">
					<isset name="LowerBoundValue" value="#RangeFormInstance:LowerBound:Value#" scope="request">
				<iselse>
					
				<%
					int dataType = (Integer)getPipelineDictionary().get("FilterAttribute:DataType");
					putFormattedBoundValue(dataType, "LowerBoundValue", getPipelineDictionary().get("RangeFormInstance:LowerBound:Value"), true);
				 %>			
				 
				</isif>
				<isif condition="#RangeFormInstance:UpperBound:isError("error.double") or RangeFormInstance:UpperBound:isError("error.integer") or RangeFormInstance:UpperBound:isError("error.regexp") or RangeFormInstance:UpperBound:isError("error.long")#">
					<isset name="UpperBoundValue" value="#RangeFormInstance:UpperBound:Value#" scope="request">				
				<iselse>
				<%
					int dataType = (Integer)getPipelineDictionary().get("FilterAttribute:DataType");
					putFormattedBoundValue(dataType, "UpperBoundValue", getPipelineDictionary().get("RangeFormInstance:UpperBound:Value"), true);
				 %>		
				 </isif>
				 	
				<isset name="FormatStringValue" value="#RangeFormInstance:FormatString:Value#" scope="request">
			<iselse>
				<isif condition="#isDefined(FilterRange)#">
				<%
					int dataType = (Integer)getPipelineDictionary().get("FilterAttribute:DataType");
					putFormattedBoundValue(dataType, "LowerBoundValue", getPipelineDictionary().get("FilterRange:Low"), false);
					putFormattedBoundValue(dataType, "UpperBoundValue", getPipelineDictionary().get("FilterRange:High"), false);
				 %>		
					<isset name="FormatStringValue" value="#FilterRange:Format#" scope="request">
				<iselse>
					<isset name="LowerBoundValue" value="" scope="request">
					<isset name="UpperBoundValue" value="" scope="request">
					<isset name="FormatStringValue" value="" scope="request">
				</isif>
				
			</isif>
			
			<tr id="RangeRow_<isprint value="#RangeFormInstance:ID#">" 
				<isif condition="#(FirstRangeRow eq 'true') or isDefined(FilterRange) or (RangeFormInstance:isInvalid eq 'true') or (RangeFormInstance:LowerBound:isValueMissing eq 'false') or (RangeFormInstance:UpperBound:isValueMissing eq 'false') or (RangeFormInstance:FormatString:isValueMissing eq 'false')#">
					class="displayTableRow"
				<iselse>
					class="hideTableRow"
				</isif>
			>
				<isif condition="#RangeFormInstance:LowerBound:isError("error.double") or RangeFormInstance:LowerBound:isError("error.integer") or RangeFormInstance:LowerBound:isError("error.regexp") or RangeFormInstance:LowerBound:isError("error.long")#">
					<td class="fielditem2_error" nowrap="nowrap"><istext key="FilterRanges.LowerBound.fielditem2_error" encoding="off"/>:</td>
				<iselse>
					<td class="fielditem2" nowrap="nowrap"><istext key="FilterRanges.LowerBound.fielditem2" encoding="off"/>:</td>
				</isif>
				<td><input type="text" name="<isprint value="#RangeFormInstance:LowerBound:QualifiedName#">" value="<isprint value="#LowerBoundValue#">" id="InputLowerBound_<isprint value="#RangeFormInstance:ID#">" /></td>
				<isif condition="#RangeFormInstance:UpperBound:isError("error.double") or RangeFormInstance:UpperBound:isError("error.integer") or RangeFormInstance:UpperBound:isError("error.regexp") or RangeFormInstance:UpperBound:isError("error.long")#">
					<td class="fielditem2_error" nowrap="nowrap"><istext key="FilterRanges.UpperBound.fielditem2_error" encoding="off"/>:</td>
				<iselse>
					<td class="fielditem2" nowrap="nowrap"><istext key="FilterRanges.UpperBound.fielditem2" encoding="off"/>:</td>
				</isif>
				<td><input type="text" name="<isprint value="#RangeFormInstance:UpperBound:QualifiedName#">" value="<isprint value="#UpperBoundValue#">" id="InputUpperBound_<isprint value="#RangeFormInstance:ID#">" /></td>
				<td class="fielditem2" nowrap="nowrap"><istext key="FilterRanges.FormatString.fielditem2" encoding="off"/>:</td>
				<td><input type="text" maxlength="50" name="<isprint value="#RangeFormInstance:FormatString:QualifiedName#">" value="<isprint value="#FormatStringValue#">" id="InputFormatString_<isprint value="#RangeFormInstance:ID#">" /></td>
				<td id="deleteAttributeNA<isprint value="#RangeFormInstance:ID#" />" width="1%" <isif condition="#FirstRangeRow eq 'true'#">style="visibility: hidden;"</isif> >
					<table border="0" cellpadding="0" cellspacing="4">
						<tr><td class="button">
							<isif condition="#(SearchIndexEditable EQ "true")#">
								<input type="button" name="removeRange" value="#localizeText('FilterRanges.RemoveRow.button')#" class="button" onClick="<isif condition="#FirstRangeRow eq 'false'#">hideRow(<isprint value="#RangeFormInstance:ID#">); </isif>return false;"/>
							<iselse>&nbsp;
							</isif>
						</td></tr>
					</table>
				</td>				
			</tr>	
			
			<isset name="FirstRangeRow" value="false" scope="request">	
		<%		
			}
		 %>
		 
		</table></td></tr>

		<tr><td class="w e"><img src="#Webroot()#/images/space.gif" width="1" height="6" alt="" border="0"/></td></tr>
	</table>

	<!--- Button controls --->
	<isif condition="#(SearchIndexEditable EQ "true")#">
	<table cellpadding="0" cellspacing="0" border="0" width="100%">
		<tr>
			<td class="w"/>
			<td align="left">
				<table cellpadding="0" cellspacing="4" border="0">
					<tr>
						
						<td class="button">
							<input type="button" class="button" name="addRange" value="#localizeText('FilterRanges.AddRow.button')#" class="button" onClick="showRow(); return false;"/>
						</td>
			
					</tr>
				</table>
			</td>
			<td class="e"/>
		</tr>	
	</table>
	</isif>				
	
	<isif condition="#isDefined(RangeRowsCount)#">
		<input type="hidden" name="RangeRowsCount" id="RangeRowsCount" value="<isprint value="#RangeRowsCount#">" />	
	<iselse/>
		<input type="hidden" name="RangeRowsCount" id="RangeRowsCount" value="<isprint value="#RangeRowsInitialCount#">" />
	</isif>

	
	<isif condition="#(SearchIndexEditable EQ "true")#">
	<table width="100%" border="0" cellspacing="0" cellpadding="0">
		<tr><td class="w e"><img src="#Webroot()#/images/space.gif" width="1" height="6" alt="" border="0"/></td></tr>
		<!--- Button controls --->
		<tr>
			<td align="right" class="aldi">
				<table cellpadding="0" cellspacing="4" border="0">
					<tr>
						<td class="button">
							<input type="submit" class="button" name="applyFilterRanges" value="#localizeText('FilterRanges.Apply.button')#"/>
						</td>						
						<td class="button">
							<input type="submit" name="resetFilterRanges" value="#localizeText('FilterRanges.Reset.button')#" class="button"/>
						</td>					
					</tr>
				</table>
			</td>
		</tr>
	</table>
	<iselse>
	<table width="100%" border="0" cellspacing="0" cellpadding="0">
		<tr><td class="w e s"><img src="#Webroot()#/images/space.gif" width="1" height="1" alt="" border="0"/></td></tr>
	</table>
	</isif>
</isform>

<script language="JavaScript" type="text/javascript">
//<![CDATA[	
	var maxRangeRows = 20;
	var rangeRowsCount = <isprint value="#RangeRowsInitialCount#">;
	
	function showRow() {
		if (rangeRowsCount < maxRangeRows) {
			setRangeRowClassName(rangeRowsCount++, "displayTableRow");
			setRangeRowsCountParameter(rangeRowsCount);
		}
	}
	
	function hideRow(rowNumber) {
	
		if (rangeRowsCount > 1) {
			for (i = rowNumber+1; i < rangeRowsCount; i++) {
				moveOneRowInputValuesUp(i);
			}

			rangeRowsCount--;
			setRangeRowClassName(rangeRowsCount, "hideTableRow");
			setRangeRowsCountParameter(rangeRowsCount);
			
			clearLastRowInputValues();
		}
	}

	function setRangeRowClassName(rowNumber, className) {
		document.getElementById("RangeRow_" + rowNumber).className = className; 
	}
	
	function moveOneRowInputValuesUp(rowNumber) {
		document.getElementById("InputLowerBound_" + (rowNumber-1)).value = document.getElementById("InputLowerBound_" + rowNumber).value;
		document.getElementById("InputUpperBound_" + (rowNumber-1)).value = document.getElementById("InputUpperBound_" + rowNumber).value;
		document.getElementById("InputFormatString_" + (rowNumber-1)).value = document.getElementById("InputFormatString_" + rowNumber).value;
	}
	
	function clearLastRowInputValues() {
		document.getElementById("InputLowerBound_" + rangeRowsCount).value = "";
		document.getElementById("InputUpperBound_" + rangeRowsCount).value = "";
		document.getElementById("InputFormatString_" + rangeRowsCount).value = "";	
	}
		
	function setRangeRowsCountParameter(count) {
		document.getElementById("RangeRowsCount").value = rangeRowsCount;
	}

	$('form[name="FilterRanges"]').submit(function onSubmit() {
		hideEmptyRow();
	});
	
	function hideEmptyRow(){
		var count=rangeRowsCount;
		for (i =0; i <count; i++){			
			if(!checkEmptyRow(i))
			{
				hideRow(i);	
			}
		}		
	}

	function checkEmptyRow(rowNumber){
		var inputLowerBound=document.getElementById("InputLowerBound_" + (rowNumber)).value;
		var inputUpperBound=document.getElementById("InputUpperBound_" + (rowNumber)).value;
		var inputFormatString=document.getElementById("InputFormatString_" + (rowNumber)).value;
		return !!inputLowerBound || !!inputUpperBound || !!inputFormatString;
	}
//]]>
</script>