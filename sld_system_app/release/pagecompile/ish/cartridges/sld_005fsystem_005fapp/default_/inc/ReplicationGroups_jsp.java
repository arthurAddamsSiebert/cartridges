/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2019-02-13 15:29:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package ish.cartridges.sld_005fsystem_005fapp.default_.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import com.intershop.beehive.core.internal.template.*;
import com.intershop.beehive.core.internal.template.isml.*;
import com.intershop.beehive.core.capi.log.*;
import com.intershop.beehive.core.capi.resource.*;
import com.intershop.beehive.core.capi.util.UUIDMgr;
import com.intershop.beehive.core.capi.util.XMLHelper;
import com.intershop.beehive.foundation.util.*;
import com.intershop.beehive.core.internal.url.*;
import com.intershop.beehive.core.internal.resource.*;
import com.intershop.beehive.core.internal.wsrp.*;
import com.intershop.beehive.core.capi.pipeline.PipelineDictionary;
import com.intershop.beehive.core.capi.naming.NamingMgr;
import com.intershop.beehive.core.capi.pagecache.PageCacheMgr;
import com.intershop.beehive.core.capi.request.SessionMgr;
import com.intershop.beehive.core.internal.request.SessionMgrImpl;
import com.intershop.beehive.core.pipelet.PipelineConstants;

public final class ReplicationGroups_jsp extends com.intershop.beehive.core.internal.template.AbstractTemplate
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 0, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

 
boolean _boolean_result=false;
TemplateExecutionConfig context = getTemplateExecutionConfig();
createTemplatePageConfig(context.getServletRequest());
printHeader(out);
 
 
setEncodingType("text/html"); 
 _boolean_result=false;try {_boolean_result=((Boolean)((hasLoopElements("task:ReplicationGroups") ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",2,e);}if (_boolean_result) { 
      out.write("<a name=\"top\"></a>");
 {Object temp_obj = (new Double(0)); getPipelineDictionary().put("all", temp_obj);} 
 {Object temp_obj = (new Double(0)); getPipelineDictionary().put("counter", temp_obj);} 
 while (loop("task:ReplicationGroups","groupid",null)) { 
 {Object temp_obj = ((new Double( ((Number) getObject("all")).doubleValue() +((Number) new Double(1)).doubleValue()))); getPipelineDictionary().put("all", temp_obj);} 
 } 
 while (loop("task:ReplicationGroups","groupid",null)) { 
 {Object temp_obj = ((new Double( ((Number) getObject("counter")).doubleValue() +((Number) new Double(1)).doubleValue()))); getPipelineDictionary().put("counter", temp_obj);} 
 {String value = null;try{value=context.getFormattedValue(getObject("ReplicationGroupConfiguration:ReplicationGroup(groupid):ReplicationGroupDesc(CurrentSession:Locale):Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {9}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;\n");
 _boolean_result=false;try {_boolean_result=((Boolean)((( ((Number) getObject("counter")).doubleValue() <((Number)(getObject("all"))).doubleValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",10,e);}if (_boolean_result) { 
      out.write("<br/>");
 } 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(((((Boolean) ((((context.getFormattedValue(getObject("show_entities"),null).equals(context.getFormattedValue("true",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue() && ((Boolean) (hasLoopElements("task:Assignments") ? Boolean.TRUE : Boolean.FALSE)).booleanValue()) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",12,e);}if (_boolean_result) { 
      out.write("<br/>\n<br/>\n<br/>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" class=\"n w e\">\n<tr>\n<td class=\"table_header s\" nowrap=\"nowrap\">");
 {out.write(localizeISText("ReplicationGroups.StagingGroup.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header s\" nowrap=\"nowrap\">");
 {out.write(localizeISText("ReplicationGroups.Type.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header w s\" nowrap=\"nowrap\">");
 {out.write(localizeISText("ReplicationGroups.StagingProcessor.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header w s\" nowrap=\"nowrap\">");
 {out.write(localizeISText("ReplicationGroups.StagingEntities.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n<td class=\"table_header w s\" nowrap=\"nowrap\">");
 {out.write(localizeISText("ReplicationGroups.Domain.table_header",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</td>\n</tr>");
 {Object temp_obj = (""); getPipelineDictionary().put("StagingGroupCartridge", temp_obj);} 
      out.write("<!-- Assignments sind erst verfÃ¼gbar, wenn Prozess gelaufen ist -->\n<!-- Assignments sind in jeder ReplicationGroup gleich--> \n");
 while (loop("task:Assignments","staginggroup",null)) { 
      out.write("<tr>\n<td class=\"table_detail s\">");
 {String value = null;try{value=context.getFormattedValue(getObject("staginggroup:StagingGroupPO:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {29}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n<td class=\"table_detail w s\">");
 {String value = null;try{value=context.getFormattedValue(getObject("staginggroup:StagingGroupPO:ContentType"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {30}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n<td class=\"table_detail w s\"><a href=\"");
      out.print("#");
 {String value = null;try{value=context.getFormattedValue(getObject("staginggroup:StagingGroupPO:StagingProcessor:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {31}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("\" class=\"table_detail_link2\">");
 {String value = null;try{value=context.getFormattedValue(getObject("staginggroup:StagingGroupPO:StagingProcessor:Name"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {31}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("</a></td>\n<td class=\"table_detail w s\">");
 while (loop("staginggroup:StagingGroupPO:StagingEntities","entity",null)) { 
 _boolean_result=false;try {_boolean_result=((Boolean)(((!(context.getFormattedValue(getObject("entity:CartridgeName"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",34,e);}if (_boolean_result) { 
 {Object temp_obj = (getObject("entity:CartridgeName")); getPipelineDictionary().put("StagingGroupCartridge", temp_obj);} 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(((!(context.getFormattedValue(getObject("entity:TableName"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",37,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("entity:TableName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {38}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("<br/>");
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(((!(context.getFormattedValue(getObject("entity:Path"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",40,e);}if (_boolean_result) { 
 {String value = null;try{value=context.getFormattedValue(getObject("entity:Path"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {41}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("<br/>");
 } 
 } 
 _boolean_result=false;try {_boolean_result=((Boolean)(((!(context.getFormattedValue(getObject("StagingGroupCartridge"),null).equals(context.getFormattedValue("",null)))) ? Boolean.TRUE : Boolean.FALSE))).booleanValue();} catch (Exception e) {Logger.debug(this,"Boolean expression in line {} could not be evaluated. False returned. Consider using the 'isDefined' ISML function.",44,e);}if (_boolean_result) { 
      out.write("<br/>(");
 {out.write(localizeISText("ReplicationGroups.DefinedInCartridge.table_detail",null,null,encodeString(context.getFormattedValue(getObject("StagingGroupCartridge"),null)),null,null,null,null,null,null,null,null,null));} 
      out.write(')');
      out.write('\n');
 } 
      out.write("\n&nbsp;</td>\n<td class=\"table_detail w s\">");
 {String value = null;try{value=context.getFormattedValue(getObject("staginggroup:DomainPO:DomainName"),null,null);}catch(Exception e){value=null;Logger.error(this,"ISPRINT has an invalid expression. Returning empty string. Line: {48}",e);}if (value==null) value="";value = encodeString(value);out.write(value);} 
      out.write("&nbsp;</td>\n</tr>");
 } 
      out.write("</table>\n<br/>\n<div class=\"overview_title_description\">\n<a href=\"");
      out.print("#");
      out.write("top\" class=\"breadcrumb\">");
 {out.write(localizeISText("ReplicationGroups.Top.link",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</a><br/><br/>");
 {out.write(localizeISText("ReplicationGroups.FullReplicationProcessors.link",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("<ul>\n<li><fn id=\"FullStagingProcessor\">");
 {out.write(localizeISText("ReplicationGroups.TheFullStagingProcessor",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</fn></li>\n<li><fn id=\"FullDomainSpecificStagingProcessor\">");
 {out.write(localizeISText("ReplicationGroups.TheFullDomainSpecificStagingProcessor",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</fn></li>\n<li><fn id=\"MViewStagingProcessor\">");
 {out.write(localizeISText("ReplicationGroups.TheMViewStagingProcessor",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</fn></li>\n</ul>");
 {out.write(localizeISText("ReplicationGroups.DeltaPartialReplicationProcessors",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("<ul>\n<li><fn id=\"MergeDomainSpecificStagingProcessor\">");
 {out.write(localizeISText("ReplicationGroups.TheMergeDomainSpecificStagingProcessor",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</fn></li>\n<li><fn id=\"IncrementalDomainSpecificStagingProcessor\">");
 {out.write(localizeISText("ReplicationGroups.TheIncrementalDomainSpecificStagingProcessor",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</fn></li>\n<li><fn id=\"AppendDomainSpecificStagingProcessor\">");
 {out.write(localizeISText("ReplicationGroups.TheAppendDomainSpecificStagingProcessor",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</i></fn></li>\n<li><fn id=\"DeleteAppendDomainSpecificStagingProcessor\">");
 {out.write(localizeISText("ReplicationGroups.TheDeleteAppendDomainSpecificStagingProcessor",null,null,null,null,null,null,null,null,null,null,null,null));} 
      out.write("</fn></li>\n</ul>\n</span>");
 } 
 } 
 printFooter(out); 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
