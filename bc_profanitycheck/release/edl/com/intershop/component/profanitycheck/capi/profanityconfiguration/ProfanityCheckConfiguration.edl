import "enfinity:/bc_profanitycheck/edl/com/intershop/component/profanitycheck/capi/profanityconfiguration/ProfanityCheckConfigurationAssignment.edl";
import "enfinity:/bc_profanitycheck/edl/com/intershop/component/profanitycheck/capi/profanityconfiguration/ProfanityCheckEntry.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/capi/domain/ExtensibleObject.edl";
import "enfinity:/core/edl/com/intershop/beehive/core/types.edl";

namespace com.intershop.component.profanitycheck.capi.profanityconfiguration
{
    /*
     * A ProfanityCheckConfiguration is used to be assigned to an OrganizationDomain or to a ChannelDomain.
     * 
     * @see com.intershop.component.profanitycheck.capi.profanityconfiguration.ProfanityCheckConfiguration
     * @author Vladimir Evrov, Veit Ullmann
     *  
     */
    cartridge interface ProfanityCheckConfiguration extends ExtensibleObject
    {
    	 /*
         * ID.
         */
        attribute id : string required;
        
        /*
         * The locale id.
         */
        attribute localeID : string required;
        
        /*
         * The display name mainly used for visualization purposes.
         */
        attribute displayName : string localized;
        
        /*
         * The description mainly used for visualization purposes.
         */
        attribute description : string localized;
        
        relation profanityCheckEntry : ProfanityCheckEntry[0..n];
        
        relation profanityCheckConfigurationAssignment : ProfanityCheckConfigurationAssignment[0..n];
        
        /*
         * Returns entries of the profanity check configuration sorted by position attribute (ASCENDING).
         */
        operation createSortedProfanityCheckEntriesIterator() : Iterator;
        
        /*
         * Returns entries of the profanity check configuration sorted by position attribute in the specified direction (-1=sort DESCENDING, 0=no sort, +1=sort (ASCENDING).
         */
        operation createSortedProfanityCheckEntriesIterator(direction : int) : Iterator;
    }
}